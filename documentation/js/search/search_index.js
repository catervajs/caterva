var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AccessTokenDto.html",[0,0.291,1,2.895]],["body/classes/AccessTokenDto.html",[0,0.45,1,5.238,2,0.795,3,0.156,4,0.156,5,0.113,6,6.312,7,5.399,8,0.829,9,2.067,10,6.689,11,0.933,12,0.013,13,1.009,14,1.341,15,2.433,16,0.933,17,6.198,18,0.156,19,1.295,20,0.156,21,0.01,22,0.012,23,0.01]],["title/classes/Account.html",[0,0.291,24,1.713]],["body/classes/Account.html",[0,0.32,2,0.565,3,0.111,4,0.111,5,0.08,8,1.002,9,1.67,11,1.237,12,0.014,13,1.134,14,1.719,15,2.537,16,1.196,18,0.147,19,0.921,20,0.111,21,0.007,22,0.009,23,0.007,24,2.503,25,3.837,26,2.429,27,4.752,28,4.419,29,4.752,30,4.752,31,4.752,32,2.407,33,5.726,34,5.726,35,5.726,36,4.419,37,7.005,38,7.005,39,6.339,40,6.339,41,5.94,42,4.404,43,4.161,44,3.184,45,4.404,46,4.404,47,4.404,48,4.404,49,3.837,50,4.404,51,4.419,52,4.404,53,4.404,54,5.853,55,4.404,56,3.184,57,4.404,58,3.688,59,4.895,60,3.837,61,3.934,62,3.934,63,1.301,64,3.837,65,6.102]],["title/controllers/AccountController.html",[66,1.523,67,2.895]],["body/controllers/AccountController.html",[0,0.324,3,0.184,4,0.113,5,0.081,8,0.598,11,1.103,12,0.014,14,1.433,16,0.997,18,0.193,19,0.934,20,0.113,21,0.007,22,0.009,23,0.007,24,3.56,26,2.026,66,1.7,67,4.273,68,1.766,69,3.895,70,2.656,71,2.165,72,2.657,73,1.936,74,2.429,75,2.919,76,3.895,77,4.743,78,4.173,79,1.692,80,5.919,81,4.471,82,4.471,83,4.471,84,2.518,85,1.536,86,2.337,87,2.004,88,4.471,89,7.046,90,5.911,91,4.471,92,4.471,93,4.44,94,3.515,95,5.24,96,4.471,97,4.471,98,3.725,99,3.725,100,2.817,101,2.749,102,4.648,103,0.598,104,3.934,105,3.515,106,2.817,107,4.648,108,1.7,109,4.173,110,4.273,111,4.173,112,4.185,113,3.895,114,2.656,115,3.232,116,2.389,117,2.817,118,2.817,119,4.471,120,4.471,121,2.276,122,1.32,123,3.934,124,4.471,125,1.59,126,4.471,127,5.911,128,3.725,129,4.471,130,4.471,131,4.471]],["title/modules/AccountModule.html",[132,1.413,133,2.692]],["body/modules/AccountModule.html",[0,0.385,3,0.133,4,0.133,5,0.096,12,0.014,18,0.205,20,0.133,21,0.008,22,0.011,23,0.008,24,2.267,67,5.188,68,2.605,103,0.709,104,4.916,105,4.167,115,3.831,132,2.533,133,5.47,134,2.362,135,2.465,136,2.698,137,2.698,138,2.465,139,3.654,140,3.654,141,4.617,142,4.617,143,4.617,144,5.293,145,3.357,146,2.698,147,2.698,148,5.3,149,5.188,150,5.3,151,3.34,152,1.621,153,5.3,154,6.593,155,3.831,156,5.3,157,4.167,158,5.3,159,2.832,160,5.3,161,5.3,162,4.617,163,4.617,164,4.617,165,5.3,166,5.3,167,5.3]],["title/injectables/AccountService.html",[104,2.379,168,0.897]],["body/injectables/AccountService.html",[0,0.259,3,0.09,4,0.09,5,0.065,8,0.478,11,1.112,12,0.014,13,1.124,16,1.112,18,0.177,20,0.09,21,0.006,22,0.008,23,0.006,24,3.453,26,2.26,27,4.635,29,4.635,30,4.635,31,4.635,32,2.944,63,1.055,71,1.857,72,2.263,73,2.099,74,3.132,75,2.574,76,4.416,77,4.656,79,0.858,84,2.81,85,1.714,86,2.553,87,2.105,95,4.968,103,0.478,104,3.011,106,2.252,107,3.986,108,1.359,115,2.583,125,1.736,152,1.093,168,1.136,169,1.909,170,3.113,171,3.408,172,5.069,173,5.069,174,5.069,175,5.069,176,1.725,177,3.573,178,2.533,179,3.573,180,5.069,181,3.573,182,4.416,183,3.986,184,5.069,185,3.573,186,5.069,187,3.573,188,4.416,189,5.069,190,3.573,191,4.416,192,5.069,193,3.573,194,4.416,195,5.069,196,3.573,197,4.416,198,3.573,199,3.573,200,2.465,201,1.412,202,3.573,203,1.309,204,2.515,205,1.26,206,5.892,207,3.573,208,5.892,209,3.573,210,5.892,211,3.573,212,5.892,213,3.573,214,5.892,215,3.573,216,5.069,217,1.019,218,3.573,219,3.573,220,3.573,221,3.573,222,3.573,223,3.573,224,6.77]],["title/controllers/AppController.html",[66,1.523,225,2.895]],["body/controllers/AppController.html",[0,0.44,3,0.152,4,0.152,5,0.11,8,0.81,12,0.014,13,0.995,14,1.311,16,0.912,18,0.18,20,0.152,21,0.01,22,0.011,23,0.01,66,2.719,68,2.394,71,2.619,86,2.139,103,0.81,121,3.085,122,1.79,125,1.455,225,5.169,226,5.279,227,6.845,228,6.059,229,4.793,230,5.279,231,6.059]],["title/modules/AppModule.html",[132,1.413,232,2.895]],["body/modules/AppModule.html",[0,0.396,3,0.137,4,0.137,5,0.099,11,0.821,12,0.014,18,0.2,20,0.137,21,0.009,22,0.011,23,0.009,41,4.849,68,2.65,103,0.729,132,2.565,134,2.43,135,2.535,136,2.775,137,2.775,138,2.535,139,3.7,140,2.775,145,3.415,146,2.775,147,2.775,151,3.435,152,1.667,159,3.585,225,5.253,229,4.995,230,4.749,232,5.947,233,4.749,234,4.749,235,4.749,236,4.995,237,5.33,238,5.451,239,5.451,240,4.749,241,5.451,242,5.451,243,4.749,244,4.749,245,5.451,246,5.451,247,5.451,248,5.451,249,5.451,250,5.451]],["title/injectables/AppService.html",[168,0.897,229,2.523]],["body/injectables/AppService.html",[0,0.449,3,0.156,4,0.156,5,0.113,8,0.827,12,0.013,13,1.007,16,0.931,18,0.156,20,0.156,21,0.01,22,0.012,23,0.01,71,2.651,86,2.183,103,0.827,125,1.485,168,1.622,169,3.305,227,6.891,229,4.56,251,5.389,252,6.186,253,6.186,254,6.186]],["title/controllers/AuthController.html",[66,1.523,149,2.895]],["body/controllers/AuthController.html",[0,0.261,1,4.906,3,0.091,4,0.091,5,0.065,8,0.481,10,5.602,11,1.114,12,0.014,13,0.501,14,1.392,16,0.968,18,0.182,19,0.752,20,0.091,21,0.006,22,0.008,23,0.006,24,3.512,26,1.967,27,2.6,29,2.6,30,2.6,31,2.6,32,2.711,66,1.368,68,1.421,70,2.137,71,1.865,73,2.005,79,1.544,80,5.056,84,2.445,85,1.492,86,2.27,87,1.971,98,2.266,99,2.266,103,0.481,104,3.512,105,2.828,111,4.276,112,4.031,114,2.137,115,2.6,122,1.504,123,4.397,125,1.63,149,3.682,157,2.828,176,1.224,188,4.437,191,4.437,194,4.437,197,4.437,203,1.865,205,1.687,217,1.834,255,2.828,256,7.529,257,5.093,258,5.093,259,5.093,260,5.093,261,3.597,262,5.903,263,6.431,264,7.403,265,3.597,266,3.597,267,3.597,268,3.597,269,3.597,270,3.597,271,3.597,272,3.597,273,3.597,274,3.597,275,3.597,276,3.597,277,3.597,278,3.597,279,3.597,280,5.336,281,1.922,282,3.133,283,3.597,284,5.602,285,4.906,286,3.597,287,3.597,288,3.133,289,3.133,290,3.133,291,3.133,292,3.597,293,3.597,294,3.597,295,3.597,296,3.597,297,6.431,298,3.597,299,3.597,300,2.111,301,2.111,302,2.27,303,4.976,304,1.899,305,6.431,306,6.431,307,6.431,308,3.597,309,3.597,310,3.597,311,3.597,312,3.597,313,3.597,314,3.597,315,3.597,316,3.597]],["title/classes/AuthDto.html",[0,0.291,262,2.895]],["body/classes/AuthDto.html",[0,0.452,2,0.798,3,0.157,4,0.157,5,0.113,8,0.832,9,2.072,11,0.936,12,0.013,13,1.011,14,1.346,15,2.437,16,0.936,18,0.157,19,1.3,20,0.157,21,0.01,22,0.012,23,0.01,32,2.817,262,5.249,317,5.42,318,6.221]],["title/classes/BadRequestDto.html",[0,0.291,319,2.523]],["body/classes/BadRequestDto.html",[0,0.494,2,0.716,3,0.14,4,0.14,5,0.102,8,0.746,9,1.942,11,1.151,12,0.014,13,1.064,14,1.655,15,2.629,16,1.151,18,0.171,19,1.167,20,0.171,21,0.009,22,0.011,23,0.009,43,4.043,85,1.295,103,0.746,281,3.924,304,2.169,319,4.289,320,6.163,321,4.389,322,4.937,323,4.937,324,4.937,325,5.309,326,5.582,327,5.582,328,5.582,329,5.582,330,3.752]],["title/classes/BannedFromGroupError.html",[0,0.291,331,1.863]],["body/classes/BannedFromGroupError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.275,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.059,349,1.372,350,2.724,351,1.76,352,1.372,353,1.76,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/CannotBanError.html",[0,0.291,353,1.863]],["body/classes/CannotBanError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.059,349,1.372,350,2.724,351,1.76,352,1.372,353,2.05,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/CannotDeleteGroupError.html",[0,0.291,351,1.863]],["body/classes/CannotDeleteGroupError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.059,349,1.372,350,2.724,351,2.05,352,1.372,353,1.76,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/CannotKickError.html",[0,0.291,354,1.863]],["body/classes/CannotKickError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.059,349,1.372,350,2.724,351,1.76,352,1.372,353,1.76,354,2.05,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/CannotLeaveGroupError.html",[0,0.291,352,1.863]],["body/classes/CannotLeaveGroupError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.059,349,1.372,350,2.724,351,1.76,352,1.76,353,1.76,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/modules/CoreModule.html",[132,1.413,236,2.523]],["body/modules/CoreModule.html",[0,0.386,3,0.134,4,0.134,5,0.097,12,0.014,18,0.195,20,0.134,21,0.009,22,0.011,23,0.009,103,0.711,132,2.537,133,5.566,134,2.37,135,2.473,136,2.707,137,2.707,138,2.473,139,2.707,140,3.659,145,3.363,146,2.707,147,2.707,159,3.53,236,5.283,478,4.632,479,4.632,480,4.632,481,5.566,482,5.566,483,5.566,484,5.318,485,5.318,486,5.318,487,5.318,488,5.318]],["title/classes/CouldNotUpdateLeaderboardEntryError.html",[0,0.291,489,2.523]],["body/classes/CouldNotUpdateLeaderboardEntryError.html",[0,0.515,2,0.584,3,0.115,4,0.115,5,0.083,12,0.014,13,1.026,18,0.179,20,0.179,21,0.01,22,0.01,23,0.007,73,1.539,79,1.436,87,1.592,103,0.609,121,2.317,122,1.344,125,1.436,168,1.34,205,1.916,217,1.906,300,2.33,301,1.964,304,1.344,333,2.17,385,1.947,402,1.83,415,2.745,439,2.338,489,4.21,490,3.06,491,4.215,492,4.83,493,2.868,494,2.704,495,3.196,496,4.021,497,2.868,498,2.56,499,3.06,500,3.769,501,2.432,502,3.06,503,4.955,504,4.491,505,4.83,506,4.767,507,4.491,508,2.868,509,3.29,510,3.29,511,4.471,512,4.021,513,3.29,514,3.29,515,3.29,516,3.06,517,2.868,518,2.868,519,5.129,520,4.021,521,4.83,522,4.83,523,4.324,524,3.29,525,3.29,526,3.29,527,3.29,528,3.29,529,4.324,530,3.29,531,3.29,532,3.29,533,3.769,534,3.29,535,4.324,536,3.29,537,3.29,538,3.29]],["title/classes/CreateAccountDto.html",[0,0.291,77,2.523]],["body/classes/CreateAccountDto.html",[0,0.39,2,0.689,3,0.135,4,0.135,5,0.098,8,0.718,9,1.896,11,1.189,12,0.014,13,1.154,14,1.71,15,2.287,16,1.189,18,0.135,19,1.122,20,0.135,21,0.009,22,0.011,23,0.009,26,2.511,27,5.218,29,5.218,30,5.218,31,5.218,33,6.289,34,6.289,77,4.188,539,6.975,540,4.222,541,5.548,542,5.37,543,5.37,544,5.37,545,5.37,546,5.37,547,5.37]],["title/classes/CreateGroupDto.html",[0,0.291,548,2.692]],["body/classes/CreateGroupDto.html",[0,0.437,2,0.772,3,0.151,4,0.151,5,0.109,8,0.804,9,2.031,11,1.072,12,0.013,13,0.991,14,1.541,15,2.535,16,1.072,18,0.151,19,1.257,20,0.151,21,0.01,22,0.011,23,0.01,26,2.178,85,1.759,362,3.38,387,3.173,548,4.786,549,6.606,550,4.729,551,6.015,552,6.015]],["title/classes/CreateProfileDto.html",[0,0.291,553,2.379]],["body/classes/CreateProfileDto.html",[0,0.433,2,0.765,3,0.15,4,0.15,5,0.108,8,0.797,9,2.02,11,1.066,12,0.013,13,1.088,14,1.532,15,2.243,16,1.066,18,0.15,19,1.246,20,0.15,21,0.01,22,0.011,23,0.01,26,2.166,541,5.078,553,4.206,554,6.581,555,4.686,556,6.581,557,6.581,558,5.96,559,5.96,560,7.081,561,5.96,562,5.96]],["title/classes/ErrorDto.html",[0,0.291,325,2.895]],["body/classes/ErrorDto.html",[0,0.506,2,0.744,3,0.146,4,0.146,5,0.106,8,0.776,9,1.987,11,1.049,12,0.013,13,1.103,14,1.508,15,2.617,16,1.049,18,0.175,19,1.212,20,0.175,21,0.009,22,0.011,23,0.009,43,3.445,85,1.732,103,0.776,281,3.723,304,1.713,319,3.655,320,5.871,321,4.561,322,3.899,323,3.899,324,3.899,325,5.398,330,5.02,563,5.8,564,5.8]],["title/modules/ExtensionsModule.html",[132,1.413,237,2.692]],["body/modules/ExtensionsModule.html",[0,0.429,3,0.149,4,0.149,5,0.108,12,0.013,18,0.189,20,0.149,21,0.009,22,0.011,23,0.009,103,0.79,132,2.656,134,2.632,135,2.747,136,3.007,137,3.007,138,2.747,139,3.007,140,3.007,145,3.585,146,3.007,147,3.007,159,3.763,237,5.533,565,5.145,566,5.145,567,5.431,568,5.431,569,5.906,570,5.906,571,5.906]],["title/controllers/FriendController.html",[66,1.523,572,2.895]],["body/controllers/FriendController.html",[0,0.217,3,0.075,4,0.075,5,0.054,8,0.399,11,1.144,12,0.014,14,1.522,16,1.058,18,0.177,19,0.624,20,0.075,21,0.005,22,0.007,23,0.005,26,2.151,66,1.135,68,1.179,70,1.773,71,1.628,73,2.077,74,2.889,78,4.43,79,1.586,84,2.673,85,1.667,86,2.482,87,2.073,93,4.905,98,1.88,99,3.969,100,1.88,101,3.453,103,0.399,109,4.528,110,3.214,111,4.43,112,4.268,113,3.874,114,1.773,116,1.595,117,1.88,118,1.88,121,1.519,122,0.881,123,4.176,125,1.688,128,4.43,204,1.016,205,1.641,217,1.884,302,1.569,402,2.093,408,1.33,442,2.625,473,2.694,572,3.214,573,2.6,574,1.88,575,4.179,576,4.953,577,5.315,578,5.315,579,5.315,580,5.315,581,4.953,582,2.984,583,5.315,584,5.492,585,3.496,586,3.496,587,4.631,588,2.984,589,2.984,590,5.492,591,2.984,592,2.984,593,5.315,594,5.487,595,2.984,596,2.984,597,2.984,598,6.299,599,3.362,600,2.984,601,2.984,602,2.984,603,2.984,604,4.44,605,2.984,606,3.969,607,2.984,608,2.984,609,2.984,610,2.984,611,2.984,612,2.984,613,3.959,614,3.313,615,2.984,616,2.984,617,2.984,618,2.984,619,5.315,620,2.501,621,4.447,622,2.984,623,2.984,624,2.984,625,2.984,626,5.315,627,2.984,628,2.984,629,2.346,630,2.84,631,2.346,632,3.496,633,2.264,634,2.346,635,5.492,636,2.984,637,2.984,638,2.984,639,3.214,640,2.984,641,2.006,642,2.984,643,2.984,644,2.984,645,2.346,646,2.984,647,2.984,648,6.605,649,2.984,650,5.433,651,6.605,652,2.984,653,2.984,654,2.984,655,4.447,656,2.984,657,2.157,658,2.984,659,2.984,660,2.984,661,2.984,662,2.984,663,2.984,664,2.984,665,2.984,666,3.573,667,2.984,668,2.984,669,2.984,670,2.984,671,2.984,672,2.984,673,2.984]],["title/modules/FriendModule.html",[132,1.413,481,2.692]],["body/modules/FriendModule.html",[0,0.409,3,0.142,4,0.142,5,0.102,12,0.014,18,0.201,20,0.142,21,0.009,22,0.011,23,0.009,68,2.703,103,0.753,132,2.602,134,2.509,135,2.619,136,2.866,137,2.866,138,2.619,139,3.753,140,3.753,145,3.484,146,2.866,147,2.866,151,3.547,152,1.722,159,3.008,481,5.436,572,5.329,620,3.166,630,4.456,631,4.427,674,4.904,675,4.904,676,4.904,677,5.63,678,4.427,679,4.311,680,4.427,681,3.785,682,4.427,683,5.63,684,5.63]],["title/injectables/FriendService.html",[168,0.897,630,2.14]],["body/injectables/FriendService.html",[0,0.209,3,0.043,4,0.043,5,0.031,8,0.23,11,1,12,0.014,13,1.14,16,1,18,0.145,20,0.072,21,0.003,22,0.005,23,0.003,24,3.385,26,2.032,32,0.63,63,0.508,71,1.053,73,1.997,79,1.324,80,5.006,84,2.526,85,1.541,86,2.299,87,1.959,101,2.689,103,0.23,125,1.779,152,0.526,168,0.644,169,0.92,176,0.978,178,2.179,183,2.26,201,0.68,203,2.546,204,2.553,205,1.749,217,1.768,300,1.706,301,1.42,302,2.299,304,0.508,333,0.526,344,1.093,401,3.371,402,2.432,432,0.767,442,2.317,473,2.359,508,1.811,574,1.811,575,2.911,576,3.781,581,3.781,585,2.26,586,2.26,587,4.546,599,3.796,604,5.445,606,1.811,613,5.522,614,3.487,620,3.736,630,1.536,632,1.353,633,3.819,634,1.353,641,2.907,650,2.078,657,2.078,678,1.353,679,1.811,680,1.353,681,1.157,682,1.353,685,1.353,686,3.225,687,3.225,688,3.225,689,3.225,690,2.875,691,3.225,692,3.225,693,2.875,694,1.721,695,3.225,696,1.721,697,2.504,698,1.721,699,1.721,700,3.757,701,6.896,702,6.313,703,1.721,704,4.465,705,5.233,706,1.721,707,2.504,708,4.342,709,4.723,710,4.731,711,4.805,712,5.037,713,6.038,714,2.489,715,1.721,716,1.721,717,3.767,718,2.504,719,1.721,720,3.767,721,1.721,722,1.721,723,2.504,724,1.721,725,4.189,726,4.189,727,1.721,728,2.504,729,1.721,730,1.721,731,1.721,732,1.721,733,2.504,734,1.721,735,2.504,736,1.721,737,1.721,738,1.721,739,2.504,740,1.721,741,1.721,742,1.933,743,3.233,744,1.499,745,1.499,746,4.805,747,2.911,748,2.911,749,3.225,750,3.225,751,3.225,752,3.225,753,4.528,754,4.189,755,1.499,756,2.504,757,4.189,758,4.805,759,4.189,760,4.189,761,2.504,762,1.499,763,2.504,764,1.499,765,1.499,766,1.499,767,4.189,768,6.057,769,1.499,770,4.189,771,1.499,772,1.499,773,1.499,774,1.499,775,1.499,776,1.499,777,1.499,778,1.499,779,1.499,780,1.499,781,1.499,782,1.499,783,1.499,784,1.499,785,1.499,786,2.504,787,3.225,788,3.767,789,3.767,790,5.674,791,4.189,792,2.504,793,2.504,794,2.504,795,1.499,796,1.499,797,1.885,798,2.504]],["title/classes/Friendship.html",[0,0.291,620,2.252]],["body/classes/Friendship.html",[0,0.368,2,0.652,3,0.128,4,0.128,5,0.092,8,0.679,9,1.831,11,1.205,12,0.014,13,1.029,14,1.712,16,1.191,18,0.177,20,0.128,21,0.008,22,0.01,23,0.008,24,3.383,28,4.731,36,4.731,43,4.392,58,4.044,59,4.044,61,4.731,62,4.731,63,1.5,302,2.484,344,1.931,421,2.361,599,2.585,604,4.731,613,4.971,620,3.609,633,2.585,704,5.127,710,3.413,713,5.533,742,3.413,748,3.992,797,3.267,799,4.423,800,6.418,801,5.077,802,5.513,803,5.077,804,5.077,805,5.077,806,5.077,807,5.077,808,6.441,809,2.713,810,5.077,811,5.077,812,5.533,813,5.533,814,4.423,815,5.077]],["title/classes/FriendshipComposite.html",[0,0.291,679,2.523]],["body/classes/FriendshipComposite.html",[0,0.389,2,0.688,3,0.135,4,0.135,5,0.098,8,0.717,9,1.894,11,1.135,12,0.014,13,1.049,14,1.632,16,1.135,18,0.167,20,0.135,21,0.009,22,0.011,23,0.009,63,1.583,344,2.039,443,2.494,599,2.729,604,5.068,613,5.068,620,3.735,633,2.729,679,4.184,681,5.209,704,5.209,708,3.875,709,4.215,710,3.604,742,3.604,816,6.751,817,4.67,818,7.54,819,7.54,820,8.153,821,5.361,822,5.361,823,5.361,824,5.361,825,6.64,826,5.361,827,5.361,828,6.64,829,6.64,830,5.361,831,5.361,832,5.361,833,5.361]],["title/classes/FriendshipTwoWayRelationStatusDto.html",[0,0.291,635,2.895]],["body/classes/FriendshipTwoWayRelationStatusDto.html",[0,0.437,2,0.773,3,0.152,4,0.152,5,0.11,8,0.806,9,2.033,11,0.907,12,0.013,14,1.304,15,2.405,16,0.907,18,0.179,19,1.259,20,0.152,21,0.01,22,0.011,23,0.01,302,2.679,344,2.291,599,3.864,614,4.268,633,3.864,635,5.152,714,5.102,742,4.051,834,5.604,835,5.249,836,6.026]],["title/classes/FriendshipTwoWayRelationStatusesDto.html",[0,0.291,606,2.523]],["body/classes/FriendshipTwoWayRelationStatusesDto.html",[0,0.364,2,0.644,3,0.126,4,0.126,5,0.091,8,0.67,9,1.816,11,1.222,12,0.014,13,1.157,14,1.644,15,2.46,16,1.144,18,0.126,19,1.048,20,0.126,21,0.008,22,0.01,23,0.008,574,4.409,599,3.953,606,4.012,614,4.367,633,3.953,797,3.868,809,4.06,834,6.105,837,4.368,838,6.095,839,6.095,840,6.997,841,6.997,842,5.974,843,4.787,844,5.015,845,5.015,846,5.015,847,5.015,848,5.015]],["title/classes/Group.html",[0,0.291,336,1.467]],["body/classes/Group.html",[0,0.372,2,0.658,3,0.129,4,0.129,5,0.093,8,0.685,9,1.842,11,1.207,12,0.014,13,1.033,14,1.69,15,2.511,16,1.175,18,0.178,19,1.071,20,0.129,21,0.008,22,0.01,23,0.008,28,4.751,32,2.588,36,4.751,39,5.076,41,4.667,43,4.407,44,3.705,49,4.465,51,3.445,56,3.705,58,4.068,59,4.453,60,4.465,61,4.34,62,4.34,63,1.514,64,4.465,65,5.624,85,1.639,336,2.588,338,2.859,340,2.192,362,3.15,363,2.877,368,2.492,387,2.877,453,3.287,797,2.609,809,2.739,843,3.229,849,4.465,850,5.125,851,5.125,852,5.125,853,5.125,854,5.125,855,5.125,856,5.125,857,5.125,858,6.456]],["title/controllers/GroupController.html",[66,1.523,859,2.895]],["body/controllers/GroupController.html",[0,0.134,3,0.047,4,0.047,5,0.034,8,0.248,11,1.168,12,0.014,13,0.859,14,1.513,16,1.052,18,0.168,19,0.387,20,0.047,21,0.003,22,0.005,23,0.003,26,2.138,66,0.704,68,0.731,70,1.1,71,1.118,72,1.767,73,2.072,74,1.859,75,1.903,78,4.405,79,1.086,84,2.658,85,1.834,86,2.467,87,2.05,93,4.809,94,1.456,98,3.591,99,2.456,100,1.166,101,3.033,102,2.401,103,0.248,106,1.166,108,0.704,109,4.46,110,3.618,111,3.891,112,4.205,114,1.1,116,0.989,117,1.166,118,1.166,121,0.942,122,0.547,123,4.153,125,1.599,128,4.405,171,2.053,204,0.63,205,1.842,217,1.994,281,0.989,282,1.613,285,5.117,300,1.003,319,4.46,336,2.388,343,2.141,345,2.548,346,1.421,355,1.667,362,2.231,374,3.759,376,0.9,380,2.104,383,1.485,387,1.738,398,3.238,400,2.104,402,1.889,403,2.969,405,0.861,408,2.655,419,3.441,439,2.036,443,1.421,453,2.104,457,1.485,464,1.485,473,1.306,548,4.005,629,1.456,639,5.226,650,4.306,666,4.276,809,1.632,859,2.208,860,1.613,861,3.899,862,3.899,863,3.899,864,3.054,865,3.899,866,3.899,867,3.899,868,3.899,869,3.054,870,5.006,871,3.899,872,1.851,873,6.361,874,5.006,875,3.899,876,5.006,877,3.054,878,1.851,879,1.613,880,1.851,881,1.851,882,1.851,883,1.851,884,1.851,885,3.054,886,1.851,887,1.851,888,1.851,889,1.851,890,1.851,891,1.851,892,1.851,893,2.661,894,3.899,895,3.054,896,1.851,897,1.851,898,1.851,899,1.851,900,1.851,901,1.851,902,5.681,903,1.851,904,3.899,905,1.851,906,1.851,907,1.851,908,1.613,909,1.851,910,1.851,911,1.851,912,1.851,913,1.851,914,1.851,915,3.054,916,1.851,917,1.851,918,1.851,919,1.851,920,1.851,921,1.851,922,1.851,923,1.851,924,1.851,925,1.851,926,1.851,927,1.851,928,1.851,929,1.851,930,1.851,931,1.851,932,1.851,933,1.851,934,1.613,935,1.456,936,3.895,937,1.851,938,2.818,939,1.851,940,1.338,941,1.851,942,1.613,943,3.27,944,1.851,945,3.895,946,1.851,947,4.524,948,1.613,949,1.613,950,1.851,951,1.851,952,1.851,953,6.991,954,5.699,955,1.851,956,1.851,957,1.851,958,1.851,959,1.851,960,1.851,961,1.851,962,1.851,963,1.851,964,3.899,965,1.851,966,1.851,967,1.851,968,1.851,969,1.851,970,1.851,971,6.361,972,1.851,973,1.851,974,1.851,975,3.899,976,1.851,977,1.851,978,1.851,979,3.054,980,1.851,981,1.851,982,3.054,983,3.936,984,3.054,985,1.851,986,1.851,987,4.237,988,1.851,989,1.851,990,1.851,991,1.851,992,3.899,993,1.851,994,1.851,995,1.851,996,3.054,997,1.851,998,1.851,999,1.851,1000,1.851,1001,1.851,1002,1.851,1003,1.851,1004,1.851,1005,1.851,1006,1.851,1007,1.851,1008,1.851,1009,1.851,1010,1.851,1011,3.054,1012,1.851,1013,1.851,1014,1.851]],["title/classes/GroupDoesNotExistError.html",[0,0.291,347,1.863]],["body/classes/GroupDoesNotExistError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.992,348,3.059,349,1.372,350,2.724,351,1.76,352,1.372,353,1.76,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/GroupDto.html",[0,0.291,936,2.895]],["body/classes/GroupDto.html",[0,0.447,2,0.791,3,0.155,4,0.155,5,0.112,8,0.824,9,2.06,11,0.928,12,0.013,14,1.334,15,2.427,16,0.928,18,0.182,19,1.288,20,0.155,21,0.01,22,0.012,23,0.01,336,2.987,337,2.747,936,5.22,1015,5.368,1016,6.163]],["title/classes/GroupExceptionFilter.html",[0,0.291,940,2.895]],["body/classes/GroupExceptionFilter.html",[0,0.396,2,0.7,3,0.137,4,0.137,5,0.099,8,0.729,11,0.821,12,0.014,16,0.821,18,0.183,20,0.137,21,0.009,22,0.011,23,0.009,26,1.667,71,2.457,79,1.309,84,2.073,85,1.759,86,1.924,101,3.12,103,0.729,205,1.97,281,2.913,302,2.368,303,3.664,304,1.61,322,3.664,323,3.664,324,3.664,330,4.885,334,3.38,935,4.286,940,4.849,1017,5.844,1018,4.286,1019,5.275,1020,5.714,1021,5.253,1022,5.275,1023,5.714,1024,5.963,1025,4.749,1026,4.286,1027,4.286,1028,5.275,1029,3.94,1030,5.451,1031,4.286,1032,4.286,1033,4.286,1034,4.286,1035,4.749,1036,4.286,1037,4.286,1038,4.286,1039,4.286]],["title/classes/GroupMember.html",[0,0.291,338,1.467]],["body/classes/GroupMember.html",[0,0.363,2,0.643,3,0.126,4,0.126,5,0.091,8,0.669,9,1.815,11,1.187,12,0.014,13,1.024,14,1.644,15,2.459,16,1.143,18,0.191,19,1.046,20,0.126,21,0.008,22,0.01,23,0.008,24,3.146,51,3.366,58,4.008,59,4.008,63,1.479,336,2.951,338,2.33,341,3.532,342,2.434,343,2.141,344,1.904,374,3.252,400,3.252,403,3.116,414,3.399,430,2.434,455,2.434,797,3.239,802,5.054,808,6.409,809,3.399,814,4.362,843,3.155,1040,6.761,1041,4.362,1042,5.007,1043,6.409,1044,6.409,1045,5.007,1046,5.002,1047,5.007,1048,5.007,1049,5.007,1050,5.007,1051,5.007,1052,6.992,1053,5.007]],["title/modules/GroupModule.html",[132,1.413,482,2.692]],["body/modules/GroupModule.html",[0,0.409,3,0.142,4,0.142,5,0.103,12,0.014,18,0.201,20,0.142,21,0.009,22,0.011,23,0.009,68,2.706,103,0.754,132,2.604,134,2.514,135,2.623,136,2.871,137,2.871,138,2.623,139,3.756,140,3.756,145,3.487,146,2.871,147,2.871,151,3.554,152,1.725,159,3.014,336,2.065,337,2.514,338,2.508,339,2.514,340,2.412,355,3.567,482,5.438,859,5.333,935,4.434,1054,4.913,1055,4.913,1056,4.913,1057,5.64,1058,5.64,1059,5.64]],["title/classes/GroupsDto.html",[0,0.291,938,2.895]],["body/classes/GroupsDto.html",[0,0.437,2,0.772,3,0.151,4,0.151,5,0.109,8,0.804,9,2.031,11,1.072,12,0.013,14,1.541,15,2.484,16,1.072,18,0.179,19,1.257,20,0.151,21,0.01,22,0.011,23,0.01,336,2.871,337,2.681,380,3.527,809,3.214,843,3.79,938,5.146,983,5.962,1060,5.24,1061,6.015,1062,6.015]],["title/injectables/JwtAuthGuard.html",[116,2.14,168,0.897]],["body/injectables/JwtAuthGuard.html",[0,0.459,3,0.159,4,0.159,5,0.115,12,0.013,18,0.184,20,0.159,21,0.01,22,0.012,23,0.01,103,0.845,116,3.915,155,4.567,168,1.642,169,3.376,333,1.932,1063,5.504,1064,5.504,1065,6.318,1066,6.318]],["title/injectables/JwtStrategy.html",[144,2.692,168,0.897]],["body/injectables/JwtStrategy.html",[0,0.411,3,0.142,4,0.142,5,0.103,8,0.757,11,0.852,12,0.014,16,1.033,18,0.186,20,0.142,21,0.009,22,0.011,23,0.011,26,1.731,71,2.514,73,1.9,84,2.152,85,1.313,86,1.997,101,2.632,103,0.757,125,1.359,144,4.614,155,4.091,163,4.93,164,4.93,168,1.538,169,3.024,176,2.514,182,4.93,204,1.926,290,4.93,291,4.93,333,1.731,363,2.522,402,1.731,1067,4.93,1068,6.864,1069,5.659,1070,6.864,1071,5.659,1072,5.659,1073,5.659,1074,5.659,1075,4.93,1076,4.45,1077,5.659,1078,5.659,1079,5.659,1080,5.659,1081,5.659,1082,5.659,1083,5.659,1084,5.659,1085,5.659]],["title/controllers/LeaderboardController.html",[66,1.523,1086,2.895]],["body/controllers/LeaderboardController.html",[0,0.265,3,0.092,4,0.092,5,0.067,8,0.489,11,1.153,12,0.014,13,0.986,14,1.402,16,0.975,18,0.19,19,0.764,20,0.092,21,0.006,22,0.008,23,0.006,26,1.982,66,1.391,68,1.445,70,2.173,71,1.887,73,2.011,75,1.96,78,4.082,84,2.463,85,1.797,86,2.287,87,1.979,93,4.684,98,2.305,99,3.247,100,2.305,101,3.177,103,0.489,108,1.391,109,4.303,111,4.303,112,4.057,114,2.173,116,1.954,117,2.305,118,2.305,121,1.862,122,1.08,123,3.848,125,1.555,128,4.082,204,1.245,205,1.281,285,4.937,319,4.303,402,1.825,439,2.232,495,3.462,496,3.464,497,3.247,498,2.898,499,2.459,501,3.189,502,4.011,503,5.421,511,4.684,512,4.763,516,4.011,517,4.465,518,4.465,533,2.305,594,5.198,629,2.876,639,5.122,666,3.464,797,1.862,809,3.462,842,2.876,934,3.186,942,3.186,948,3.186,949,3.186,987,2.876,1086,3.725,1087,3.186,1088,3.658,1089,5.967,1090,5.198,1091,3.658,1092,3.658,1093,3.658,1094,6.479,1095,3.658,1096,3.658,1097,3.658,1098,3.658,1099,3.658,1100,5.967,1101,3.658,1102,3.658,1103,3.658,1104,3.658,1105,4.052,1106,3.658,1107,3.658,1108,3.658,1109,5.263,1110,3.658,1111,3.658,1112,2.876,1113,5.967,1114,2.644,1115,3.658,1116,3.658,1117,3.658,1118,3.658,1119,6.479,1120,6.479,1121,5.154,1122,3.658,1123,3.658,1124,3.658,1125,3.658,1126,3.658,1127,3.658,1128,3.658,1129,3.658]],["title/classes/LeaderboardEntriesDto.html",[0,0.291,498,2.252]],["body/classes/LeaderboardEntriesDto.html",[0,0.419,2,0.742,3,0.145,4,0.145,5,0.105,8,0.773,9,1.983,11,1.165,12,0.014,14,1.614,15,2.547,16,1.122,18,0.175,19,1.208,20,0.145,21,0.009,22,0.011,23,0.009,495,4.134,497,3.642,498,3.91,511,3.642,517,4.698,518,4.698,533,4.698,809,3.088,843,3.642,1130,6.083,1131,5.035,1132,5.78,1133,4.595,1134,5.78,1135,5.78]],["title/classes/LeaderboardEntryDto.html",[0,0.291,495,2.14]],["body/classes/LeaderboardEntryDto.html",[0,0.427,2,0.755,3,0.148,4,0.148,5,0.107,8,0.787,9,2.005,11,1.131,12,0.013,13,0.978,14,1.626,15,2.585,16,1.131,18,0.148,19,1.23,20,0.148,21,0.009,22,0.011,23,0.009,439,2.219,495,3.755,506,4.734,507,5.051,1130,6.119,1133,4.623,1136,4.626,1137,5.884,1138,5.884,1139,5.126]],["title/classes/LeaderboardEntryNotFoundError.html",[0,0.291,500,2.523]],["body/classes/LeaderboardEntryNotFoundError.html",[0,0.515,2,0.584,3,0.115,4,0.115,5,0.083,12,0.014,13,1.026,18,0.179,20,0.179,21,0.01,22,0.01,23,0.007,73,1.539,79,1.436,87,1.592,103,0.609,121,2.317,122,1.344,125,1.436,168,1.34,205,1.916,217,1.906,300,2.33,301,1.964,304,1.344,333,2.17,385,1.947,402,1.83,415,2.745,439,2.338,489,3.769,490,3.06,491,4.215,492,4.83,493,2.868,494,2.704,495,3.196,496,4.021,497,2.868,498,2.56,499,3.06,500,4.21,501,2.432,502,3.06,503,4.955,504,4.491,505,4.83,506,4.767,507,4.491,508,2.868,509,3.29,510,3.29,511,4.471,512,4.021,513,3.29,514,3.29,515,3.29,516,3.06,517,2.868,518,2.868,519,5.129,520,4.021,521,4.83,522,4.83,523,4.324,524,3.29,525,3.29,526,3.29,527,3.29,528,3.29,529,4.324,530,3.29,531,3.29,532,3.29,533,3.769,534,3.29,535,4.324,536,3.29,537,3.29,538,3.29]],["title/classes/LeaderboardExceptionFilter.html",[0,0.291,1114,2.895]],["body/classes/LeaderboardExceptionFilter.html",[0,0.396,2,0.7,3,0.137,4,0.137,5,0.099,8,0.729,11,0.821,12,0.014,16,0.821,18,0.183,20,0.137,21,0.009,22,0.011,23,0.009,26,1.667,71,2.457,79,1.309,84,2.073,85,1.759,86,1.924,101,3.12,103,0.729,205,1.97,281,2.913,302,2.368,303,3.664,304,1.61,322,3.664,323,3.664,324,3.664,330,4.885,491,4.504,1018,4.286,1019,5.275,1020,5.714,1021,5.253,1022,5.275,1023,5.714,1024,5.963,1025,4.749,1026,4.286,1027,4.286,1028,5.275,1029,3.94,1031,4.286,1032,4.286,1033,4.286,1034,4.286,1035,4.749,1036,4.286,1037,4.286,1038,4.286,1039,4.286,1112,4.286,1114,4.849,1140,5.844,1141,5.451]],["title/modules/LeaderboardModule.html",[132,1.413,483,2.692]],["body/modules/LeaderboardModule.html",[0,0.411,3,0.142,4,0.142,5,0.103,12,0.014,18,0.193,20,0.142,21,0.009,22,0.011,23,0.009,68,2.712,103,0.757,132,2.608,134,2.522,135,2.632,136,2.881,137,2.881,138,2.632,139,3.761,140,3.761,145,3.495,146,2.881,147,2.881,159,3.024,244,4.93,483,5.442,493,3.566,494,3.362,501,4.459,1086,5.341,1112,4.45,1142,4.93,1143,4.93,1144,4.93,1145,5.659,1146,5.659,1147,5.659,1148,5.659,1149,5.659,1150,5.659,1151,5.659,1152,5.659]],["title/injectables/LeaderboardService.html",[168,0.897,501,2.14]],["body/injectables/LeaderboardService.html",[0,0.492,3,0.102,4,0.102,5,0.074,8,0.543,11,1.102,12,0.014,13,1.128,16,1.02,18,0.171,20,0.171,21,0.009,22,0.009,23,0.007,26,2.073,71,2.03,73,1.962,79,1.331,84,2.577,85,1.572,86,2.227,87,1.889,103,0.543,121,2.069,122,1.2,125,1.331,168,1.242,169,2.171,176,1.383,205,1.862,217,1.8,300,2.225,301,1.82,304,1.2,333,1.93,385,2.699,402,1.696,415,2.593,439,2.367,489,3.493,490,2.732,491,3.748,492,5.293,493,2.56,494,2.414,495,2.962,496,3.727,497,2.56,498,2.285,499,2.732,500,3.493,501,2.962,502,4.242,503,5.128,504,4.242,505,4.561,506,4.806,507,4.242,508,2.56,509,2.937,510,2.937,511,4.271,512,3.727,513,2.937,514,2.937,515,2.937,516,4.242,517,2.56,518,2.56,519,4.9,520,3.727,521,4.561,522,4.561,523,4.007,524,2.937,525,2.937,526,2.937,527,2.937,528,2.937,529,4.007,530,2.937,531,2.937,532,2.937,533,3.493,534,2.937,535,4.007,536,2.937,537,2.937,538,2.937,893,3.54,1090,4.83,1133,3.293,1153,4.064,1154,4.064,1155,4.064,1156,5.544,1157,4.064,1158,4.064,1159,4.064,1160,4.064,1161,4.064]],["title/classes/MembershipDto.html",[0,0.291,945,2.895]],["body/classes/MembershipDto.html",[0,0.446,2,0.789,3,0.155,4,0.155,5,0.112,8,0.822,9,2.058,11,0.926,12,0.013,14,1.331,15,2.425,16,0.926,18,0.182,19,1.286,20,0.155,21,0.01,22,0.012,23,0.01,338,2.803,339,2.741,340,2.631,343,3.274,945,5.215,1162,5.358,1163,6.151]],["title/classes/MembershipsDto.html",[0,0.291,943,2.895]],["body/classes/MembershipsDto.html",[0,0.436,2,0.77,3,0.151,4,0.151,5,0.109,8,0.803,9,2.029,11,1.07,12,0.013,14,1.539,15,2.482,16,1.07,18,0.179,19,1.255,20,0.151,21,0.01,22,0.011,23,0.01,338,2.869,339,2.676,340,2.568,809,3.208,843,3.783,902,6.601,943,5.141,983,5.958,1164,5.23,1165,6.004,1166,6.004]],["title/classes/NotGroupAdminError.html",[0,0.291,348,1.863]],["body/classes/NotGroupAdminError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.118,349,1.372,350,2.724,351,1.76,352,1.372,353,1.76,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/NotGroupMemberError.html",[0,0.291,350,1.863]],["body/classes/NotGroupMemberError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.059,349,1.372,350,2.827,351,1.76,352,1.372,353,1.76,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/NotInvitedToGroupError.html",[0,0.291,349,1.863]],["body/classes/NotInvitedToGroupError.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.524,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.059,349,1.76,350,2.724,351,1.76,352,1.372,353,1.76,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/Profile.html",[0,0.291,1167,2.252]],["body/classes/Profile.html",[0,0.362,2,0.641,3,0.126,4,0.126,5,0.091,8,0.849,9,1.811,11,1.221,12,0.014,13,1.11,14,1.705,15,2.457,16,1.186,18,0.176,19,1.043,20,0.126,21,0.008,22,0.01,23,0.008,24,2.715,26,1.942,28,4.694,36,4.694,39,5.778,40,4.992,41,4.589,43,4.365,44,3.608,51,4.268,56,3.608,58,4,59,4.63,61,4.268,62,4.268,63,1.474,402,2.136,415,2.609,439,2.062,541,4.694,556,6.082,557,6.082,797,3.232,802,4.589,812,4.992,813,4.992,1046,3.925,1133,3.771,1167,3.571,1168,4.348,1169,6.982,1170,4.992,1171,4.992,1172,4.992,1173,4.992,1174,5.531,1175,4.992,1176,4.992,1177,4.992,1178,4.992,1179,4.992,1180,4.348]],["title/classes/ProfileAlreadyExistsError.html",[0,0.291,1181,2.692]],["body/classes/ProfileAlreadyExistsError.html",[0,0.471,2,0.664,3,0.13,4,0.13,5,0.094,12,0.014,13,0.988,18,0.197,20,0.163,21,0.008,22,0.01,23,0.008,63,1.528,72,1.826,73,1.826,75,1.967,79,1.559,87,1.89,103,0.692,106,3.26,108,1.967,122,1.528,125,1.787,152,1.583,168,1.455,176,1.761,178,2.566,201,2.044,203,1.895,205,1.286,217,1.853,300,2.132,301,1.699,304,1.918,333,1.986,439,2.097,553,4.216,1167,4.467,1181,4.772,1182,4.068,1183,4.695,1184,4.473,1185,3.478,1186,3.073,1187,4.507,1188,4.507,1189,6.184,1190,4.507,1191,6.184,1192,4.507,1193,6.184,1194,4.507,1195,5.658,1196,4.068,1197,4.507,1198,4.507]],["title/controllers/ProfileController.html",[66,1.523,1199,2.895]],["body/controllers/ProfileController.html",[0,0.289,3,0.1,4,0.1,5,0.072,8,0.532,11,1.011,12,0.014,13,0.869,14,1.454,16,1.011,18,0.191,19,0.832,20,0.1,21,0.006,22,0.009,23,0.006,26,2.055,66,1.513,68,1.572,70,2.364,71,2.001,72,2.486,73,2.04,74,2.761,75,2.678,78,4.234,79,1.499,84,2.555,85,1.634,86,2.371,87,2.021,93,4.584,94,3.129,98,3.443,99,3.933,100,2.507,101,2.903,102,3.129,103,0.532,106,2.507,108,1.513,109,4.437,110,3.95,112,4.183,114,2.364,116,2.126,117,2.507,118,2.507,121,2.026,122,1.175,123,3.991,125,1.613,128,4.234,171,3.674,204,1.354,205,1.551,217,1.917,280,4.297,281,2.126,285,3.95,301,1.794,303,2.675,373,1.935,402,1.909,408,1.774,432,1.774,439,2.149,553,4.509,639,3.95,645,3.129,666,4.196,879,3.467,908,3.467,1021,2.876,1105,5.283,1167,4.493,1181,3.674,1183,3.95,1184,4.783,1185,2.675,1186,3.707,1196,3.129,1199,3.95,1200,3.467,1201,3.979,1202,4.761,1203,3.979,1204,3.979,1205,3.979,1206,3.467,1207,3.979,1208,3.979,1209,3.979,1210,3.979,1211,3.979,1212,3.979,1213,3.979,1214,3.467,1215,3.95,1216,3.979,1217,3.979,1218,3.979,1219,3.979,1220,3.979,1221,6.242,1222,3.979,1223,3.467,1224,5.465,1225,3.467,1226,3.979,1227,3.979,1228,3.979]],["title/classes/ProfileDto.html",[0,0.291,1215,2.895]],["body/classes/ProfileDto.html",[0,0.446,2,0.788,3,0.154,4,0.154,5,0.112,8,0.821,9,2.056,11,0.924,12,0.013,14,1.329,16,0.924,18,0.181,19,1.283,20,0.154,21,0.01,22,0.012,23,0.01,26,2.204,541,5.142,1167,4.583,1185,4.127,1215,5.209,1229,5.348,1230,6.139]],["title/modules/ProfileModule.html",[132,1.413,567,2.692]],["body/modules/ProfileModule.html",[0,0.414,3,0.144,4,0.144,5,0.104,12,0.014,18,0.199,20,0.144,21,0.009,22,0.011,23,0.009,68,2.726,103,0.763,132,2.618,134,2.544,135,2.655,136,2.906,137,2.906,138,2.655,139,3.776,140,3.776,145,3.513,146,2.906,147,2.906,151,3.597,152,1.746,159,3.051,567,5.451,1167,3.211,1185,3.838,1186,4.962,1199,5.361,1214,4.973,1231,4.973,1232,4.973,1233,4.973,1234,5.709,1235,5.709,1236,5.709]],["title/injectables/ProfileService.html",[168,0.897,1186,2.379]],["body/injectables/ProfileService.html",[0,0.439,3,0.116,4,0.116,5,0.084,8,0.618,11,1.075,12,0.014,13,1.105,16,1.075,18,0.191,20,0.152,21,0.007,22,0.01,23,0.007,26,2.184,63,1.365,71,2.213,72,2.376,73,2.042,75,2.56,79,1.451,84,2.714,85,1.656,86,2.376,87,2.023,103,0.618,106,2.913,108,1.758,122,1.365,125,1.714,152,1.414,168,1.354,169,2.47,171,4.062,176,2.056,178,2.82,201,1.827,203,1.693,205,1.149,217,1.724,300,1.984,301,1.518,304,1.365,333,1.414,439,2.244,553,4.598,1167,4.353,1181,4.062,1182,3.635,1183,4.368,1184,4.877,1185,3.108,1186,3.589,1187,4.027,1188,5.264,1189,5.864,1190,4.027,1191,5.864,1192,4.027,1193,5.864,1194,4.027,1195,5.264,1196,4.751,1197,4.027,1198,4.027,1237,4.623,1238,4.623,1239,4.623,1240,4.623,1241,4.623,1242,4.623,1243,4.623]],["title/classes/ReferenceFriendDto.html",[0,0.291,584,2.895]],["body/classes/ReferenceFriendDto.html",[0,0.45,2,0.795,3,0.156,4,0.156,5,0.113,8,0.829,9,2.067,11,0.933,12,0.013,13,1.009,14,1.341,15,2.433,16,0.933,18,0.156,19,1.295,20,0.156,21,0.01,22,0.012,23,0.01,32,2.812,584,5.238,1244,6.312,1245,5.399,1246,6.198]],["title/classes/SelfReferenceError.html",[0,0.291,743,2.692]],["body/classes/SelfReferenceError.html",[0,0.264,2,0.295,3,0.058,4,0.058,5,0.042,12,0.014,13,1.071,18,0.163,20,0.092,21,0.004,22,0.006,23,0.004,24,3.273,32,0.842,63,0.679,73,1.789,79,1.497,87,1.852,101,2.389,103,0.307,125,1.867,152,0.703,168,0.815,176,0.783,178,1.784,183,1.808,201,0.908,203,2.367,204,2.67,205,1.861,217,1.945,300,1.837,301,1.686,302,2.281,304,1.075,333,1.113,344,1.384,401,3.171,402,2.354,432,1.025,442,2.013,473,1.932,508,2.293,574,1.449,575,1.808,576,2.861,581,2.861,585,1.808,586,1.808,587,4.038,599,3.701,604,5.497,606,2.293,613,5.527,614,3.347,620,3.834,630,1.229,632,1.808,633,3.701,634,1.808,641,3.452,650,2.631,657,1.662,678,1.808,679,2.293,680,1.808,681,1.546,682,1.808,685,1.808,686,2.003,687,2.003,688,2.003,689,2.003,691,2.003,692,2.003,695,2.003,697,2.003,700,3.265,701,6.666,702,5.939,704,3.762,705,5.431,707,2.003,708,4.673,709,5.083,710,4.474,711,4.474,712,5.431,713,5.781,714,2.446,717,3.17,718,2.003,720,3.17,723,2.003,725,3.935,726,3.935,728,2.003,733,2.003,735,2.003,739,2.003,742,2.446,743,4,744,2.003,745,2.003,746,5.431,747,3.551,748,3.551,749,3.935,750,3.935,751,3.935,752,3.935,753,5.184,754,4.875,755,2.003,756,3.17,757,4.875,758,5.431,759,4.875,760,4.875,761,3.17,762,2.003,763,3.17,764,2.003,765,2.003,766,2.003,767,4.875,768,6.468,769,2.003,770,4.875,771,2.003,772,2.003,773,2.003,774,2.003,775,2.003,776,2.003,777,2.003,778,2.003,779,2.003,780,2.003,781,2.003,782,2.003,783,2.003,784,2.003,785,2.003,786,3.17,787,3.935,788,4.474,789,4.474,790,6.163,791,4.875,792,3.17,793,3.17,794,3.17,795,2.003,796,2.003,797,2.299,798,3.17]],["title/classes/SelfReferenceErrorFilter.html",[0,0.291,590,2.895]],["body/classes/SelfReferenceErrorFilter.html",[0,0.396,2,0.7,3,0.137,4,0.137,5,0.099,8,0.729,11,0.821,12,0.014,16,0.821,18,0.183,20,0.137,21,0.009,22,0.011,23,0.009,26,1.667,71,2.457,79,1.309,84,2.073,85,1.759,86,1.924,101,3.12,103,0.729,205,1.97,281,2.913,302,2.368,303,3.664,304,1.61,322,3.664,323,3.664,324,3.664,330,4.885,590,4.849,631,4.286,641,4.51,743,5.098,1019,5.275,1020,5.714,1021,4.849,1022,5.275,1023,5.714,1024,5.963,1026,5.275,1027,4.286,1028,5.275,1029,3.94,1031,4.286,1032,4.286,1033,4.286,1034,4.286,1036,4.286,1037,4.286,1038,4.286,1039,4.286,1247,5.844,1248,4.749,1249,5.451]],["title/classes/UpdateAccountDto.html",[0,0.291,95,2.692]],["body/classes/UpdateAccountDto.html",[0,0.459,2,0.811,3,0.159,4,0.159,5,0.115,12,0.013,18,0.184,19,1.32,20,0.159,21,0.01,22,0.012,23,0.01,72,2.23,77,3.981,95,4.926,107,4.967,333,1.932,540,4.967,1250,5.504,1251,4.967,1252,6.318]],["title/classes/UpdateEntryDto.html",[0,0.291,1109,2.895]],["body/classes/UpdateEntryDto.html",[0,0.45,2,0.795,3,0.156,4,0.156,5,0.113,8,0.829,9,2.067,11,0.933,12,0.013,14,1.341,15,2.433,16,0.933,18,0.156,19,1.295,20,0.156,21,0.01,22,0.012,23,0.01,506,4.838,1109,5.238,1133,4.304,1136,4.873,1139,5.399,1253,6.312]],["title/classes/UpdateGroupDto.html",[0,0.291,345,1.713]],["body/classes/UpdateGroupDto.html",[0,0.459,2,0.811,3,0.159,4,0.159,5,0.115,12,0.013,18,0.184,19,1.32,20,0.159,21,0.01,22,0.012,23,0.01,72,2.23,333,1.932,345,3.134,346,2.939,548,4.247,550,4.967,1251,4.967,1254,5.504,1255,6.318]],["title/classes/UpdateProfileDto.html",[0,0.291,1184,2.523]],["body/classes/UpdateProfileDto.html",[0,0.459,2,0.811,3,0.159,4,0.159,5,0.115,12,0.013,18,0.184,19,1.32,20,0.159,21,0.01,22,0.012,23,0.01,72,2.23,333,1.932,553,3.753,555,4.967,1183,4.567,1184,4.617,1251,4.967,1256,5.504,1257,6.318]],["title/classes/Wallet.html",[0,0.291,1258,2.523]],["body/classes/Wallet.html",[0,0.366,2,0.648,3,0.127,4,0.127,5,0.092,8,0.675,9,1.824,11,1.203,12,0.014,13,0.89,14,1.683,15,2.464,16,1.171,18,0.177,19,1.055,20,0.127,21,0.008,22,0.01,23,0.008,24,3.155,28,4.717,36,4.717,40,5.8,43,4.382,44,3.647,51,4.297,56,3.647,58,4.028,59,4.421,61,4.297,62,4.297,63,1.49,363,3.288,402,2.146,439,2.073,541,4.297,797,3.756,802,4.621,812,5.026,813,5.026,1043,5.569,1044,4.395,1046,3.967,1133,4.382,1174,6.427,1180,4.395,1258,4.028,1259,4.395,1260,7.017,1261,7.017,1262,5.046,1263,6.393,1264,5.046,1265,6.393,1266,5.046,1267,5.046,1268,5.046,1269,5.046,1270,5.046,1271,5.046]],["title/controllers/WalletController.html",[66,1.523,1272,2.895]],["body/controllers/WalletController.html",[0,0.335,3,0.186,4,0.116,5,0.084,8,0.617,11,1.013,12,0.014,13,0.936,14,1.307,16,0.909,18,0.195,19,0.965,20,0.116,21,0.007,22,0.01,23,0.007,26,1.847,66,1.755,68,1.824,70,2.742,71,2.211,73,1.954,78,3.804,79,1.108,84,2.296,85,1.4,86,2.131,87,1.899,93,4.496,100,2.909,101,2.808,103,0.617,109,4.239,111,4.239,112,3.996,114,2.742,116,2.467,117,2.909,118,2.909,122,1.783,123,3.586,125,1.449,128,3.804,171,4.522,176,1.571,203,2.211,204,1.571,205,1.672,217,1.317,280,4.747,281,2.467,301,1.516,344,1.755,421,2.147,439,2.187,574,4.239,599,2.35,614,2.596,630,3.595,633,2.35,645,3.63,657,4.364,666,4.058,714,3.103,747,3.63,987,3.63,1105,4.747,1202,5.259,1206,4.022,1223,4.022,1225,4.022,1258,4.945,1272,4.364,1273,4.022,1274,4.617,1275,6.037,1276,4.617,1277,4.617,1278,4.617,1279,4.617,1280,4.617,1281,6.037,1282,4.239,1283,4.022,1284,6.037,1285,3.63,1286,4.022,1287,4.617,1288,4.617,1289,4.617,1290,6.037,1291,6.037,1292,6.037,1293,4.617,1294,4.617,1295,4.617]],["title/modules/WalletModule.html",[132,1.413,568,2.692]],["body/modules/WalletModule.html",[0,0.4,3,0.139,4,0.139,5,0.1,12,0.014,18,0.203,20,0.139,21,0.009,22,0.011,23,0.009,68,2.67,103,0.737,132,2.578,134,2.458,135,2.565,136,2.808,137,2.808,138,2.565,139,3.719,140,3.719,145,3.44,146,2.808,147,2.808,151,3.475,152,1.687,159,3.611,236,5.01,240,4.805,568,5.507,630,2.947,1258,3.475,1272,5.281,1282,5.241,1283,4.805,1285,4.337,1286,4.805,1296,4.805,1297,5.516,1298,4.805,1299,4.805,1300,5.516,1301,5.516,1302,5.516]],["title/injectables/WalletService.html",[168,0.897,1282,2.523]],["body/injectables/WalletService.html",[0,0.331,3,0.115,4,0.115,5,0.083,8,0.61,11,1.069,12,0.014,13,1.102,16,1.069,18,0.179,20,0.115,21,0.007,22,0.01,23,0.007,26,2.173,63,1.348,71,2.195,73,2.037,79,1.771,84,2.701,85,1.648,86,2.361,87,2.016,103,0.61,125,1.706,152,1.396,168,1.343,169,2.439,176,2.039,178,2.807,201,1.803,203,1.672,204,2.418,205,1.765,217,1.909,300,1.499,439,2.313,700,5.135,708,4.332,1133,4.498,1258,4.862,1282,3.776,1285,3.589,1303,3.977,1304,5.993,1305,6.69,1306,6.69,1307,4.565,1308,4.565,1309,5.993,1310,5.993,1311,4.565,1312,4.565,1313,7.993,1314,4.565,1315,7.104,1316,7.104,1317,4.565,1318,4.565,1319,5.993,1320,4.565,1321,4.565,1322,4.565,1323,4.565,1324,4.565,1325,5.993,1326,4.565,1327,5.993,1328,4.565]],["title/classes/_BaseGroupException.html",[0,0.291,334,1.785]],["body/classes/_BaseGroupException.html",[0,0.467,2,0.228,3,0.074,4,0.045,5,0.032,12,0.014,13,1.065,18,0.141,20,0.162,21,0.003,22,0.005,23,0.003,32,1.614,63,0.524,72,1.041,73,1.753,74,1.555,75,1.121,79,1.878,85,0.878,87,1.784,103,0.237,108,0.675,122,0.871,125,1.736,152,0.543,168,0.661,176,0.604,178,1.495,200,1.84,201,0.701,203,1.08,204,2.58,205,1.924,217,2.201,300,2.327,301,2.523,302,0.626,304,0.871,331,2.05,332,0.863,333,1.967,334,2.867,335,0.903,336,2.998,337,0.791,338,2.226,339,0.791,340,0.759,341,0.825,342,0.863,343,0.759,344,0.675,345,1.885,346,0.825,347,2.915,348,3.059,349,1.372,350,2.724,351,1.76,352,1.372,353,1.76,354,1.76,355,0.759,356,0.903,357,0.903,358,0.903,359,0.903,360,1.926,361,1.926,362,2.18,363,0.791,364,1.926,365,2.244,366,1.926,367,1.501,368,0.863,369,0.903,370,0.903,371,3.521,372,0.903,373,0.863,374,3.862,375,3.609,376,0.863,377,1.926,378,2.981,379,2.981,380,1.372,381,0.903,382,0.903,383,2.566,384,0.903,385,0.759,386,0.903,387,0.791,388,0.903,389,1.501,390,0.903,391,0.903,392,0.903,393,0.903,394,0.903,395,0.903,396,0.903,397,1.501,398,3.87,399,3.412,400,3.259,401,3.059,402,2.318,403,2.709,404,1.501,405,3.059,406,0.903,407,0.903,408,1.964,409,0.903,410,2.981,411,1.926,412,1.501,413,1.501,414,1.434,415,1.212,416,0.903,417,0.903,418,0.903,419,3.446,420,2.378,421,0.825,422,3.094,423,2.244,424,3.094,425,2.847,426,2.687,427,2.143,428,1.501,429,0.903,430,2.143,431,1.926,432,1.314,433,0.903,434,1.501,435,1.501,436,1.501,437,1.501,438,1.501,439,0.871,440,0.903,441,0.903,442,1.686,443,1.76,444,0.903,445,2.847,446,0.903,447,0.903,448,0.903,449,0.903,450,1.501,451,0.903,452,0.903,453,1.76,454,0.903,455,0.863,456,0.903,457,1.84,458,0.903,459,1.501,460,1.501,461,0.903,462,0.903,463,0.903,464,1.84,465,0.903,466,0.903,467,0.903,468,0.903,469,0.903,470,1.501,471,1.501,472,0.903,473,0.759,474,0.903,475,1.501,476,0.903,477,0.903]],["title/classes/_BaseLeaderboardException.html",[0,0.291,491,2.379]],["body/classes/_BaseLeaderboardException.html",[0,0.515,2,0.584,3,0.115,4,0.115,5,0.083,12,0.014,13,1.026,18,0.179,20,0.179,21,0.01,22,0.01,23,0.007,73,1.539,79,1.436,87,1.592,103,0.609,121,2.317,122,1.344,125,1.436,168,1.34,205,1.916,217,1.906,300,2.33,301,1.964,304,1.767,333,2.17,385,1.947,402,1.83,415,2.745,439,2.338,489,3.769,490,3.06,491,4.215,492,4.83,493,2.868,494,2.704,495,3.196,496,4.021,497,2.868,498,2.56,499,3.06,500,3.769,501,2.432,502,3.06,503,4.955,504,4.491,505,4.83,506,4.767,507,4.491,508,2.868,509,3.29,510,3.29,511,4.471,512,4.021,513,3.29,514,3.29,515,3.29,516,3.06,517,2.868,518,2.868,519,5.129,520,4.021,521,4.83,522,4.83,523,4.324,524,3.29,525,3.29,526,3.29,527,3.29,528,3.29,529,4.324,530,3.29,531,3.29,532,3.29,533,3.769,534,3.29,535,4.324,536,3.29,537,3.29,538,3.29]],["title/coverage.html",[1329,4.782]],["body/coverage.html",[0,0.613,1,2.561,5,0.064,6,3.086,7,3.086,11,0.533,12,0.014,21,0.006,22,0.008,23,0.006,24,1.515,25,3.086,66,2.804,67,2.561,69,3.086,77,2.232,79,0.85,95,2.381,104,2.104,116,1.893,138,1.648,144,2.381,149,2.561,168,1.681,170,3.086,225,2.561,226,3.086,229,2.232,251,3.086,255,3.961,262,2.561,288,4.389,317,3.086,319,2.232,320,3.961,321,3.961,325,2.561,331,1.648,332,3.742,334,1.579,336,1.297,338,1.297,345,1.515,347,1.648,348,1.648,349,1.648,350,1.648,351,1.648,352,1.648,353,1.648,354,1.648,355,1.515,489,2.232,490,4.293,491,2.104,495,1.893,498,1.992,500,2.232,501,1.893,520,5.725,539,3.086,540,3.961,548,2.381,549,3.086,550,3.961,553,2.104,554,3.086,555,3.961,572,2.561,573,3.086,584,2.561,590,2.561,599,2.565,606,2.232,614,2.833,620,1.992,630,1.893,633,2.565,635,2.561,641,2.381,679,2.232,681,2.381,685,3.961,743,2.381,799,3.086,816,3.086,817,3.086,834,3.961,835,3.086,837,3.086,849,3.086,859,2.561,860,3.086,936,2.561,938,2.561,940,2.561,943,2.561,945,2.561,1015,3.086,1017,3.086,1018,3.961,1040,3.086,1041,3.086,1060,3.086,1063,3.086,1064,3.086,1067,3.086,1086,2.561,1087,3.086,1109,2.561,1114,2.561,1130,3.961,1131,3.086,1136,3.961,1140,3.086,1162,3.086,1164,3.086,1167,1.992,1168,3.086,1181,2.381,1182,3.961,1184,2.232,1186,2.104,1199,2.561,1200,3.086,1215,2.561,1229,3.086,1244,3.086,1245,3.086,1247,3.086,1248,3.086,1250,3.086,1253,3.086,1254,3.086,1256,3.086,1258,2.232,1259,3.086,1272,2.561,1273,3.086,1282,2.232,1303,3.086,1329,3.086,1330,3.086,1331,3.542,1332,3.542,1333,7.839,1334,7.214,1335,7.214,1336,8.153,1337,5.863,1338,3.542,1339,3.542,1340,3.086,1341,5.863,1342,3.542,1343,5.038,1344,5.038,1345,3.542,1346,3.542,1347,3.542,1348,3.542,1349,3.542,1350,3.542,1351,3.542,1352,3.542,1353,3.086,1354,3.542,1355,3.542]],["title/dependencies.html",[135,2.243,1356,3.333]],["body/dependencies.html",[12,0.014,19,1.246,21,0.01,22,0.011,23,0.01,35,5.192,63,1.76,103,0.797,135,2.772,152,1.823,155,4.308,157,4.686,493,3.755,494,3.54,1029,5.118,1075,6.168,1076,4.686,1357,7.554,1358,5.96,1359,5.96,1360,7.081,1361,5.96,1362,5.96,1363,5.96,1364,5.96,1365,5.96,1366,5.96,1367,5.96,1368,5.96,1369,5.96,1370,5.96,1371,5.96,1372,5.96,1373,5.96,1374,5.192,1375,5.192,1376,5.96,1377,5.96]],["title/miscellaneous/enumerations.html",[1378,2.409,1379,4.202]],["body/miscellaneous/enumerations.html",[8,0.753,12,0.013,21,0.009,22,0.011,23,0.009,338,2.062,341,3.183,343,2.926,403,2.509,405,2.619,420,2.737,427,2.737,574,4.311,599,3.904,614,3.848,633,3.904,704,4.6,710,4.6,714,4.6,838,5.961,839,5.961,842,6.579,1378,4.07,1379,4.904,1380,6.843,1381,7.99,1382,5.63,1383,6.843,1384,6.843,1385,6.843,1386,6.843,1387,6.843,1388,6.843,1389,6.843,1390,5.63,1391,5.63,1392,5.63,1393,5.63]],["title/miscellaneous/functions.html",[1378,2.409,1394,4.202]],["body/miscellaneous/functions.html",[8,0.846,12,0.013,13,0.881,21,0.01,22,0.012,23,0.01,24,3.137,26,1.936,84,2.407,85,1.468,86,2.234,138,3.603,255,4.977,284,5.514,289,5.514,1340,6.39,1353,5.514,1378,4.576,1394,5.514,1395,6.33,1396,6.33]],["title/index.html",[8,0.446,1397,2.904,1398,2.904]],["body/index.html",[5,0.104,12,0.013,21,0.009,22,0.011,23,0.009,134,2.549,162,4.982,243,6.018,494,4.103,504,3.844,700,4.134,797,2.912,1076,4.497,1330,6.716,1374,4.982,1375,4.982,1397,4.982,1398,4.982,1399,5.719,1400,5.719,1401,6.908,1402,5.719,1403,5.719,1404,5.719,1405,7.709,1406,5.719,1407,5.719,1408,5.719,1409,5.719,1410,6.908,1411,5.719,1412,5.719,1413,5.719,1414,5.719,1415,5.719,1416,5.719,1417,5.719,1418,5.719,1419,5.719,1420,5.719,1421,5.719,1422,5.719,1423,5.719,1424,7.422,1425,5.719,1426,5.719,1427,5.719,1428,5.719,1429,5.719,1430,5.719,1431,6.908,1432,5.719,1433,5.719,1434,5.719,1435,6.908,1436,5.719,1437,5.719,1438,5.719,1439,5.719,1440,5.719,1441,5.719,1442,5.719,1443,5.719,1444,5.719]],["title/modules.html",[134,2.446]],["body/modules.html",[12,0.011,21,0.01,22,0.011,23,0.01,133,4.073,134,2.701,232,4.38,236,3.818,237,4.073,481,4.073,482,4.073,483,4.073,567,4.073,568,4.073,1445,8.315,1446,8.315,1447,8.315,1448,8.315]],["title/overview.html",[1449,4.782]],["body/overview.html",[2,0.598,12,0.014,21,0.007,22,0.01,23,0.007,68,1.84,104,4.606,132,1.643,133,5.465,134,2.075,135,2.166,136,2.37,137,2.37,138,2.166,139,2.37,140,2.37,141,4.056,142,4.056,143,4.056,144,4.541,145,3.091,146,2.37,147,2.37,169,2.488,229,4.256,232,5.684,233,4.056,234,4.056,235,4.056,236,5.211,237,5.212,355,3.316,478,4.056,479,4.056,480,4.056,481,5.392,482,5.392,483,5.392,501,4.143,565,4.056,566,4.056,567,5.118,568,5.286,630,4.143,674,4.056,675,4.056,676,4.056,1054,4.056,1055,4.056,1056,4.056,1142,4.056,1143,4.056,1144,4.056,1186,4.606,1231,4.056,1232,4.056,1233,4.056,1282,4.886,1296,4.056,1298,4.056,1299,4.056,1449,4.056,1450,6.071,1451,4.656,1452,4.656]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":520,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1369,"title":{},"body":{"dependencies.html":{}}}],["0.2.30",{"_index":1377,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1364,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1336,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1342,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":1348,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1333,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1335,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1337,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1334,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1343,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1341,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1344,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1345,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":415,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["1.2.8",{"_index":1363,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":1263,"title":{},"body":{"classes/Wallet.html":{}}}],["12/14",{"_index":1347,"title":{},"body":{"coverage.html":{}}}],["12/16",{"_index":1350,"title":{},"body":{"coverage.html":{}}}],["2/5",{"_index":1352,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":653,"title":{},"body":{"controllers/FriendController.html":{}}}],["200})@apibearerauth()@useguards(jwtauthguard)@get(':aid",{"_index":607,"title":{},"body":{"controllers/FriendController.html":{}}}],["2h",{"_index":167,"title":{},"body":{"modules/AccountModule.html":{}}}],["3",{"_index":560,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["3.0.2",{"_index":1371,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1365,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1376,"title":{},"body":{"dependencies.html":{}}}],["4.7.12",{"_index":1362,"title":{},"body":{"dependencies.html":{}}}],["40",{"_index":1351,"title":{},"body":{"coverage.html":{}}}],["46",{"_index":1452,"title":{},"body":{"overview.html":{}}}],["50",{"_index":1265,"title":{},"body":{"classes/Wallet.html":{}}}],["6.6.3",{"_index":1373,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1360,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1359,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":1357,"title":{},"body":{"dependencies.html":{}}}],["7/9",{"_index":1339,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1349,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":1338,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":1451,"title":{},"body":{"overview.html":{}}}],["8.5.1",{"_index":1367,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":1346,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1450,"title":{},"body":{"overview.html":{}}}],["_acceptfriendrequest",{"_index":686,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_acceptfriendrequest(aid",{"_index":698,"title":{},"body":{"injectables/FriendService.html":{}}}],["_basegroupexception",{"_index":334,"title":{"classes/_BaseGroupException.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["_baseleaderboardexception",{"_index":491,"title":{"classes/_BaseLeaderboardException.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["_derivetwowayrelationstatus",{"_index":688,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_derivetwowayrelationstatus(normalrelationstatus",{"_index":703,"title":{},"body":{"injectables/FriendService.html":{}}}],["_generatejwt",{"_index":1340,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["_generatejwt(jwtservice",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{}}}],["_generatejwt(this.jwtservice",{"_index":307,"title":{},"body":{"controllers/AuthController.html":{}}}],["_getnormalandinverse",{"_index":689,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_getnormalandinverse(aid",{"_index":715,"title":{},"body":{"injectables/FriendService.html":{}}}],["_removerelations",{"_index":690,"title":{},"body":{"injectables/FriendService.html":{}}}],["_removerelations(aid",{"_index":718,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_sendfriendrequest",{"_index":691,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_sendfriendrequest(aid",{"_index":721,"title":{},"body":{"injectables/FriendService.html":{}}}],["_setrelations",{"_index":692,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_setrelations(aid",{"_index":724,"title":{},"body":{"injectables/FriendService.html":{}}}],["accept",{"_index":586,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["accessed",{"_index":1429,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":10,"title":{},"body":{"classes/AccessTokenDto.html":{},"controllers/AuthController.html":{}}}],["accesstokendto",{"_index":1,"title":{"classes/AccessTokenDto.html":{}},"body":{"classes/AccessTokenDto.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["accesstokendto})@apibadrequestresponse()@post('apple')@httpcode(httpstatus.ok",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["accesstokendto})@apibadrequestresponse()@post('device')@httpcode(httpstatus.ok",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{}}}],["accesstokendto})@apibadrequestresponse()@post('facebook')@httpcode(httpstatus.ok",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{}}}],["accesstokendto})@apibadrequestresponse()@post('google')@httpcode(httpstatus.ok",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["account",{"_index":24,"title":{"classes/Account.html":{}},"body":{"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["account'})@apicreatedresponse({type",{"_index":81,"title":{},"body":{"controllers/AccountController.html":{}}}],["account.appleid",{"_index":208,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.controller",{"_index":150,"title":{},"body":{"modules/AccountModule.html":{}}}],["account.deviceid",{"_index":206,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.dto",{"_index":107,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/UpdateAccountDto.html":{}}}],["account.dto.ts",{"_index":540,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["account.dto.ts:11",{"_index":545,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:14",{"_index":544,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:17",{"_index":547,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:20",{"_index":546,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:5",{"_index":543,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:8",{"_index":542,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.googleid",{"_index":210,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.id",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["account.language",{"_index":214,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.location",{"_index":212,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.service",{"_index":105,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"controllers/AuthController.html":{}}}],["account/account.module",{"_index":485,"title":{},"body":{"modules/CoreModule.html":{}}}],["account/entities/account.entity",{"_index":814,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{}}}],["accountcontroller",{"_index":67,"title":{"controllers/AccountController.html":{}},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"coverage.html":{}}}],["accountmodule",{"_index":133,"title":{"modules/AccountModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["accountrepository",{"_index":180,"title":{},"body":{"injectables/AccountService.html":{}}}],["accountservice",{"_index":104,"title":{"injectables/AccountService.html":{}},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"coverage.html":{},"overview.html":{}}}],["account})@apibearerauth()@useguards(jwtauthguard)@get",{"_index":91,"title":{},"body":{"controllers/AccountController.html":{}}}],["account})@apibearerauth()@useguards(jwtauthguard)@patch",{"_index":96,"title":{},"body":{"controllers/AccountController.html":{}}}],["account})@post",{"_index":82,"title":{},"body":{"controllers/AccountController.html":{}}}],["acting",{"_index":401,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["actinggroupmember",{"_index":422,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["actinggroupmember.membershipstatus",{"_index":423,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["actinggroupmember?.membershipstatus",{"_index":445,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["actinguserid",{"_index":398,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["action",{"_index":793,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["add",{"_index":575,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["add(aid",{"_index":729,"title":{},"body":{"injectables/FriendService.html":{}}}],["add(req",{"_index":582,"title":{},"body":{"controllers/FriendController.html":{}}}],["addfrienddto",{"_index":583,"title":{},"body":{"controllers/FriendController.html":{}}}],["addfrienddto.id",{"_index":663,"title":{},"body":{"controllers/FriendController.html":{}}}],["admin",{"_index":405,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["admin'})@apiparam({name",{"_index":926,"title":{},"body":{"controllers/GroupController.html":{}}}],["admincount",{"_index":412,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["admins",{"_index":417,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["aid",{"_index":604,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["already",{"_index":432,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["alternatively",{"_index":1401,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1315,"title":{},"body":{"injectables/WalletService.html":{}}}],["api",{"_index":1431,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{}}}],["apibearerauth",{"_index":109,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["apicreatedresponse",{"_index":110,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["apiforbiddenresponse",{"_index":1284,"title":{},"body":{"controllers/WalletController.html":{}}}],["apinocontentresponse",{"_index":947,"title":{},"body":{"controllers/GroupController.html":{}}}],["apiokresponse",{"_index":111,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/WalletController.html":{}}}],["apiokresponse({type",{"_index":1275,"title":{},"body":{"controllers/WalletController.html":{}}}],["apioperation",{"_index":112,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["apioperation({description",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation({summary",{"_index":78,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["apiparam",{"_index":639,"title":{},"body":{"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{}}}],["apiproperty",{"_index":15,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"classes/ReferenceFriendDto.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{}}}],["apiproperty()@column({default",{"_index":852,"title":{},"body":{"classes/Group.html":{}}}],["apiproperty()@column({type",{"_index":51,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty()@createdatecolumn",{"_index":44,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty()@index({unique",{"_index":37,"title":{},"body":{"classes/Account.html":{}}}],["apiproperty()@manytoone(undefined",{"_index":1048,"title":{},"body":{"classes/GroupMember.html":{}}}],["apiproperty()@primarycolumn",{"_index":1046,"title":{},"body":{"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty()@primarygeneratedcolumn('uuid",{"_index":49,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{}}}],["apiproperty()@updatedatecolumn",{"_index":56,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty({minlength",{"_index":559,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["apiproperty({type",{"_index":843,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/MembershipsDto.html":{}}}],["apipropertyoptional",{"_index":541,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateProfileDto.html":{},"classes/Profile.html":{},"classes/ProfileDto.html":{},"classes/Wallet.html":{}}}],["apipropertyoptional()@column({type",{"_index":1170,"title":{},"body":{"classes/Profile.html":{}}}],["apipropertyoptional()@onetoone(undefined",{"_index":1268,"title":{},"body":{"classes/Wallet.html":{}}}],["apipropertyoptional()@onetoone(undefined)@joincolumn",{"_index":1177,"title":{},"body":{"classes/Profile.html":{}}}],["apiquery",{"_index":1113,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["apiresponse",{"_index":113,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{}}}],["apitags",{"_index":114,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["apitags('account",{"_index":119,"title":{},"body":{"controllers/AccountController.html":{}}}],["apitags('auth",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('friends",{"_index":643,"title":{},"body":{"controllers/FriendController.html":{}}}],["apitags('groups",{"_index":950,"title":{},"body":{"controllers/GroupController.html":{}}}],["apitags('leaderboards",{"_index":1116,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["apitags('profiles",{"_index":1217,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags('wallets",{"_index":1288,"title":{},"body":{"controllers/WalletController.html":{}}}],["app.controller",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":230,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":225,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apple",{"_index":188,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["appleid",{"_index":27,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{}}}],["appleid'})@apiokresponse({type",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":232,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":229,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":1024,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["array",{"_index":534,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["assign",{"_index":461,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["async",{"_index":73,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["attached",{"_index":1084,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":153,"title":{},"body":{"modules/AccountModule.html":{}}}],["auth.guard",{"_index":118,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["auth.guard.ts",{"_index":1064,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["authcontroller",{"_index":149,"title":{"controllers/AuthController.html":{}},"body":{"modules/AccountModule.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["authdto",{"_index":262,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{},"coverage.html":{}}}],["authenticate",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["authentication",{"_index":305,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":1065,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1066,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authwithappleid",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithappleid(@body",{"_index":312,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithappleid(authdto",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithdeviceid",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithdeviceid(@body",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithdeviceid(authdto",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithfacebookid",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithfacebookid(@body",{"_index":315,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithfacebookid(authdto",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithgoogleid",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithgoogleid(@body",{"_index":309,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithgoogleid(authdto",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{}}}],["available",{"_index":1440,"title":{},"body":{"index.html":{}}}],["avatarurl",{"_index":556,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/Profile.html":{}}}],["await",{"_index":217,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["b",{"_index":713,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/SelfReferenceError.html":{}}}],["badrequestdto",{"_index":319,"title":{"classes/BadRequestDto.html":{}},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"coverage.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@delete(':groupid')@httpcode(httpstatus.no_content",{"_index":886,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@delete(':groupid/members/:userid')@httpcode(httpstatus.no_content",{"_index":930,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@delete(':groupid/members/me')@httpcode(httpstatus.no_content",{"_index":923,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get",{"_index":891,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get(':groupid",{"_index":896,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get(':groupid/members",{"_index":912,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get(':groupid/members/:userid",{"_index":899,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get('memberships/:userid",{"_index":909,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get('memberships/me",{"_index":905,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@patch(':groupid",{"_index":932,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post",{"_index":882,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post(':groupid/members/:userid",{"_index":916,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post(':groupid/members/:userid/ban",{"_index":877,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post(':groupid/members/me",{"_index":920,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apiparam({name",{"_index":1094,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["ban",{"_index":464,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["banfromgroup",{"_index":861,"title":{},"body":{"controllers/GroupController.html":{}}}],["banfromgroup(req",{"_index":872,"title":{},"body":{"controllers/GroupController.html":{}}}],["banned",{"_index":427,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["bannedfromgrouperror",{"_index":331,"title":{"classes/BannedFromGroupError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["between",{"_index":720,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["bid",{"_index":613,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["block",{"_index":576,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["block(aid",{"_index":731,"title":{},"body":{"injectables/FriendService.html":{}}}],["block(req",{"_index":592,"title":{},"body":{"controllers/FriendController.html":{}}}],["blocked",{"_index":791,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["blockedbyother",{"_index":838,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{},"miscellaneous/enumerations.html":{}}}],["blockedbyyou",{"_index":839,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{},"miscellaneous/enumerations.html":{}}}],["blockfrienddto",{"_index":593,"title":{},"body":{"controllers/FriendController.html":{}}}],["blockfrienddto.id",{"_index":670,"title":{},"body":{"controllers/FriendController.html":{}}}],["blocks",{"_index":792,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["body",{"_index":99,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{}}}],["boolean",{"_index":387,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CreateGroupDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["bootstrap",{"_index":138,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":717,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["break",{"_index":770,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["browse",{"_index":1448,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1445,"title":{},"body":{"modules.html":{}}}],["cancel",{"_index":621,"title":{},"body":{"controllers/FriendController.html":{}}}],["cannotbanerror",{"_index":353,"title":{"classes/CannotBanError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["cannotdeletegrouperror",{"_index":351,"title":{"classes/CannotDeleteGroupError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["cannotkickerror",{"_index":354,"title":{"classes/CannotKickError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["cannotleavegrouperror",{"_index":352,"title":{"classes/CannotLeaveGroupError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["cascade",{"_index":1044,"title":{},"body":{"classes/GroupMember.html":{},"classes/Wallet.html":{}}}],["cascade'})@joincolumn",{"_index":1269,"title":{},"body":{"classes/Wallet.html":{}}}],["case",{"_index":768,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["catch",{"_index":1021,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["catch(_basegroupexception",{"_index":1030,"title":{},"body":{"classes/GroupExceptionFilter.html":{}}}],["catch(_baseleaderboardexception",{"_index":1141,"title":{},"body":{"classes/LeaderboardExceptionFilter.html":{}}}],["catch(exception",{"_index":1022,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["caterva",{"_index":1399,"title":{},"body":{"index.html":{}}}],["cause",{"_index":395,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["check",{"_index":421,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Friendship.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/WalletController.html":{},"classes/_BaseGroupException.html":{}}}],["check(`\"aid",{"_index":815,"title":{},"body":{"classes/Friendship.html":{}}}],["class",{"_index":0,"title":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"classes/ProfileDto.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"classes/ProfileDto.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"overview.html":{}}}],["client",{"_index":504,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"index.html":{}}}],["client.zadd(leaderboardid",{"_index":536,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["client.zrevrange",{"_index":530,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["client.zrevrank(leaderboardid",{"_index":510,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["client.zscore(leaderboardid",{"_index":509,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["clone",{"_index":1422,"title":{},"body":{"index.html":{}}}],["cluster_accountmodule",{"_index":141,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_accountmodule_exports",{"_index":142,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_accountmodule_providers",{"_index":143,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":233,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":478,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":480,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_imports",{"_index":479,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_extensionsmodule",{"_index":565,"title":{},"body":{"modules/ExtensionsModule.html":{},"overview.html":{}}}],["cluster_extensionsmodule_imports",{"_index":566,"title":{},"body":{"modules/ExtensionsModule.html":{},"overview.html":{}}}],["cluster_friendmodule",{"_index":674,"title":{},"body":{"modules/FriendModule.html":{},"overview.html":{}}}],["cluster_friendmodule_exports",{"_index":675,"title":{},"body":{"modules/FriendModule.html":{},"overview.html":{}}}],["cluster_friendmodule_providers",{"_index":676,"title":{},"body":{"modules/FriendModule.html":{},"overview.html":{}}}],["cluster_groupmodule",{"_index":1054,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_exports",{"_index":1056,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_providers",{"_index":1055,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_leaderboardmodule",{"_index":1142,"title":{},"body":{"modules/LeaderboardModule.html":{},"overview.html":{}}}],["cluster_leaderboardmodule_exports",{"_index":1144,"title":{},"body":{"modules/LeaderboardModule.html":{},"overview.html":{}}}],["cluster_leaderboardmodule_providers",{"_index":1143,"title":{},"body":{"modules/LeaderboardModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":1231,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":1232,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":1233,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_walletmodule",{"_index":1296,"title":{},"body":{"modules/WalletModule.html":{},"overview.html":{}}}],["cluster_walletmodule_exports",{"_index":1298,"title":{},"body":{"modules/WalletModule.html":{},"overview.html":{}}}],["cluster_walletmodule_imports",{"_index":1297,"title":{},"body":{"modules/WalletModule.html":{}}}],["cluster_walletmodule_providers",{"_index":1299,"title":{},"body":{"modules/WalletModule.html":{},"overview.html":{}}}],["column",{"_index":59,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["column({type",{"_index":807,"title":{},"body":{"classes/Friendship.html":{}}}],["common/dto/bad",{"_index":948,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["common/guard/jwt",{"_index":117,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["complete",{"_index":755,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["compose",{"_index":1407,"title":{},"body":{"index.html":{}}}],["composite",{"_index":681,"title":{},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"coverage.html":{}}}],["conditions",{"_index":390,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["connections",{"_index":1414,"title":{},"body":{"index.html":{}}}],["const",{"_index":205,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["construct",{"_index":532,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["constructor",{"_index":176,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["constructor(accountrepository",{"_index":177,"title":{},"body":{"injectables/AccountService.html":{}}}],["constructor(friendshiprepository",{"_index":694,"title":{},"body":{"injectables/FriendService.html":{}}}],["constructor(private",{"_index":121,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AppController.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"controllers/ProfileController.html":{},"classes/_BaseLeaderboardException.html":{}}}],["constructor(profilerepository",{"_index":1237,"title":{},"body":{"injectables/ProfileService.html":{}}}],["constructor(redisservice",{"_index":1153,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["constructor(walletrepository",{"_index":1307,"title":{},"body":{"injectables/WalletService.html":{}}}],["controller",{"_index":66,"title":{"controllers/AccountController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}},"body":{"controllers/AccountController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{},"coverage.html":{}}}],["controller('account",{"_index":120,"title":{},"body":{"controllers/AccountController.html":{}}}],["controller('auth",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('friends",{"_index":644,"title":{},"body":{"controllers/FriendController.html":{}}}],["controller('groups",{"_index":951,"title":{},"body":{"controllers/GroupController.html":{}}}],["controller('leaderboards",{"_index":1117,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["controller('profiles",{"_index":1218,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('wallets",{"_index":1289,"title":{},"body":{"controllers/WalletController.html":{}}}],["controllers",{"_index":68,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["core/account/entities/account.entity",{"_index":1180,"title":{},"body":{"classes/Profile.html":{},"classes/Wallet.html":{}}}],["core/core.module",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/WalletModule.html":{}}}],["core/friend/enums/friendship",{"_index":1287,"title":{},"body":{"controllers/WalletController.html":{}}}],["core/friend/friend.service",{"_index":1286,"title":{},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{}}}],["coremodule",{"_index":236,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/WalletModule.html":{},"modules.html":{},"overview.html":{}}}],["couldnotupdateleaderboardentryerror",{"_index":489,"title":{"classes/CouldNotUpdateLeaderboardEntryError.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["count",{"_index":983,"title":{},"body":{"controllers/GroupController.html":{},"classes/GroupsDto.html":{},"classes/MembershipsDto.html":{}}}],["coverage",{"_index":1329,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":72,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/_BaseGroupException.html":{}}}],["create(@body",{"_index":124,"title":{},"body":{"controllers/AccountController.html":{}}}],["create(createaccountdto",{"_index":76,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{}}}],["create(req",{"_index":879,"title":{},"body":{"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["create(userid",{"_index":1239,"title":{},"body":{"injectables/ProfileService.html":{}}}],["createaccountdto",{"_index":77,"title":{"classes/CreateAccountDto.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["createaccountdto.appleid",{"_index":209,"title":{},"body":{"injectables/AccountService.html":{}}}],["createaccountdto.deviceid",{"_index":207,"title":{},"body":{"injectables/AccountService.html":{}}}],["createaccountdto.googleid",{"_index":211,"title":{},"body":{"injectables/AccountService.html":{}}}],["createaccountdto.language",{"_index":215,"title":{},"body":{"injectables/AccountService.html":{}}}],["createaccountdto.location",{"_index":213,"title":{},"body":{"injectables/AccountService.html":{}}}],["createdat",{"_index":28,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["createdatecolumn",{"_index":61,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["creategroupdto",{"_index":548,"title":{"classes/CreateGroupDto.html":{}},"body":{"classes/CreateGroupDto.html":{},"controllers/GroupController.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["creategroupdto.inviteonly",{"_index":957,"title":{},"body":{"controllers/GroupController.html":{}}}],["creategroupdto.name",{"_index":956,"title":{},"body":{"controllers/GroupController.html":{}}}],["creategroupdto})@apibadrequestresponse({type",{"_index":881,"title":{},"body":{"controllers/GroupController.html":{}}}],["createprofiledto",{"_index":553,"title":{"classes/CreateProfileDto.html":{}},"body":{"classes/CreateProfileDto.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["createprofiledto.displayname",{"_index":1192,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["createprofiledto?.avatarurl",{"_index":1194,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["creatorid",{"_index":360,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["ctx",{"_index":1031,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["ctx.getrequest",{"_index":1034,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["ctx.getresponse",{"_index":1033,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["currency",{"_index":1316,"title":{},"body":{"injectables/WalletService.html":{}}}],["current",{"_index":1105,"title":{},"body":{"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["currentadmincount",{"_index":459,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["currentfinalstatus",{"_index":790,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["d",{"_index":1409,"title":{},"body":{"index.html":{}}}],["database_url",{"_index":1417,"title":{},"body":{"index.html":{}}}],["date",{"_index":43,"title":{},"body":{"classes/Account.html":{},"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["date().toisostring",{"_index":1038,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["declarations",{"_index":137,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"classes/ReferenceFriendDto.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{}}}],["default",{"_index":797,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"controllers/LeaderboardController.html":{},"classes/Profile.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"index.html":{}}}],["defined",{"_index":16,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{}}}],["delete",{"_index":408,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/_BaseGroupException.html":{}}}],["delete(':groupid",{"_index":974,"title":{},"body":{"controllers/GroupController.html":{}}}],["delete(':groupid/members/:userid",{"_index":1008,"title":{},"body":{"controllers/GroupController.html":{}}}],["delete(':groupid/members/me",{"_index":1004,"title":{},"body":{"controllers/GroupController.html":{}}}],["delete('me",{"_index":664,"title":{},"body":{"controllers/FriendController.html":{}}}],["delete(@request",{"_index":976,"title":{},"body":{"controllers/GroupController.html":{}}}],["delete(groupid",{"_index":409,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["delete(req",{"_index":884,"title":{},"body":{"controllers/GroupController.html":{}}}],["dependencies",{"_index":135,"title":{"dependencies.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"dependencies.html":{},"overview.html":{}}}],["derive",{"_index":707,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["derives",{"_index":89,"title":{},"body":{"controllers/AccountController.html":{}}}],["description",{"_index":80,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"injectables/FriendService.html":{}}}],["development",{"_index":1404,"title":{},"body":{"index.html":{}}}],["device",{"_index":191,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["deviceid",{"_index":29,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{}}}],["deviceid'})@apiokresponse({type",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["didblock",{"_index":1386,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directory",{"_index":1441,"title":{},"body":{"index.html":{}}}],["discard",{"_index":739,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["discarded",{"_index":391,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["displayname",{"_index":557,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/Profile.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["docker",{"_index":1406,"title":{},"body":{"index.html":{}}}],["document",{"_index":1444,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1330,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["downloaded",{"_index":1434,"title":{},"body":{"index.html":{}}}],["dsn",{"_index":1418,"title":{},"body":{"index.html":{}}}],["dto",{"_index":650,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/SelfReferenceError.html":{}}}],["dto.blockedbyother.push(id",{"_index":774,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.blockedbyyou.push(id",{"_index":773,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.count",{"_index":962,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto.friends.push(id",{"_index":772,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.group",{"_index":954,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto.groups",{"_index":961,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto.receivedrequests.push(id",{"_index":771,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.sentrequests.push(id",{"_index":769,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.status",{"_index":651,"title":{},"body":{"controllers/FriendController.html":{}}}],["dto/access",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/auth.dto",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":106,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/GroupController.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["dto/friendship",{"_index":632,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto/group.dto",{"_index":937,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/groups.dto",{"_index":939,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/leaderboard",{"_index":496,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["dto/membership.dto",{"_index":946,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/memberships.dto",{"_index":944,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/profile.dto",{"_index":1216,"title":{},"body":{"controllers/ProfileController.html":{}}}],["dto/reference",{"_index":637,"title":{},"body":{"controllers/FriendController.html":{}}}],["dto/update",{"_index":108,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/_BaseGroupException.html":{}}}],["e",{"_index":1221,"title":{},"body":{"controllers/ProfileController.html":{}}}],["entities",{"_index":247,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/account.entity",{"_index":115,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["entities/friendship",{"_index":680,"title":{},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["entities/friendship.entity",{"_index":678,"title":{},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["entities/group",{"_index":339,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"modules/GroupModule.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["entities/group.entity",{"_index":337,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["entities/profile.entity",{"_index":1185,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["entities/wallet.entity",{"_index":1285,"title":{},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{}}}],["entity",{"_index":58,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["entries",{"_index":533,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["entries'})@apiokresponse({type",{"_index":1092,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["entries.dto",{"_index":499,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["entries.dto.ts",{"_index":1131,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{},"coverage.html":{}}}],["entries.dto.ts:12",{"_index":1132,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{}}}],["entries.dto.ts:6",{"_index":1135,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{}}}],["entries.dto.ts:9",{"_index":1134,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{}}}],["entry",{"_index":512,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["entry.dto",{"_index":497,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["entry.dto.ts",{"_index":1136,"title":{},"body":{"classes/LeaderboardEntryDto.html":{},"classes/UpdateEntryDto.html":{},"coverage.html":{}}}],["entry.dto.ts:11",{"_index":1137,"title":{},"body":{"classes/LeaderboardEntryDto.html":{}}}],["entry.dto.ts:5",{"_index":1139,"title":{},"body":{"classes/LeaderboardEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["entry.dto.ts:8",{"_index":1138,"title":{},"body":{"classes/LeaderboardEntryDto.html":{}}}],["enum",{"_index":808,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{}}}],["enumerations",{"_index":1379,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/friendship",{"_index":742,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/SelfReferenceError.html":{}}}],["enums/group",{"_index":342,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["environment",{"_index":1412,"title":{},"body":{"index.html":{}}}],["error",{"_index":304,"title":{},"body":{"controllers/AuthController.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/ErrorDto.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["error.filter",{"_index":642,"title":{},"body":{"controllers/FriendController.html":{}}}],["error.filter.ts",{"_index":1248,"title":{},"body":{"classes/SelfReferenceErrorFilter.html":{},"coverage.html":{}}}],["error.filter.ts:6",{"_index":1249,"title":{},"body":{"classes/SelfReferenceErrorFilter.html":{}}}],["errordto",{"_index":325,"title":{"classes/ErrorDto.html":{}},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"coverage.html":{}}}],["errors",{"_index":396,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["exception",{"_index":1026,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["exception.filter",{"_index":942,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["exception.filter.ts",{"_index":1018,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"coverage.html":{}}}],["exception.filter.ts:12",{"_index":1025,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{}}}],["exception.message",{"_index":1036,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["exception.name",{"_index":1035,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{}}}],["exceptionfilter",{"_index":1020,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["exist",{"_index":379,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["existing",{"_index":200,"title":{},"body":{"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["exists",{"_index":373,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/_BaseGroupException.html":{}}}],["expiresin",{"_index":166,"title":{},"body":{"modules/AccountModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["exports",{"_index":140,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["express",{"_index":1029,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{},"dependencies.html":{}}}],["expression",{"_index":826,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["extends",{"_index":333,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["extensions/extensions.module",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["extensionsmodule",{"_index":237,"title":{"modules/ExtensionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExtensionsModule.html":{},"modules.html":{},"overview.html":{}}}],["extractjwt",{"_index":1073,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1080,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":194,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["facebookid",{"_index":30,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{}}}],["facebookid'})@apiokresponse({type",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["failed",{"_index":306,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":363,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Wallet.html":{},"classes/_BaseGroupException.html":{}}}],["falsy",{"_index":389,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{},"index.html":{}}}],["filter",{"_index":382,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["filters/group",{"_index":941,"title":{},"body":{"controllers/GroupController.html":{}}}],["filters/leaderboard",{"_index":1115,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["finalstatus",{"_index":763,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["find",{"_index":74,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/_BaseGroupException.html":{}}}],["find(@request",{"_index":129,"title":{},"body":{"controllers/AccountController.html":{}}}],["find(req",{"_index":88,"title":{},"body":{"controllers/AccountController.html":{}}}],["findmany",{"_index":862,"title":{},"body":{"controllers/GroupController.html":{}}}],["findmany(name",{"_index":888,"title":{},"body":{"controllers/GroupController.html":{}}}],["findmany(options",{"_index":386,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["findme",{"_index":1202,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["findme(@request",{"_index":1223,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["findme(req",{"_index":1206,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["findmembershipsofuser(userid",{"_index":440,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["findone",{"_index":171,"title":{},"body":{"injectables/AccountService.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/WalletController.html":{}}}],["findone(@param('groupid",{"_index":967,"title":{},"body":{"controllers/GroupController.html":{}}}],["findone(@param('userid",{"_index":1226,"title":{},"body":{"controllers/ProfileController.html":{}}}],["findone(groupid",{"_index":376,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["findone(id",{"_index":184,"title":{},"body":{"injectables/AccountService.html":{}}}],["findone(req",{"_index":1278,"title":{},"body":{"controllers/WalletController.html":{}}}],["findone(userid",{"_index":1196,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["findonewithappleid",{"_index":172,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithappleid(appleid",{"_index":186,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithdeviceid",{"_index":173,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithdeviceid(deviceid",{"_index":189,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithfacebookid",{"_index":174,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithfacebookid(facebookid",{"_index":192,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithgoogleid",{"_index":175,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithgoogleid(googleid",{"_index":195,"title":{},"body":{"injectables/AccountService.html":{}}}],["findorcreate",{"_index":1304,"title":{},"body":{"injectables/WalletService.html":{}}}],["findorcreate(userid",{"_index":1310,"title":{},"body":{"injectables/WalletService.html":{}}}],["findrelationofmeandother",{"_index":577,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationofmeandother(req",{"_index":597,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelations",{"_index":578,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelations(req",{"_index":603,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationsofme",{"_index":579,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationsofme(req",{"_index":609,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationwithother",{"_index":580,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationwithother(req",{"_index":612,"title":{},"body":{"controllers/FriendController.html":{}}}],["first",{"_index":429,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["folder",{"_index":1411,"title":{},"body":{"index.html":{}}}],["found",{"_index":513,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["friend",{"_index":587,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friend.controller",{"_index":683,"title":{},"body":{"modules/FriendModule.html":{}}}],["friend.dto",{"_index":638,"title":{},"body":{"controllers/FriendController.html":{}}}],["friend.dto.ts",{"_index":1245,"title":{},"body":{"classes/ReferenceFriendDto.html":{},"coverage.html":{}}}],["friend.dto.ts:5",{"_index":1246,"title":{},"body":{"classes/ReferenceFriendDto.html":{}}}],["friend.service",{"_index":631,"title":{},"body":{"controllers/FriendController.html":{},"modules/FriendModule.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["friend/friend.module",{"_index":486,"title":{},"body":{"modules/CoreModule.html":{}}}],["friendcontroller",{"_index":572,"title":{"controllers/FriendController.html":{}},"body":{"controllers/FriendController.html":{},"modules/FriendModule.html":{},"coverage.html":{}}}],["friendmodule",{"_index":481,"title":{"modules/FriendModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/FriendModule.html":{},"modules.html":{},"overview.html":{}}}],["friends",{"_index":574,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"miscellaneous/enumerations.html":{}}}],["friendservice",{"_index":630,"title":{"injectables/FriendService.html":{}},"body":{"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"coverage.html":{},"overview.html":{}}}],["friendservice._derivetwowayrelationstatus",{"_index":758,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendship",{"_index":620,"title":{"classes/Friendship.html":{}},"body":{"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"coverage.html":{}}}],["friendshipcomposite",{"_index":679,"title":{"classes/FriendshipComposite.html":{}},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"coverage.html":{}}}],["friendshipcomposite.bid",{"_index":766,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcomposite?.statusatob",{"_index":764,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcomposite?.statusbtoa",{"_index":765,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcompositerepository",{"_index":695,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcomposites",{"_index":761,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiponewayrelationstatus",{"_index":704,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"miscellaneous/enumerations.html":{}}}],["friendshiponewayrelationstatus.didblock",{"_index":751,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiponewayrelationstatus.gotblocked",{"_index":752,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiponewayrelationstatus.noaction",{"_index":748,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiponewayrelationstatus.ok",{"_index":746,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiprepository",{"_index":697,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipstatus",{"_index":1292,"title":{},"body":{"controllers/WalletController.html":{}}}],["friendshiptwowayrelationstatus",{"_index":714,"title":{},"body":{"injectables/FriendService.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"miscellaneous/enumerations.html":{}}}],["friendshiptwowayrelationstatus.blockedbyother",{"_index":754,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiptwowayrelationstatus.blockedbyyou",{"_index":753,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiptwowayrelationstatus.friends",{"_index":747,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{}}}],["friendshiptwowayrelationstatus.receivedrequest",{"_index":750,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiptwowayrelationstatus.sentrequest",{"_index":749,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiptwowayrelationstatusdto",{"_index":635,"title":{"classes/FriendshipTwoWayRelationStatusDto.html":{}},"body":{"controllers/FriendController.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"coverage.html":{}}}],["friendshiptwowayrelationstatusdto})@apibearerauth()@useguards(jwtauthguard)@delete('me')@usefilters(new",{"_index":623,"title":{},"body":{"controllers/FriendController.html":{}}}],["friendshiptwowayrelationstatusdto})@apibearerauth()@useguards(jwtauthguard)@get(':aid/:bid')@usefilters(new",{"_index":616,"title":{},"body":{"controllers/FriendController.html":{}}}],["friendshiptwowayrelationstatusdto})@apibearerauth()@useguards(jwtauthguard)@post('me')@usefilters(new",{"_index":589,"title":{},"body":{"controllers/FriendController.html":{}}}],["friendshiptwowayrelationstatusdto})@apibearerauth()@useguards(jwtauthguard)@post('me/block')@usefilters(new",{"_index":595,"title":{},"body":{"controllers/FriendController.html":{}}}],["friendshiptwowayrelationstatusdto})@apibearerauth()@useguards(jwtauthguard)@post('me/unblock')@usefilters(new",{"_index":627,"title":{},"body":{"controllers/FriendController.html":{}}}],["friendshiptwowayrelationstatusdto})@apiparam({name",{"_index":600,"title":{},"body":{"controllers/FriendController.html":{}}}],["friendshiptwowayrelationstatusesdto",{"_index":606,"title":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"coverage.html":{}}}],["friendshiptwowayrelationstatusesdto})@apibearerauth()@useguards(jwtauthguard)@get('me",{"_index":610,"title":{},"body":{"controllers/FriendController.html":{}}}],["friendshiptwowayrelationstatusesdto})@apiresponse({type",{"_index":605,"title":{},"body":{"controllers/FriendController.html":{}}}],["function",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["functions",{"_index":1394,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":1442,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1437,"title":{},"body":{"index.html":{}}}],["get(':aid",{"_index":654,"title":{},"body":{"controllers/FriendController.html":{}}}],["get(':aid/:bid",{"_index":658,"title":{},"body":{"controllers/FriendController.html":{}}}],["get(':groupid",{"_index":966,"title":{},"body":{"controllers/GroupController.html":{}}}],["get(':groupid/members",{"_index":990,"title":{},"body":{"controllers/GroupController.html":{}}}],["get(':groupid/members/:userid",{"_index":994,"title":{},"body":{"controllers/GroupController.html":{}}}],["get(':leaderboardid",{"_index":1123,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["get(':leaderboardid/:userid",{"_index":1122,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["get(':leaderboardid/me",{"_index":1118,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["get(':userid",{"_index":1225,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["get('me",{"_index":645,"title":{},"body":{"controllers/FriendController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["get('me/:otherid",{"_index":647,"title":{},"body":{"controllers/FriendController.html":{}}}],["get('memberships/:userid",{"_index":986,"title":{},"body":{"controllers/GroupController.html":{}}}],["get('memberships/me",{"_index":980,"title":{},"body":{"controllers/GroupController.html":{}}}],["get(aid",{"_index":733,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["getall",{"_index":693,"title":{},"body":{"injectables/FriendService.html":{}}}],["getall(aid",{"_index":735,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["getentries",{"_index":516,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["getentries(leaderboardid",{"_index":1155,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["getentries(req",{"_index":1091,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["getentry",{"_index":502,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["getentry(leaderboardid",{"_index":1158,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["getentry(req",{"_index":1099,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["getentryofme",{"_index":1089,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["getentryofme(req",{"_index":1104,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["gethello",{"_index":227,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember(groupid",{"_index":451,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["getmemberofgroup",{"_index":863,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmemberofgroup(req",{"_index":898,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembers(groupid",{"_index":454,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["getmembershipsofme",{"_index":864,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembershipsofme(@request",{"_index":981,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembershipsofme(req",{"_index":901,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembershipsofuser",{"_index":865,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembershipsofuser(req",{"_index":907,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembersofgroup",{"_index":866,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembersofgroup(req",{"_index":911,"title":{},"body":{"controllers/GroupController.html":{}}}],["getting",{"_index":1397,"title":{"index.html":{}},"body":{"index.html":{}}}],["git",{"_index":1421,"title":{},"body":{"index.html":{}}}],["given",{"_index":183,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["google",{"_index":197,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["googleid",{"_index":31,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{}}}],["googleid'})@apiokresponse({type",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["gotblocked",{"_index":1387,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["group",{"_index":336,"title":{"classes/Group.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["group'})@apicreatedresponse({type",{"_index":880,"title":{},"body":{"controllers/GroupController.html":{}}}],["group'})@apiparam({name",{"_index":873,"title":{},"body":{"controllers/GroupController.html":{}}}],["group.controller",{"_index":1058,"title":{},"body":{"modules/GroupModule.html":{}}}],["group.dto",{"_index":346,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/UpdateGroupDto.html":{},"classes/_BaseGroupException.html":{}}}],["group.dto.ts",{"_index":550,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["group.dto.ts:5",{"_index":552,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["group.dto.ts:8",{"_index":551,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["group.entity",{"_index":1053,"title":{},"body":{"classes/GroupMember.html":{}}}],["group.inviteonly",{"_index":365,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group.members",{"_index":455,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group.members.length",{"_index":456,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group.name",{"_index":364,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group.service",{"_index":935,"title":{},"body":{"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"modules/GroupModule.html":{}}}],["group/group.module",{"_index":487,"title":{},"body":{"modules/CoreModule.html":{}}}],["groupadmin",{"_index":1391,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupbanned",{"_index":1393,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupcontroller",{"_index":859,"title":{"controllers/GroupController.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{},"coverage.html":{}}}],["groupdoesnotexisterror",{"_index":347,"title":{"classes/GroupDoesNotExistError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["groupdoesnotexisterror(`group",{"_index":378,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupdto",{"_index":936,"title":{"classes/GroupDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/GroupDto.html":{},"coverage.html":{}}}],["groupdto})@apibadrequestresponse({type",{"_index":895,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupexceptionfilter",{"_index":940,"title":{"classes/GroupExceptionFilter.html":{}},"body":{"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"coverage.html":{}}}],["groupid",{"_index":374,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupid'})@apicreatedresponse({type",{"_index":919,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupid'})@apinocontentresponse()@apibadrequestresponse({type",{"_index":885,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupid'})@apiokresponse({type",{"_index":894,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupid'})@apiparam({name",{"_index":874,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupinvited",{"_index":1392,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupmember",{"_index":338,"title":{"classes/GroupMember.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["groupmember.group",{"_index":368,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmember.memberid",{"_index":369,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmember.membershipstatus",{"_index":370,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmember?.membershipstatus",{"_index":404,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmemberrepository",{"_index":359,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmembershipstatus",{"_index":341,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["groupmembershipstatus.admin",{"_index":371,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmembershipstatus.banned",{"_index":426,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmembershipstatus.invited",{"_index":431,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmembershipstatus.member",{"_index":430,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmodule",{"_index":482,"title":{"modules/GroupModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/GroupModule.html":{},"modules.html":{},"overview.html":{}}}],["groupname",{"_index":361,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["grouprepository",{"_index":357,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groups",{"_index":380,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groups'})@apiokresponse({type",{"_index":889,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/memberships/me",{"_index":978,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/memberships/{userid",{"_index":985,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/{groupid",{"_index":964,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/{groupid}/members",{"_index":988,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/{groupid}/members/me",{"_index":996,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/{groupid}/members/{userid",{"_index":992,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/{groupid}/members/{userid}/ban",{"_index":1010,"title":{},"body":{"controllers/GroupController.html":{}}}],["groups/{groupid}/members/{userid}/promote",{"_index":1013,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupsdto",{"_index":938,"title":{"classes/GroupsDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/GroupsDto.html":{},"coverage.html":{}}}],["groupsdto})@apibadrequestresponse({type",{"_index":890,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupservice",{"_index":355,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"modules/GroupModule.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{},"overview.html":{}}}],["hello",{"_index":253,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":1023,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["host.switchtohttp",{"_index":1032,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["httpcode",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GroupController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":975,"title":{},"body":{"controllers/GroupController.html":{}}}],["httpcode(httpstatus.ok",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["https://github.com/catervajs/caterva.git",{"_index":1423,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{},"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{}}}],["httpstatus.bad_request",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["httpstatus.forbidden",{"_index":1295,"title":{},"body":{"controllers/WalletController.html":{}}}],["id",{"_index":32,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["identifier",{"_index":1331,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":1081,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ilike",{"_index":335,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["ilike(`%${options.name",{"_index":393,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["implements",{"_index":1019,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["import",{"_index":18,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["imports",{"_index":159,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["individually",{"_index":728,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["injectable",{"_index":168,"title":{"injectables/AccountService.html":{},"injectables/AppService.html":{},"injectables/FriendService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LeaderboardService.html":{},"injectables/ProfileService.html":{},"injectables/WalletService.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AppService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["injectables",{"_index":169,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AppService.html":{},"injectables/FriendService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LeaderboardService.html":{},"injectables/ProfileService.html":{},"injectables/WalletService.html":{},"overview.html":{}}}],["injectrepository",{"_index":201,"title":{},"body":{"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["injectrepository(account",{"_index":202,"title":{},"body":{"injectables/AccountService.html":{}}}],["injectrepository(friendship",{"_index":744,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["injectrepository(friendshipcomposite",{"_index":745,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["injectrepository(group",{"_index":356,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["injectrepository(groupmember",{"_index":358,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["injectrepository(profile",{"_index":1187,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(wallet",{"_index":1320,"title":{},"body":{"injectables/WalletService.html":{}}}],["install",{"_index":1425,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1222,"title":{},"body":{"controllers/ProfileController.html":{}}}],["integer",{"_index":1174,"title":{},"body":{"classes/Profile.html":{},"classes/Wallet.html":{}}}],["inverse",{"_index":709,"title":{},"body":{"injectables/FriendService.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["inverse\".\"aid",{"_index":833,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["inverse\".\"bid",{"_index":832,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["inverse\".\"status",{"_index":831,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["inverse.aid",{"_index":778,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inverse.bid",{"_index":779,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inverse.status",{"_index":780,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inverse?.status",{"_index":760,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inverserelationstatus",{"_index":705,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inversestatus",{"_index":726,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["invitation",{"_index":450,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["invite",{"_index":383,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["invited",{"_index":420,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["inviteonly",{"_index":362,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CreateGroupDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["invitetogroup",{"_index":867,"title":{},"body":{"controllers/GroupController.html":{}}}],["invitetogroup(req",{"_index":914,"title":{},"body":{"controllers/GroupController.html":{}}}],["isfinite(number(options.limit",{"_index":528,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["isfinite(number(options.offset",{"_index":525,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["itself",{"_index":788,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["join",{"_index":443,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/FriendshipComposite.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["join(groupid",{"_index":444,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["joincolumn",{"_index":812,"title":{},"body":{"classes/Friendship.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["joingroup",{"_index":868,"title":{},"body":{"controllers/GroupController.html":{}}}],["joingroup(req",{"_index":918,"title":{},"body":{"controllers/GroupController.html":{}}}],["json",{"_index":1435,"title":{},"body":{"index.html":{}}}],["jsonb",{"_index":54,"title":{},"body":{"classes/Account.html":{}}}],["jwt",{"_index":1076,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":158,"title":{},"body":{"modules/AccountModule.html":{}}}],["jwtauthguard",{"_index":116,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1079,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":156,"title":{},"body":{"modules/AccountModule.html":{}}}],["jwtmodule.register",{"_index":161,"title":{},"body":{"modules/AccountModule.html":{}}}],["jwtservice",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{}}}],["jwtservice.sign(payload",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwtstrategy",{"_index":144,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AccountModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["keyprefix",{"_index":1151,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["kick",{"_index":472,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["language",{"_index":33,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{}}}],["last",{"_index":460,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["latest",{"_index":1439,"title":{},"body":{"index.html":{}}}],["launching",{"_index":1428,"title":{},"body":{"index.html":{}}}],["lb",{"_index":1152,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["leaderboard",{"_index":511,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["leaderboard.controller",{"_index":1147,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["leaderboard.service",{"_index":1112,"title":{},"body":{"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{}}}],["leaderboard/leaderboard.module",{"_index":488,"title":{},"body":{"modules/CoreModule.html":{}}}],["leaderboardcontroller",{"_index":1086,"title":{"controllers/LeaderboardController.html":{}},"body":{"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"coverage.html":{}}}],["leaderboardentriesdto",{"_index":498,"title":{"classes/LeaderboardEntriesDto.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["leaderboardentriesdto})@apibadrequestresponse({type",{"_index":1093,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboardentrydto",{"_index":495,"title":{"classes/LeaderboardEntryDto.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["leaderboardentrydto})@apibadrequestresponse({type",{"_index":1100,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboardentrynotfounderror",{"_index":500,"title":{"classes/LeaderboardEntryNotFoundError.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["leaderboardexceptionfilter",{"_index":1114,"title":{"classes/LeaderboardExceptionFilter.html":{}},"body":{"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"coverage.html":{}}}],["leaderboardid",{"_index":503,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["leaderboardid'})@apibearerauth()@useguards(jwtauthguard)@get(':leaderboardid/me')@usefilters(leaderboardexceptionfilter",{"_index":1106,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboardid'})@apibearerauth()@useguards(jwtauthguard)@usefilters(leaderboardexceptionfilter)@post(':leaderboardid",{"_index":1110,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboardid'})@apiparam({name",{"_index":1101,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboardid'})@apiquery({name",{"_index":1095,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboardmodule",{"_index":483,"title":{"modules/LeaderboardModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/LeaderboardModule.html":{},"modules.html":{},"overview.html":{}}}],["leaderboards",{"_index":1088,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboardservice",{"_index":501,"title":{"injectables/LeaderboardService.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{},"overview.html":{}}}],["leave",{"_index":457,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["leave(groupid",{"_index":458,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["leavegroup",{"_index":869,"title":{},"body":{"controllers/GroupController.html":{}}}],["leavegroup(@request",{"_index":1005,"title":{},"body":{"controllers/GroupController.html":{}}}],["leavegroup(req",{"_index":922,"title":{},"body":{"controllers/GroupController.html":{}}}],["legend",{"_index":136,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["level",{"_index":1169,"title":{},"body":{"classes/Profile.html":{}}}],["libraries",{"_index":1438,"title":{},"body":{"index.html":{}}}],["limit",{"_index":518,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["limit'})@apibearerauth()@useguards(jwtauthguard)@usefilters(leaderboardexceptionfilter)@get(':leaderboardid",{"_index":1097,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["literal",{"_index":1156,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["local",{"_index":1403,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":1415,"title":{},"body":{"index.html":{}}}],["location",{"_index":34,"title":{},"body":{"classes/Account.html":{},"classes/CreateAccountDto.html":{}}}],["logging",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["manytoone",{"_index":1052,"title":{},"body":{"classes/GroupMember.html":{}}}],["matching",{"_index":22,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["me'})@apiokresponse({type",{"_index":903,"title":{},"body":{"controllers/GroupController.html":{}}}],["member",{"_index":403,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["member.entity",{"_index":340,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"modules/GroupModule.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["member.entity.ts",{"_index":1041,"title":{},"body":{"classes/GroupMember.html":{},"coverage.html":{}}}],["member.entity.ts:11",{"_index":1047,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:15",{"_index":1050,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:23",{"_index":1051,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:27",{"_index":1045,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:31",{"_index":1049,"title":{},"body":{"classes/GroupMember.html":{}}}],["memberid",{"_index":400,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["members",{"_index":453,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["membership",{"_index":343,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/MembershipDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["membershipdto",{"_index":945,"title":{"classes/MembershipDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/MembershipDto.html":{},"coverage.html":{}}}],["membershipdto})@apibadrequestresponse({type",{"_index":876,"title":{},"body":{"controllers/GroupController.html":{}}}],["memberships",{"_index":902,"title":{},"body":{"controllers/GroupController.html":{},"classes/MembershipsDto.html":{}}}],["memberships.length",{"_index":984,"title":{},"body":{"controllers/GroupController.html":{}}}],["membershipsdto",{"_index":943,"title":{"classes/MembershipsDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/MembershipsDto.html":{},"coverage.html":{}}}],["membershipsdto})@apibadrequestresponse({type",{"_index":904,"title":{},"body":{"controllers/GroupController.html":{}}}],["membershipstatus",{"_index":414,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["message",{"_index":330,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["metadata",{"_index":35,"title":{},"body":{"classes/Account.html":{},"dependencies.html":{}}}],["methods",{"_index":71,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{}}}],["minlength",{"_index":562,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["miscellaneous",{"_index":1378,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["module",{"_index":132,"title":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["modules",{"_index":134,"title":{"modules.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":85,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CreateGroupDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/functions.html":{}}}],["nestjs",{"_index":493,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":103,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"modules/GroupModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1358,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":157,"title":{},"body":{"modules/AccountModule.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":155,"title":{},"body":{"modules/AccountModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1361,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":19,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"classes/ReferenceFriendDto.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":152,"title":{},"body":{"modules/AccountModule.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"modules/GroupModule.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"dependencies.html":{}}}],["new",{"_index":79,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["newamount",{"_index":1313,"title":{},"body":{"injectables/WalletService.html":{}}}],["newban",{"_index":465,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newban.groupid",{"_index":466,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newban.memberid",{"_index":467,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newban.membershipstatus",{"_index":468,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newmember",{"_index":434,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newmember.groupid",{"_index":435,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newmember.memberid",{"_index":436,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newmember.membershipstatus",{"_index":437,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newwallet",{"_index":1322,"title":{},"body":{"injectables/WalletService.html":{}}}],["newwallet.userid",{"_index":1323,"title":{},"body":{"injectables/WalletService.html":{}}}],["noaction",{"_index":1385,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["non",{"_index":411,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["normal",{"_index":708,"title":{},"body":{"injectables/FriendService.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{}}}],["normal\".\"aid",{"_index":828,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["normal\".\"bid",{"_index":829,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["normal\".\"status",{"_index":830,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["normal.aid",{"_index":775,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normal.bid",{"_index":776,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normal.status",{"_index":777,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normal?.status",{"_index":759,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normalcurrency",{"_index":1260,"title":{},"body":{"classes/Wallet.html":{}}}],["normalizedlimit",{"_index":523,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["normalizedoffset",{"_index":522,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["normalrelationstatus",{"_index":712,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normalstatus",{"_index":725,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["notgroupadminerror",{"_index":348,"title":{"classes/NotGroupAdminError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["notgroupmembererror",{"_index":350,"title":{"classes/NotGroupMemberError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["nothing",{"_index":794,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["notinvitedtogrouperror",{"_index":349,"title":{"classes/NotInvitedToGroupError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["npm",{"_index":1424,"title":{},"body":{"index.html":{}}}],["null",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["nullable",{"_index":40,"title":{},"body":{"classes/Account.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["number",{"_index":1133,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"injectables/LeaderboardService.html":{},"classes/Profile.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"injectables/WalletService.html":{}}}],["number(options.limit",{"_index":529,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["number(options.offset",{"_index":526,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["number(rank",{"_index":515,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["number(score",{"_index":514,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["object",{"_index":182,"title":{},"body":{"injectables/AccountService.html":{},"injectables/JwtStrategy.html":{}}}],["offset",{"_index":517,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["offset'})@apiquery({name",{"_index":1096,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["ok",{"_index":1384,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ondelete",{"_index":1043,"title":{},"body":{"classes/GroupMember.html":{},"classes/Wallet.html":{}}}],["one",{"_index":710,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"miscellaneous/enumerations.html":{}}}],["onetomany",{"_index":858,"title":{},"body":{"classes/Group.html":{}}}],["onetoone",{"_index":813,"title":{},"body":{"classes/Friendship.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["onetoone(undefined)@joincolumn",{"_index":800,"title":{},"body":{"classes/Friendship.html":{}}}],["openapi",{"_index":1432,"title":{},"body":{"index.html":{}}}],["operations",{"_index":789,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["optional",{"_index":26,"title":{},"body":{"classes/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":381,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["options",{"_index":385,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["options.inviteonly",{"_index":397,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["options.limit",{"_index":527,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["options.name",{"_index":392,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["options.offset",{"_index":524,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["otherid",{"_index":598,"title":{},"body":{"controllers/FriendController.html":{}}}],["otherid'})@apibearerauth()@useguards(jwtauthguard)@get('me/:otherid')@usefilters(new",{"_index":601,"title":{},"body":{"controllers/FriendController.html":{}}}],["otherwise",{"_index":1416,"title":{},"body":{"index.html":{}}}],["out",{"_index":147,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["overview",{"_index":1449,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1356,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":204,"title":{},"body":{"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["param('aid",{"_index":655,"title":{},"body":{"controllers/FriendController.html":{}}}],["param('bid",{"_index":659,"title":{},"body":{"controllers/FriendController.html":{}}}],["param('groupid",{"_index":971,"title":{},"body":{"controllers/GroupController.html":{}}}],["param('leaderboardid",{"_index":1120,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["param('otherid",{"_index":649,"title":{},"body":{"controllers/FriendController.html":{}}}],["param('userid",{"_index":987,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/WalletController.html":{}}}],["parameters",{"_index":84,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"miscellaneous/functions.html":{}}}],["parseuuidpipe",{"_index":1281,"title":{},"body":{"controllers/WalletController.html":{}}}],["partialtype",{"_index":1251,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{}}}],["partialtype(createaccountdto",{"_index":1252,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["partialtype(creategroupdto",{"_index":1255,"title":{},"body":{"classes/UpdateGroupDto.html":{}}}],["partialtype(createprofiledto",{"_index":1257,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["passport",{"_index":1075,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":154,"title":{},"body":{"modules/AccountModule.html":{}}}],["passportstrategy",{"_index":1072,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1077,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["patch",{"_index":102,"title":{},"body":{"controllers/AccountController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["patch(':groupid",{"_index":970,"title":{},"body":{"controllers/GroupController.html":{}}}],["patch('me",{"_index":1227,"title":{},"body":{"controllers/ProfileController.html":{}}}],["path",{"_index":322,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["payload",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1085,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":1366,"title":{},"body":{"dependencies.html":{}}}],["post",{"_index":98,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{}}}],["post(':groupid/members/:userid",{"_index":1001,"title":{},"body":{"controllers/GroupController.html":{}}}],["post(':groupid/members/:userid/ban",{"_index":1011,"title":{},"body":{"controllers/GroupController.html":{}}}],["post(':groupid/members/me",{"_index":998,"title":{},"body":{"controllers/GroupController.html":{}}}],["post(':leaderboardid",{"_index":1127,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["post('apple",{"_index":311,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('device",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('facebook",{"_index":314,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('google",{"_index":308,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('me",{"_index":661,"title":{},"body":{"controllers/FriendController.html":{}}}],["post('me/block",{"_index":668,"title":{},"body":{"controllers/FriendController.html":{}}}],["post('me/unblock",{"_index":671,"title":{},"body":{"controllers/FriendController.html":{}}}],["postgres",{"_index":243,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["postgresql://postgres:password@localhost:5432/caterva",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":70,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["premium",{"_index":1319,"title":{},"body":{"injectables/WalletService.html":{}}}],["premiumcurrency",{"_index":1261,"title":{},"body":{"classes/Wallet.html":{}}}],["presence",{"_index":416,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["previously",{"_index":433,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["primarycolumn",{"_index":802,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["primarygeneratedcolumn",{"_index":60,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":64,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{}}}],["private",{"_index":203,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["process.env.database_url",{"_index":245,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.redis_url",{"_index":1149,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["process.env.secret",{"_index":163,"title":{},"body":{"modules/AccountModule.html":{},"injectables/JwtStrategy.html":{}}}],["profile",{"_index":1167,"title":{"classes/Profile.html":{}},"body":{"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["profile'})@apicreatedresponse({type",{"_index":1203,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile.avatarurl",{"_index":1193,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profile.controller",{"_index":1235,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.displayname",{"_index":1191,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profile.dto",{"_index":1183,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts",{"_index":555,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["profile.dto.ts:5",{"_index":561,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:8",{"_index":558,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.service",{"_index":1214,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile.userid",{"_index":1190,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profile/profile.module",{"_index":570,"title":{},"body":{"modules/ExtensionsModule.html":{}}}],["profilealreadyexistserror",{"_index":1181,"title":{"classes/ProfileAlreadyExistsError.html":{}},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["profilecontroller",{"_index":1199,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"coverage.html":{}}}],["profiledto",{"_index":1215,"title":{"classes/ProfileDto.html":{}},"body":{"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"coverage.html":{}}}],["profiledto})@apibadrequestresponse()@apibearerauth()@useguards(jwtauthguard)@post",{"_index":1204,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profilemodule",{"_index":567,"title":{"modules/ProfileModule.html":{}},"body":{"modules/ExtensionsModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilerepository",{"_index":1188,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profiles",{"_index":1201,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profileservice",{"_index":1186,"title":{"injectables/ProfileService.html":{}},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"coverage.html":{},"overview.html":{}}}],["project",{"_index":1410,"title":{},"body":{"index.html":{}}}],["promise",{"_index":87,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["promise.all",{"_index":508,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseLeaderboardException.html":{}}}],["promote",{"_index":870,"title":{},"body":{"controllers/GroupController.html":{}}}],["promote(req",{"_index":925,"title":{},"body":{"controllers/GroupController.html":{}}}],["promotetoadmin",{"_index":477,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["properies",{"_index":384,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"classes/ProfileDto.html":{},"classes/ReferenceFriendDto.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{}}}],["providers",{"_index":139,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["put",{"_index":1213,"title":{},"body":{"controllers/ProfileController.html":{}}}],["query",{"_index":934,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["query('inviteonly",{"_index":960,"title":{},"body":{"controllers/GroupController.html":{}}}],["query('limit",{"_index":1125,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["query('name",{"_index":959,"title":{},"body":{"controllers/GroupController.html":{}}}],["query('offset",{"_index":1124,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["quick",{"_index":1402,"title":{},"body":{"index.html":{}}}],["rank",{"_index":507,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["read",{"_index":452,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["readonly",{"_index":122,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/WalletController.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["receivedrequest",{"_index":1389,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receivedrequests",{"_index":840,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["redis",{"_index":494,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{},"index.html":{}}}],["redis://127.0.0.1:6379/0",{"_index":1150,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["redis_url",{"_index":1419,"title":{},"body":{"index.html":{}}}],["redismodule",{"_index":1146,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["redismodule.register",{"_index":1148,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["redisservice",{"_index":492,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["reference",{"_index":641,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"coverage.html":{}}}],["referencefrienddto",{"_index":584,"title":{"classes/ReferenceFriendDto.html":{}},"body":{"controllers/FriendController.html":{},"classes/ReferenceFriendDto.html":{},"coverage.html":{}}}],["referred",{"_index":702,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["reflect",{"_index":1368,"title":{},"body":{"dependencies.html":{}}}],["relation",{"_index":599,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["relations",{"_index":442,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["remove",{"_index":473,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["remove(aid",{"_index":737,"title":{},"body":{"injectables/FriendService.html":{}}}],["remove(req",{"_index":618,"title":{},"body":{"controllers/FriendController.html":{}}}],["removefrienddto",{"_index":619,"title":{},"body":{"controllers/FriendController.html":{}}}],["removefrienddto.id",{"_index":667,"title":{},"body":{"controllers/FriendController.html":{}}}],["removemember",{"_index":474,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["removememberofgroup",{"_index":871,"title":{},"body":{"controllers/GroupController.html":{}}}],["removememberofgroup(req",{"_index":928,"title":{},"body":{"controllers/GroupController.html":{}}}],["repository",{"_index":178,"title":{},"body":{"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["represent",{"_index":723,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["req",{"_index":93,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["req.user.sub",{"_index":666,"title":{},"body":{"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["request",{"_index":101,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{}}}],["request'})@apicreatedresponse({type",{"_index":588,"title":{},"body":{"controllers/FriendController.html":{}}}],["request'})@apiokresponse({type",{"_index":622,"title":{},"body":{"controllers/FriendController.html":{}}}],["request.dto",{"_index":949,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["request.dto.ts",{"_index":321,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"coverage.html":{}}}],["request.dto.ts:14",{"_index":328,"title":{},"body":{"classes/BadRequestDto.html":{}}}],["request.dto.ts:17",{"_index":329,"title":{},"body":{"classes/BadRequestDto.html":{}}}],["request.dto.ts:20",{"_index":327,"title":{},"body":{"classes/BadRequestDto.html":{}}}],["request.dto.ts:23",{"_index":326,"title":{},"body":{"classes/BadRequestDto.html":{}}}],["request.dto.ts:6",{"_index":564,"title":{},"body":{"classes/ErrorDto.html":{}}}],["request.dto.ts:9",{"_index":563,"title":{},"body":{"classes/ErrorDto.html":{}}}],["request.url",{"_index":1039,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["requestinguserid",{"_index":1291,"title":{},"body":{"controllers/WalletController.html":{}}}],["requirements",{"_index":1400,"title":{},"body":{"index.html":{}}}],["reset",{"_index":146,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["response",{"_index":1028,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["response.status(status).json",{"_index":1037,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["result",{"_index":21,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":23,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":125,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["returns",{"_index":86,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1370,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":1405,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1372,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":448,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["savedgroup",{"_index":366,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["savedinverse",{"_index":782,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["savedinverse?.status",{"_index":785,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["savednormal",{"_index":781,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["savednormal?.status",{"_index":784,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["score",{"_index":506,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/UpdateEntryDto.html":{},"classes/_BaseLeaderboardException.html":{}}}],["secret",{"_index":162,"title":{},"body":{"modules/AccountModule.html":{},"index.html":{}}}],["secrete",{"_index":1420,"title":{},"body":{"index.html":{}}}],["secretorkey",{"_index":1082,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretsecretigotasecret",{"_index":164,"title":{},"body":{"modules/AccountModule.html":{},"injectables/JwtStrategy.html":{}}}],["see",{"_index":1294,"title":{},"body":{"controllers/WalletController.html":{}}}],["select",{"_index":827,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["self",{"_index":640,"title":{},"body":{"controllers/FriendController.html":{}}}],["selfreferenceerror",{"_index":743,"title":{"classes/SelfReferenceError.html":{}},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"coverage.html":{}}}],["selfreferenceerrorfilter",{"_index":590,"title":{"classes/SelfReferenceErrorFilter.html":{}},"body":{"controllers/FriendController.html":{},"classes/SelfReferenceErrorFilter.html":{},"coverage.html":{}}}],["send",{"_index":585,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["sentrequest",{"_index":1388,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sentrequests",{"_index":841,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["server",{"_index":447,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["service.create",{"_index":952,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.delete",{"_index":973,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.findmany",{"_index":958,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.findmembershipofuser",{"_index":979,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.findone",{"_index":965,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.getmember",{"_index":993,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.getmembers",{"_index":989,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.invite",{"_index":1000,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.join",{"_index":997,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.leave",{"_index":1003,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.removemember",{"_index":1007,"title":{},"body":{"controllers/GroupController.html":{}}}],["service.update",{"_index":969,"title":{},"body":{"controllers/GroupController.html":{}}}],["set",{"_index":700,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"index.html":{}}}],["signoptions",{"_index":165,"title":{},"body":{"modules/AccountModule.html":{}}}],["someone",{"_index":462,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["specification",{"_index":1433,"title":{},"body":{"index.html":{}}}],["specifications",{"_index":1427,"title":{},"body":{"index.html":{}}}],["src/.../auth.controller.ts",{"_index":1395,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../friendship",{"_index":1380,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../group",{"_index":1382,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1396,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":226,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":228,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":251,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":252,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/dto/bad",{"_index":320,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"coverage.html":{}}}],["src/common/guard/jwt",{"_index":1063,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/core/account/account.controller.ts",{"_index":69,"title":{},"body":{"controllers/AccountController.html":{},"coverage.html":{}}}],["src/core/account/account.controller.ts:37",{"_index":83,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/core/account/account.controller.ts:49",{"_index":92,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/core/account/account.controller.ts:61",{"_index":97,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/core/account/account.module.ts",{"_index":148,"title":{},"body":{"modules/AccountModule.html":{}}}],["src/core/account/account.service.ts",{"_index":170,"title":{},"body":{"injectables/AccountService.html":{},"coverage.html":{}}}],["src/core/account/account.service.ts:18",{"_index":181,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:33",{"_index":199,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:50",{"_index":185,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:58",{"_index":190,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:66",{"_index":187,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:74",{"_index":196,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:81",{"_index":193,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:9",{"_index":179,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/auth.controller.ts",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/core/account/auth.controller.ts:110",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/account/auth.controller.ts:44",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/account/auth.controller.ts:66",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/account/auth.controller.ts:88",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/account/dto/access",{"_index":6,"title":{},"body":{"classes/AccessTokenDto.html":{},"coverage.html":{}}}],["src/core/account/dto/auth.dto.ts",{"_index":317,"title":{},"body":{"classes/AuthDto.html":{},"coverage.html":{}}}],["src/core/account/dto/auth.dto.ts:5",{"_index":318,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/core/account/dto/create",{"_index":539,"title":{},"body":{"classes/CreateAccountDto.html":{},"coverage.html":{}}}],["src/core/account/dto/update",{"_index":1250,"title":{},"body":{"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["src/core/account/entities/account.entity.ts",{"_index":25,"title":{},"body":{"classes/Account.html":{},"coverage.html":{}}}],["src/core/account/entities/account.entity.ts:15",{"_index":50,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:20",{"_index":46,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:25",{"_index":48,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:30",{"_index":42,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:35",{"_index":47,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:39",{"_index":53,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:43",{"_index":52,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:47",{"_index":55,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:51",{"_index":45,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:55",{"_index":57,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/jwt.strategy.ts",{"_index":1067,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/core/account/jwt.strategy.ts:16",{"_index":1071,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/account/jwt.strategy.ts:6",{"_index":1069,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/core.module.ts",{"_index":484,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/friend/dto/friendship",{"_index":834,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"coverage.html":{}}}],["src/core/friend/dto/reference",{"_index":1244,"title":{},"body":{"classes/ReferenceFriendDto.html":{},"coverage.html":{}}}],["src/core/friend/entities/friendship",{"_index":816,"title":{},"body":{"classes/FriendshipComposite.html":{},"coverage.html":{}}}],["src/core/friend/entities/friendship.entity.ts",{"_index":799,"title":{},"body":{"classes/Friendship.html":{},"coverage.html":{}}}],["src/core/friend/entities/friendship.entity.ts:18",{"_index":803,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:21",{"_index":805,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:28",{"_index":810,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:31",{"_index":806,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:34",{"_index":811,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:38",{"_index":801,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:42",{"_index":804,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/enums/friendship",{"_index":1383,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/friend/friend.controller.ts",{"_index":573,"title":{},"body":{"controllers/FriendController.html":{},"coverage.html":{}}}],["src/core/friend/friend.controller.ts:108",{"_index":591,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:125",{"_index":624,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:145",{"_index":596,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:165",{"_index":628,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:40",{"_index":611,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:55",{"_index":602,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:75",{"_index":608,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:90",{"_index":617,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.module.ts",{"_index":677,"title":{},"body":{"modules/FriendModule.html":{}}}],["src/core/friend/friend.service.ts",{"_index":685,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"coverage.html":{}}}],["src/core/friend/friend.service.ts:13",{"_index":696,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:136",{"_index":727,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:168",{"_index":719,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:180",{"_index":722,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:197",{"_index":699,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:214",{"_index":730,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:247",{"_index":738,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:26",{"_index":706,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:277",{"_index":732,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:311",{"_index":741,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:69",{"_index":716,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:84",{"_index":734,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:96",{"_index":736,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/self",{"_index":1247,"title":{},"body":{"classes/SelfReferenceErrorFilter.html":{},"coverage.html":{}}}],["src/core/group/dto/create",{"_index":549,"title":{},"body":{"classes/CreateGroupDto.html":{},"coverage.html":{}}}],["src/core/group/dto/group.dto.ts",{"_index":1015,"title":{},"body":{"classes/GroupDto.html":{},"coverage.html":{}}}],["src/core/group/dto/group.dto.ts:6",{"_index":1016,"title":{},"body":{"classes/GroupDto.html":{}}}],["src/core/group/dto/groups.dto.ts",{"_index":1060,"title":{},"body":{"classes/GroupsDto.html":{},"coverage.html":{}}}],["src/core/group/dto/groups.dto.ts:6",{"_index":1061,"title":{},"body":{"classes/GroupsDto.html":{}}}],["src/core/group/dto/groups.dto.ts:9",{"_index":1062,"title":{},"body":{"classes/GroupsDto.html":{}}}],["src/core/group/dto/membership.dto.ts",{"_index":1162,"title":{},"body":{"classes/MembershipDto.html":{},"coverage.html":{}}}],["src/core/group/dto/membership.dto.ts:6",{"_index":1163,"title":{},"body":{"classes/MembershipDto.html":{}}}],["src/core/group/dto/memberships.dto.ts",{"_index":1164,"title":{},"body":{"classes/MembershipsDto.html":{},"coverage.html":{}}}],["src/core/group/dto/memberships.dto.ts:6",{"_index":1165,"title":{},"body":{"classes/MembershipsDto.html":{}}}],["src/core/group/dto/memberships.dto.ts:9",{"_index":1166,"title":{},"body":{"classes/MembershipsDto.html":{}}}],["src/core/group/dto/update",{"_index":1254,"title":{},"body":{"classes/UpdateGroupDto.html":{},"coverage.html":{}}}],["src/core/group/entities/group",{"_index":1040,"title":{},"body":{"classes/GroupMember.html":{},"coverage.html":{}}}],["src/core/group/entities/group.entity.ts",{"_index":849,"title":{},"body":{"classes/Group.html":{},"coverage.html":{}}}],["src/core/group/entities/group.entity.ts:16",{"_index":851,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:20",{"_index":856,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:24",{"_index":853,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:28",{"_index":850,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:32",{"_index":857,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:36",{"_index":855,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/enums/group",{"_index":1390,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/group/filters/group",{"_index":1017,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"coverage.html":{}}}],["src/core/group/group.controller.ts",{"_index":860,"title":{},"body":{"controllers/GroupController.html":{},"coverage.html":{}}}],["src/core/group/group.controller.ts:117",{"_index":933,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:143",{"_index":887,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:157",{"_index":906,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:176",{"_index":910,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:197",{"_index":913,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:219",{"_index":900,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:240",{"_index":921,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:262",{"_index":917,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:289",{"_index":924,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:306",{"_index":931,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:325",{"_index":878,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:351",{"_index":927,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:51",{"_index":883,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:76",{"_index":892,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:98",{"_index":897,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.module.ts",{"_index":1057,"title":{},"body":{"modules/GroupModule.html":{}}}],["src/core/group/group.service.ts",{"_index":332,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["src/core/leaderboard/dto/leaderboard",{"_index":1130,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"coverage.html":{}}}],["src/core/leaderboard/dto/update",{"_index":1253,"title":{},"body":{"classes/UpdateEntryDto.html":{},"coverage.html":{}}}],["src/core/leaderboard/filters/leaderboard",{"_index":1140,"title":{},"body":{"classes/LeaderboardExceptionFilter.html":{},"coverage.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts",{"_index":1087,"title":{},"body":{"controllers/LeaderboardController.html":{},"coverage.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts:42",{"_index":1107,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts:59",{"_index":1103,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts:77",{"_index":1098,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts:97",{"_index":1111,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.module.ts",{"_index":1145,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["src/core/leaderboard/leaderboard.service.ts",{"_index":490,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"coverage.html":{}}}],["src/core/leaderboard/leaderboard.service.ts:11",{"_index":1154,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/core/leaderboard/leaderboard.service.ts:14",{"_index":1159,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/core/leaderboard/leaderboard.service.ts:35",{"_index":1157,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/core/leaderboard/leaderboard.service.ts:83",{"_index":1161,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/extensions/extensions.module.ts",{"_index":569,"title":{},"body":{"modules/ExtensionsModule.html":{}}}],["src/extensions/profile/dto/create",{"_index":554,"title":{},"body":{"classes/CreateProfileDto.html":{},"coverage.html":{}}}],["src/extensions/profile/dto/profile.dto.ts",{"_index":1229,"title":{},"body":{"classes/ProfileDto.html":{},"coverage.html":{}}}],["src/extensions/profile/dto/profile.dto.ts:6",{"_index":1230,"title":{},"body":{"classes/ProfileDto.html":{}}}],["src/extensions/profile/dto/update",{"_index":1256,"title":{},"body":{"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/extensions/profile/entities/profile.entity.ts",{"_index":1168,"title":{},"body":{"classes/Profile.html":{},"coverage.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:18",{"_index":1179,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:22",{"_index":1173,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:26",{"_index":1171,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:30",{"_index":1175,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:35",{"_index":1178,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:39",{"_index":1172,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:43",{"_index":1176,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/profile.controller.ts",{"_index":1200,"title":{},"body":{"controllers/ProfileController.html":{},"coverage.html":{}}}],["src/extensions/profile/profile.controller.ts:41",{"_index":1205,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.controller.ts:66",{"_index":1208,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.controller.ts:78",{"_index":1210,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.controller.ts:88",{"_index":1212,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.module.ts",{"_index":1234,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/extensions/profile/profile.service.ts",{"_index":1182,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"coverage.html":{}}}],["src/extensions/profile/profile.service.ts:11",{"_index":1238,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/extensions/profile/profile.service.ts:17",{"_index":1240,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/extensions/profile/profile.service.ts:33",{"_index":1241,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/extensions/profile/profile.service.ts:37",{"_index":1243,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts",{"_index":1259,"title":{},"body":{"classes/Wallet.html":{},"coverage.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:17",{"_index":1271,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:21",{"_index":1264,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:25",{"_index":1266,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:30",{"_index":1270,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:34",{"_index":1262,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:38",{"_index":1267,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/wallet.controller.ts",{"_index":1273,"title":{},"body":{"controllers/WalletController.html":{},"coverage.html":{}}}],["src/extensions/wallet/wallet.controller.ts:37",{"_index":1277,"title":{},"body":{"controllers/WalletController.html":{}}}],["src/extensions/wallet/wallet.controller.ts:48",{"_index":1280,"title":{},"body":{"controllers/WalletController.html":{}}}],["src/extensions/wallet/wallet.module.ts",{"_index":1300,"title":{},"body":{"modules/WalletModule.html":{}}}],["src/extensions/wallet/wallet.service.ts",{"_index":1303,"title":{},"body":{"injectables/WalletService.html":{},"coverage.html":{}}}],["src/extensions/wallet/wallet.service.ts:12",{"_index":1311,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/extensions/wallet/wallet.service.ts:28",{"_index":1314,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/extensions/wallet/wallet.service.ts:42",{"_index":1318,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/extensions/wallet/wallet.service.ts:7",{"_index":1308,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/main.ts",{"_index":1353,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["start",{"_index":519,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["started",{"_index":1398,"title":{"index.html":{}},"body":{"index.html":{}}}],["startopenapi",{"_index":1426,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1332,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":687,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["status",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/_BaseGroupException.html":{}}}],["status.dto",{"_index":636,"title":{},"body":{"controllers/FriendController.html":{}}}],["status.dto.ts",{"_index":835,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusDto.html":{},"coverage.html":{}}}],["status.dto.ts:6",{"_index":836,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusDto.html":{}}}],["status.enum",{"_index":344,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"classes/_BaseGroupException.html":{}}}],["status.enum.ts",{"_index":1381,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statusatob",{"_index":818,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["statusbtoa",{"_index":819,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["statuscode",{"_index":323,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["statuses",{"_index":711,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["statuses.dto",{"_index":634,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["statuses.dto.ts",{"_index":837,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{},"coverage.html":{}}}],["statuses.dto.ts:11",{"_index":846,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:14",{"_index":845,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:17",{"_index":844,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:5",{"_index":848,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:8",{"_index":847,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["stop",{"_index":521,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["strategy",{"_index":1074,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"miscellaneous/functions.html":{}}}],["sub",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["summary",{"_index":123,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["super",{"_index":1078,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1446,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1447,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1374,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":767,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["synchronize",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1355,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1354,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":475,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["targetgroupmember",{"_index":424,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["targetgroupmember.membershipstatus",{"_index":470,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["targetgroupmember?.membershipstatus",{"_index":425,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["targetuserid",{"_index":419,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["text",{"_index":39,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{},"classes/Profile.html":{}}}],["this._acceptfriendrequest(aid",{"_index":795,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this._getnormalandinverse(aid",{"_index":757,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this._removerelations(aid",{"_index":798,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this._sendfriendrequest(aid",{"_index":796,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this._setrelations",{"_index":787,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.accountrepository.findone",{"_index":224,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.save(account",{"_index":216,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountservice.create(createaccountdto",{"_index":126,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.findone(req.user.sub",{"_index":130,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.findonewithappleid(authdto.id",{"_index":313,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accountservice.findonewithdeviceid(authdto.id",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accountservice.findonewithfacebookid(authdto.id",{"_index":316,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accountservice.findonewithgoogleid(authdto.id",{"_index":310,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accountservice.update(req.user.sub",{"_index":131,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.appservice.gethello",{"_index":231,"title":{},"body":{"controllers/AppController.html":{}}}],["this.findone(id",{"_index":218,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.findorcreate(userid",{"_index":1325,"title":{},"body":{"injectables/WalletService.html":{}}}],["this.friendservice.add(req.user.sub",{"_index":662,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.block",{"_index":669,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.get",{"_index":1293,"title":{},"body":{"controllers/WalletController.html":{}}}],["this.friendservice.get(aid",{"_index":660,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.get(req.user.sub",{"_index":652,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.getall(aid",{"_index":656,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.getall(req.user.sub",{"_index":646,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.remove",{"_index":665,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.unblock",{"_index":672,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendshipcompositerepository.find",{"_index":762,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.friendshiprepository.delete",{"_index":786,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.friendshiprepository.findone",{"_index":756,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.friendshiprepository.save",{"_index":783,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.getentry(leaderboardid",{"_index":538,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["this.groupmemberrepository.count",{"_index":413,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.find",{"_index":441,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.findone",{"_index":399,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.remove(actinggroupmember",{"_index":463,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.remove(targetgroupmember",{"_index":476,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(actinggroupmember",{"_index":449,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(groupmember",{"_index":372,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(newban",{"_index":469,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(newmember",{"_index":438,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(targetgroupmember",{"_index":471,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.delete",{"_index":418,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.findandcount",{"_index":388,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.findone",{"_index":377,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.findone(groupid",{"_index":410,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.save(group",{"_index":367,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupservice.ban",{"_index":1012,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.create",{"_index":955,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.delete(groupid",{"_index":977,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findmany",{"_index":963,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findmembershipsofuser(userid",{"_index":982,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findone(groupid",{"_index":968,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getmember(groupid",{"_index":995,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getmembers(groupid",{"_index":991,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.invite",{"_index":1002,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.join(groupid",{"_index":999,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.leave(groupid",{"_index":1006,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.promotetoadmin",{"_index":1014,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.removemember(groupid",{"_index":1009,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.update",{"_index":972,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.leaderboardservice.getentries(leaderboardid",{"_index":1126,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["this.leaderboardservice.getentry(leaderboardid",{"_index":1121,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["this.leaderboardservice.updateentry",{"_index":1128,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["this.profilerepository.findone(userid",{"_index":1189,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.save(profile",{"_index":1195,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["this.profileservice.create(userid",{"_index":1220,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.findone(userid",{"_index":1224,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.update(userid",{"_index":1228,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.redisservice.getclient",{"_index":505,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["this.walletrepository.findone(userid",{"_index":1321,"title":{},"body":{"injectables/WalletService.html":{}}}],["this.walletrepository.save(newwallet",{"_index":1324,"title":{},"body":{"injectables/WalletService.html":{}}}],["this.walletrepository.save(wallet",{"_index":1327,"title":{},"body":{"injectables/WalletService.html":{}}}],["this.walletservice.findorcreate(userid",{"_index":1290,"title":{},"body":{"controllers/WalletController.html":{}}}],["through",{"_index":1430,"title":{},"body":{"index.html":{}}}],["throw",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["throws",{"_index":375,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["timestamp",{"_index":324,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["token",{"_index":127,"title":{},"body":{"controllers/AccountController.html":{}}}],["token)'})@apiokresponse({type",{"_index":90,"title":{},"body":{"controllers/AccountController.html":{}}}],["token.dto",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto.ts",{"_index":7,"title":{},"body":{"classes/AccessTokenDto.html":{},"coverage.html":{}}}],["token.dto.ts:5",{"_index":17,"title":{},"body":{"classes/AccessTokenDto.html":{}}}],["true",{"_index":41,"title":{},"body":{"classes/Account.html":{},"modules/AppModule.html":{},"classes/Group.html":{},"classes/Profile.html":{}}}],["true})@column({type",{"_index":38,"title":{},"body":{"classes/Account.html":{}}}],["try",{"_index":1219,"title":{},"body":{"controllers/ProfileController.html":{}}}],["trying",{"_index":446,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["two",{"_index":614,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"coverage.html":{}}}],["typeorm",{"_index":63,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":151,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{}}}],["typeormmodule.forfeature([account",{"_index":160,"title":{},"body":{"modules/AccountModule.html":{}}}],["typeormmodule.forfeature([friendship",{"_index":684,"title":{},"body":{"modules/FriendModule.html":{}}}],["typeormmodule.forfeature([group",{"_index":1059,"title":{},"body":{"modules/GroupModule.html":{}}}],["typeormmodule.forfeature([profile",{"_index":1236,"title":{},"body":{"modules/ProfileModule.html":{}}}],["typeormmodule.forfeature([wallet",{"_index":1302,"title":{},"body":{"modules/WalletModule.html":{}}}],["typeormmodule.forroot",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":1375,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["unban",{"_index":428,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["unblock",{"_index":581,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["unblock(aid",{"_index":740,"title":{},"body":{"injectables/FriendService.html":{}}}],["unblock(req",{"_index":625,"title":{},"body":{"controllers/FriendController.html":{}}}],["unblockfrienddto",{"_index":626,"title":{},"body":{"controllers/FriendController.html":{}}}],["unblockfrienddto.id",{"_index":673,"title":{},"body":{"controllers/FriendController.html":{}}}],["undefined",{"_index":809,"title":{},"body":{"classes/Friendship.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/MembershipsDto.html":{}}}],["undefined})@manytoone(undefined",{"_index":1042,"title":{},"body":{"classes/GroupMember.html":{}}}],["undefined})@onetomany(undefined",{"_index":854,"title":{},"body":{"classes/Group.html":{}}}],["unique",{"_index":65,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{}}}],["up",{"_index":1408,"title":{},"body":{"index.html":{}}}],["update",{"_index":75,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/_BaseGroupException.html":{}}}],["update(id",{"_index":198,"title":{},"body":{"injectables/AccountService.html":{}}}],["update(req",{"_index":94,"title":{},"body":{"controllers/AccountController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["update(userid",{"_index":1242,"title":{},"body":{"injectables/ProfileService.html":{}}}],["updateaccountdto",{"_index":95,"title":{"classes/UpdateAccountDto.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/UpdateAccountDto.html":{},"coverage.html":{}}}],["updateaccountdto.appleid",{"_index":220,"title":{},"body":{"injectables/AccountService.html":{}}}],["updateaccountdto.deviceid",{"_index":219,"title":{},"body":{"injectables/AccountService.html":{}}}],["updateaccountdto.googleid",{"_index":221,"title":{},"body":{"injectables/AccountService.html":{}}}],["updateaccountdto.language",{"_index":222,"title":{},"body":{"injectables/AccountService.html":{}}}],["updateaccountdto.location",{"_index":223,"title":{},"body":{"injectables/AccountService.html":{}}}],["updated",{"_index":537,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["updatedat",{"_index":36,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["updatedatecolumn",{"_index":62,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["updatedentrycount",{"_index":535,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["updateentry",{"_index":1090,"title":{},"body":{"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{}}}],["updateentry(leaderboardid",{"_index":1160,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["updateentry(req",{"_index":1108,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["updateentrydto",{"_index":1109,"title":{"classes/UpdateEntryDto.html":{}},"body":{"controllers/LeaderboardController.html":{},"classes/UpdateEntryDto.html":{},"coverage.html":{}}}],["updateentrydto.score",{"_index":1129,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["updategroupdto",{"_index":345,"title":{"classes/UpdateGroupDto.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/UpdateGroupDto.html":{},"classes/_BaseGroupException.html":{},"coverage.html":{}}}],["updategroupdto.inviteonly",{"_index":407,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["updategroupdto.name",{"_index":406,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["updatenormalcurrency",{"_index":1305,"title":{},"body":{"injectables/WalletService.html":{}}}],["updatenormalcurrency(userid",{"_index":1312,"title":{},"body":{"injectables/WalletService.html":{}}}],["updatepremiumcurrency",{"_index":1306,"title":{},"body":{"injectables/WalletService.html":{}}}],["updatepremiumcurrency(userid",{"_index":1317,"title":{},"body":{"injectables/WalletService.html":{}}}],["updateprofiledto",{"_index":1184,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updateprofiledto?.avatarurl",{"_index":1198,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["updateprofiledto?.displayname",{"_index":1197,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["url",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"modules/LeaderboardModule.html":{}}}],["used",{"_index":1436,"title":{},"body":{"index.html":{}}}],["usefilters",{"_index":629,"title":{},"body":{"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["usefilters(groupexceptionfilter",{"_index":953,"title":{},"body":{"controllers/GroupController.html":{}}}],["usefilters(leaderboardexceptionfilter",{"_index":1119,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["usefilters(new",{"_index":648,"title":{},"body":{"controllers/FriendController.html":{}}}],["useguards",{"_index":100,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["useguards(jwtauthguard",{"_index":128,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["user",{"_index":402,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["user'})@apiokresponse({type",{"_index":594,"title":{},"body":{"controllers/FriendController.html":{},"controllers/LeaderboardController.html":{}}}],["user'})@apiparam({name",{"_index":908,"title":{},"body":{"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["user'})@useguards(jwtauthguard)@apibearerauth()@get('me",{"_index":1207,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user'})@useguards(jwtauthguard)@apibearerauth()@patch('me",{"_index":1211,"title":{},"body":{"controllers/ProfileController.html":{}}}],["userid",{"_index":439,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["userid'})@apibearerauth()@useguards(jwtauthguard)@get(':userid",{"_index":1209,"title":{},"body":{"controllers/ProfileController.html":{}}}],["userid'})@apibearerauth()@useguards(jwtauthguard)@usefilters(leaderboardexceptionfilter)@get(':leaderboardid/:userid",{"_index":1102,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["userid'})@apicreatedresponse({type",{"_index":915,"title":{},"body":{"controllers/GroupController.html":{}}}],["userid'})@apinocontentresponse()@apibadrequestresponse({type",{"_index":929,"title":{},"body":{"controllers/GroupController.html":{}}}],["userid'})@apiokresponse({type",{"_index":875,"title":{},"body":{"controllers/GroupController.html":{}}}],["users",{"_index":657,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{}}}],["users'})@apiokresponse({type",{"_index":615,"title":{},"body":{"controllers/FriendController.html":{}}}],["uuid",{"_index":701,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["valid",{"_index":1083,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate",{"_index":1068,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1070,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["value",{"_index":842,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{},"controllers/LeaderboardController.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":394,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["variables",{"_index":1413,"title":{},"body":{"index.html":{}}}],["view.entity",{"_index":682,"title":{},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["view.entity.ts",{"_index":817,"title":{},"body":{"classes/FriendshipComposite.html":{},"coverage.html":{}}}],["view.entity.ts:17",{"_index":821,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["view.entity.ts:20",{"_index":822,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["view.entity.ts:23",{"_index":823,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["view.entity.ts:26",{"_index":824,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["viewcolumn",{"_index":820,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["viewed",{"_index":1443,"title":{},"body":{"index.html":{}}}],["viewentity",{"_index":825,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["void",{"_index":1027,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["wallet",{"_index":1258,"title":{"classes/Wallet.html":{}},"body":{"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"coverage.html":{}}}],["wallet.controller",{"_index":1301,"title":{},"body":{"modules/WalletModule.html":{}}}],["wallet.normalcurrency",{"_index":1326,"title":{},"body":{"injectables/WalletService.html":{}}}],["wallet.premiumcurrency",{"_index":1328,"title":{},"body":{"injectables/WalletService.html":{}}}],["wallet.service",{"_index":1283,"title":{},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{}}}],["wallet/wallet.module",{"_index":571,"title":{},"body":{"modules/ExtensionsModule.html":{}}}],["walletcontroller",{"_index":1272,"title":{"controllers/WalletController.html":{}},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{},"coverage.html":{}}}],["walletmodule",{"_index":568,"title":{"modules/WalletModule.html":{}},"body":{"modules/ExtensionsModule.html":{},"modules/WalletModule.html":{},"modules.html":{},"overview.html":{}}}],["walletrepository",{"_index":1309,"title":{},"body":{"injectables/WalletService.html":{}}}],["wallets",{"_index":1274,"title":{},"body":{"controllers/WalletController.html":{}}}],["walletservice",{"_index":1282,"title":{"injectables/WalletService.html":{}},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"coverage.html":{},"overview.html":{}}}],["wallet})@apibearerauth()@useguards(jwtauthguard)@get('me",{"_index":1276,"title":{},"body":{"controllers/WalletController.html":{}}}],["wallet})@apiforbiddenresponse()@apibearerauth()@useguards(jwtauthguard)@get(':userid",{"_index":1279,"title":{},"body":{"controllers/WalletController.html":{}}}],["way",{"_index":633,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["withscores",{"_index":531,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["world",{"_index":254,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":893,"title":{},"body":{"controllers/GroupController.html":{},"injectables/LeaderboardService.html":{}}}],["zoom",{"_index":145,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccessTokenDto.html":{"url":"classes/AccessTokenDto.html","title":"class - AccessTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccessTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/dto/access-token.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accessToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/access-token.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AccessTokenDto {\n  @ApiProperty()\n  accessToken: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Account.html":{"url":"classes/Account.html","title":"class - Account","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/entities/account.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                appleId\n                            \n                            \n                                createdAt\n                            \n                            \n                                deviceId\n                            \n                            \n                                    Optional\n                                facebookId\n                            \n                            \n                                    Optional\n                                googleId\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                language\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                metadata\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            appleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Index({unique: true})@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deviceId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Index({unique: true})@Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            facebookId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Index({unique: true})@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            googleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Index({unique: true})@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            language\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            metadata\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'jsonb', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:55\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  Index,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class Account {\n  @ApiProperty()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty()\n  @Index({ unique: true })\n  @Column({ type: 'text' })\n  deviceId: string;\n\n  @ApiProperty()\n  @Index({ unique: true })\n  @Column({ type: 'text', nullable: true })\n  googleId?: string;\n\n  @ApiProperty()\n  @Index({ unique: true })\n  @Column({ type: 'text', nullable: true })\n  appleId?: string;\n\n  @ApiProperty()\n  @Index({ unique: true })\n  @Column({ type: 'text', nullable: true })\n  facebookId?: string;\n\n  @ApiProperty()\n  @Column({ type: 'text', nullable: true })\n  location?: string;\n\n  @ApiProperty()\n  @Column({ type: 'text', nullable: true })\n  language?: string;\n\n  @ApiProperty()\n  @Column({ type: 'jsonb', nullable: true })\n  metadata;\n\n  @ApiProperty()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ApiProperty()\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AccountController.html":{"url":"controllers/AccountController.html","title":"controller - AccountController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(createAccountDto: CreateAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new account', description: 'Create new account'})@ApiCreatedResponse({type: Account})@Post()\n                \n            \n\n            \n                \n                    Defined in src/core/account/account.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get own account', description: 'Get account info (derives account from token)'})@ApiOkResponse({type: Account})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/core/account/account.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, updateAccountDto: UpdateAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update own account', description: 'Update account info (derives account from token)'})@ApiOkResponse({type: Account})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Patch()\n                \n            \n\n            \n                \n                    Defined in src/core/account/account.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  UseGuards,\n  Request,\n  Patch,\n} from '@nestjs/common';\nimport { AccountService } from './account.service';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Account } from './entities/account.entity';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\n\n@ApiTags('account')\n@Controller('account')\nexport class AccountController {\n  constructor(private readonly accountService: AccountService) {}\n\n  @ApiOperation({\n    summary: 'Create new account',\n    description: 'Create new account',\n  })\n  @ApiCreatedResponse({\n    type: Account,\n  })\n  @Post()\n  create(@Body() createAccountDto: CreateAccountDto): Promise {\n    return this.accountService.create(createAccountDto);\n  }\n\n  @ApiOperation({\n    summary: 'Get own account',\n    description: 'Get account info (derives account from token)',\n  })\n  @ApiOkResponse({ type: Account })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async find(@Request() req): Promise {\n    return this.accountService.findOne(req.user.sub);\n  }\n\n  @ApiOperation({\n    summary: 'Update own account',\n    description: 'Update account info (derives account from token)',\n  })\n  @ApiOkResponse({ type: Account })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch()\n  async update(\n    @Request() req,\n    @Body() updateAccountDto: UpdateAccountDto,\n  ): Promise {\n    return this.accountService.update(req.user.sub, updateAccountDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountModule.html":{"url":"modules/AccountModule.html","title":"module - AccountModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_exports\n\n\n\ncluster_AccountModule_providers\n\n\n\n\nAccountService \n\nAccountService \n\n\n\nAccountModule\n\nAccountModule\n\nAccountService  -->\n\nAccountModule->AccountService \n\n\n\n\n\nAccountService\n\nAccountService\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAccountModule -->\n\nJwtStrategy->AccountModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/account/account.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountService } from './account.service';\nimport { AccountController } from './account.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Account } from './entities/account.entity';\nimport { AuthController } from './auth.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Account]),\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.SECRET ?? 'secretsecretigotasecret',\n      signOptions: { expiresIn: '2h' },\n    }),\n  ],\n  controllers: [AccountController, AuthController],\n  providers: [AccountService, JwtStrategy],\n  exports: [AccountService],\n})\nexport class AccountModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/account.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneWithAppleId\n                            \n                            \n                                    Async\n                                findOneWithDeviceId\n                            \n                            \n                                    Async\n                                findOneWithFacebookId\n                            \n                            \n                                    Async\n                                findOneWithGoogleId\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/account/account.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createAccountDto: CreateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:18\n                \n            \n\n\n            \n                \n                    Create an account object with given createAccountDto\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:50\n                \n            \n\n\n            \n                \n                    Find account by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneWithAppleId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithAppleId(appleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:66\n                \n            \n\n\n            \n                \n                    Find account by apple id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    appleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneWithDeviceId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithDeviceId(deviceId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:58\n                \n            \n\n\n            \n                \n                    Find account by device id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    deviceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneWithFacebookId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithFacebookId(facebookId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:81\n                \n            \n\n\n            \n                \n                    Find account by facebook id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    facebookId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneWithGoogleId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithGoogleId(googleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:74\n                \n            \n\n\n            \n                \n                    Find account by google id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    googleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateAccountDto: UpdateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:33\n                \n            \n\n\n            \n                \n                    Update existing account\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Account } from './entities/account.entity';\n\n@Injectable()\nexport class AccountService {\n  constructor(\n    @InjectRepository(Account) private accountRepository: Repository,\n  ) {}\n\n  /**\n   * Create an account object with given createAccountDto\n   * @param createAccountDto\n   */\n  async create(createAccountDto: CreateAccountDto): Promise {\n    const account = new Account();\n    account.deviceId = createAccountDto.deviceId;\n    account.appleId = createAccountDto.appleId;\n    account.googleId = createAccountDto.googleId;\n    account.location = createAccountDto.location;\n    account.language = createAccountDto.language;\n    return this.accountRepository.save(account);\n  }\n\n  /**\n   * Update existing account\n   * @param id\n   * @param updateAccountDto\n   */\n  async update(\n    id: string,\n    updateAccountDto: UpdateAccountDto,\n  ): Promise {\n    const account = await this.findOne(id);\n    account.deviceId = updateAccountDto.deviceId ?? account.deviceId;\n    account.appleId = updateAccountDto.appleId ?? account.appleId;\n    account.googleId = updateAccountDto.googleId ?? account.googleId;\n    account.language = updateAccountDto.language ?? account.language;\n    account.location = updateAccountDto.location ?? account.location;\n    return this.accountRepository.save(account);\n  }\n\n  /**\n   * Find account by id\n   * @param id\n   */\n  async findOne(id: string): Promise {\n    return this.accountRepository.findOne({ id: id });\n  }\n\n  /**\n   * Find account by device id\n   * @param deviceId\n   */\n  async findOneWithDeviceId(deviceId: string): Promise {\n    return this.accountRepository.findOne({ deviceId: deviceId });\n  }\n\n  /**\n   * Find account by apple id\n   * @param appleId\n   */\n  async findOneWithAppleId(appleId: string): Promise {\n    return this.accountRepository.findOne({ appleId: appleId });\n  }\n\n  /**\n   * Find account by google id\n   * @param googleId\n   */\n  async findOneWithGoogleId(googleId: string): Promise {\n    return this.accountRepository.findOne({ googleId: googleId });\n  }\n  /**\n   * Find account by facebook id\n   * @param facebookId\n   */\n  async findOneWithFacebookId(facebookId: string): Promise {\n    return this.accountRepository.findOne({ facebookId: facebookId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nExtensionsModule\n\nExtensionsModule\n\nAppModule -->\n\nExtensionsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CoreModule\n                        \n                        \n                            ExtensionsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CoreModule } from './core/core.module';\nimport { ExtensionsModule } from './extensions/extensions.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      url:\n        process.env.DATABASE_URL ||\n        'postgresql://postgres:password@localhost:5432/caterva',\n      entities: ['dist/**/*.entity{.ts,.js}'],\n      synchronize: true,\n      logging: true,\n    }),\n    CoreModule,\n    ExtensionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authWithAppleId\n                            \n                            \n                                    Async\n                                authWithDeviceId\n                            \n                            \n                                    Async\n                                authWithFacebookId\n                            \n                            \n                                    Async\n                                authWithGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authWithAppleId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authWithAppleId(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Authenticate account with Apple ID', summary: 'Auth with appleId'})@ApiOkResponse({type: AccessTokenDto})@ApiBadRequestResponse()@Post('apple')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/core/account/auth.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authWithDeviceId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authWithDeviceId(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Authenticate account with Device ID', summary: 'Auth with deviceId'})@ApiOkResponse({type: AccessTokenDto})@ApiBadRequestResponse()@Post('device')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/core/account/auth.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authWithFacebookId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authWithFacebookId(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Authenticate account with Facebook ID', summary: 'Auth with facebookId'})@ApiOkResponse({type: AccessTokenDto})@ApiBadRequestResponse()@Post('facebook')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/core/account/auth.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authWithGoogleId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authWithGoogleId(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({description: 'Authenticate account with Google ID', summary: 'Auth with googleId'})@ApiOkResponse({type: AccessTokenDto})@ApiBadRequestResponse()@Post('google')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/core/account/auth.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  HttpException,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { AccountService } from './account.service';\nimport { AuthDto } from './dto/auth.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { Account } from './entities/account.entity';\nimport {\n  ApiBadRequestResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AccessTokenDto } from './dto/access-token.dto';\n\nfunction _generateJwt(jwtService: JwtService, account: Account): string {\n  const payload = {\n    sub: account.id,\n  };\n  return jwtService.sign(payload);\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  @ApiOperation({\n    description: 'Authenticate account with Device ID',\n    summary: 'Auth with deviceId',\n  })\n  @ApiOkResponse({ type: AccessTokenDto })\n  @ApiBadRequestResponse()\n  @Post('device')\n  @HttpCode(HttpStatus.OK)\n  async authWithDeviceId(@Body() authDto: AuthDto): Promise {\n    const account = await this.accountService.findOneWithDeviceId(authDto.id);\n    if (account == null) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Authentication failed',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return { accessToken: _generateJwt(this.jwtService, account) };\n  }\n\n  @ApiOperation({\n    description: 'Authenticate account with Google ID',\n    summary: 'Auth with googleId',\n  })\n  @ApiOkResponse({ type: AccessTokenDto })\n  @ApiBadRequestResponse()\n  @Post('google')\n  @HttpCode(HttpStatus.OK)\n  async authWithGoogleId(@Body() authDto: AuthDto): Promise {\n    const account = await this.accountService.findOneWithGoogleId(authDto.id);\n    if (account == null) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Authentication failed',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return { accessToken: _generateJwt(this.jwtService, account) };\n  }\n\n  @ApiOperation({\n    description: 'Authenticate account with Apple ID',\n    summary: 'Auth with appleId',\n  })\n  @ApiOkResponse({ type: AccessTokenDto })\n  @ApiBadRequestResponse()\n  @Post('apple')\n  @HttpCode(HttpStatus.OK)\n  async authWithAppleId(@Body() authDto: AuthDto): Promise {\n    const account = await this.accountService.findOneWithAppleId(authDto.id);\n    if (account == null) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Authentication failed',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return { accessToken: _generateJwt(this.jwtService, account) };\n  }\n\n  @ApiOperation({\n    description: 'Authenticate account with Facebook ID',\n    summary: 'Auth with facebookId',\n  })\n  @ApiOkResponse({ type: AccessTokenDto })\n  @ApiBadRequestResponse()\n  @Post('facebook')\n  @HttpCode(HttpStatus.OK)\n  async authWithFacebookId(@Body() authDto: AuthDto): Promise {\n    const account = await this.accountService.findOneWithFacebookId(authDto.id);\n    if (account == null) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Authentication failed',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return { accessToken: _generateJwt(this.jwtService, account) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/dto/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/auth.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthDto {\n  @ApiProperty()\n  id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestDto.html":{"url":"classes/BadRequestDto.html","title":"class - BadRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/bad-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                path\n                            \n                            \n                                statusCode\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ErrorDto\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HttpStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ErrorDto {\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  message: string;\n}\n\nexport class BadRequestDto {\n  @ApiProperty()\n  statusCode: HttpStatus;\n\n  @ApiProperty()\n  timestamp: Date;\n\n  @ApiProperty()\n  path: string;\n\n  @ApiProperty()\n  error: ErrorDto;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BannedFromGroupError.html":{"url":"classes/BannedFromGroupError.html","title":"class - BannedFromGroupError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BannedFromGroupError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotBanError.html":{"url":"classes/CannotBanError.html","title":"class - CannotBanError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotBanError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotDeleteGroupError.html":{"url":"classes/CannotDeleteGroupError.html","title":"class - CannotDeleteGroupError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotDeleteGroupError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotKickError.html":{"url":"classes/CannotKickError.html","title":"class - CannotKickError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotKickError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotLeaveGroupError.html":{"url":"classes/CannotLeaveGroupError.html","title":"class - CannotLeaveGroupError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotLeaveGroupError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_CoreModule_exports\n\n\n\n\nAccountModule\n\nAccountModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nAccountModule->CoreModule\n\n\n\n\n\nFriendModule\n\nFriendModule\n\nCoreModule -->\n\nFriendModule->CoreModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nCoreModule -->\n\nGroupModule->CoreModule\n\n\n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nCoreModule -->\n\nLeaderboardModule->CoreModule\n\n\n\n\n\nAccountModule \n\nAccountModule \n\nAccountModule  -->\n\nCoreModule->AccountModule \n\n\n\n\n\nFriendModule \n\nFriendModule \n\nFriendModule  -->\n\nCoreModule->FriendModule \n\n\n\n\n\nGroupModule \n\nGroupModule \n\nGroupModule  -->\n\nCoreModule->GroupModule \n\n\n\n\n\nLeaderboardModule \n\nLeaderboardModule \n\nLeaderboardModule  -->\n\nCoreModule->LeaderboardModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AccountModule\n                        \n                        \n                            FriendModule\n                        \n                        \n                            GroupModule\n                        \n                        \n                            LeaderboardModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountModule\n                        \n                        \n                            FriendModule\n                        \n                        \n                            GroupModule\n                        \n                        \n                            LeaderboardModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountModule } from './account/account.module';\nimport { FriendModule } from './friend/friend.module';\nimport { GroupModule } from './group/group.module';\nimport { LeaderboardModule } from './leaderboard/leaderboard.module';\n\n@Module({\n  imports: [AccountModule, FriendModule, GroupModule, LeaderboardModule],\n  exports: [AccountModule, FriendModule, GroupModule, LeaderboardModule],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CouldNotUpdateLeaderboardEntryError.html":{"url":"classes/CouldNotUpdateLeaderboardEntryError.html","title":"class - CouldNotUpdateLeaderboardEntryError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CouldNotUpdateLeaderboardEntryError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseLeaderboardException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\n\nexport class _BaseLeaderboardException extends Error {}\nexport class LeaderboardEntryNotFoundError extends _BaseLeaderboardException {}\nexport class CouldNotUpdateLeaderboardEntryError extends _BaseLeaderboardException {}\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(private readonly redisService: RedisService) {}\n\n  async getEntry(\n    leaderboardId: string,\n    userId: string,\n  ): Promise {\n    const client = this.redisService.getClient();\n    const [score, rank] = await Promise.all([\n      client.zscore(leaderboardId, userId),\n      client.zrevrank(leaderboardId, userId),\n    ]);\n    if (score == null || rank == null) {\n      throw new LeaderboardEntryNotFoundError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" was not found`,\n      );\n    }\n    return {\n      userId: userId,\n      score: Number(score),\n      rank: Number(rank),\n    };\n  }\n\n  async getEntries(\n    leaderboardId: string,\n    options?: {\n      offset: string;\n      limit: string;\n    },\n  ): Promise {\n    const client = this.redisService.getClient();\n\n    let start = 0;\n    let stop = -1;\n\n    let normalizedOffset = null;\n    let normalizedLimit = null;\n\n    if (options.offset && isFinite(Number(options.offset))) {\n      normalizedOffset = Number(options.offset);\n      start = normalizedOffset;\n    }\n    if (options.limit && isFinite(Number(options.limit))) {\n      normalizedLimit = Number(options.limit);\n      stop = start + Number(options.limit) - 1;\n    }\n\n    const result = await client.zrevrange(\n      leaderboardId,\n      start,\n      stop,\n      'WITHSCORES',\n    );\n\n    // construct entries array\n    const entries: LeaderboardEntryDto[] = [];\n    for (let i = 0; i  {\n    const client = this.redisService.getClient();\n\n    const updatedEntryCount = await client.zadd(leaderboardId, score, userId);\n    if (updatedEntryCount !== 1) {\n      throw new CouldNotUpdateLeaderboardEntryError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" could not be updated with score \"${score}\"`,\n      );\n    }\n\n    return this.getEntry(leaderboardId, userId);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDto.html":{"url":"classes/CreateAccountDto.html","title":"class - CreateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/dto/create-account.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                appleId\n                            \n                            \n                                deviceId\n                            \n                            \n                                    Optional\n                                facebookId\n                            \n                            \n                                    Optional\n                                googleId\n                            \n                            \n                                    Optional\n                                language\n                            \n                            \n                                    Optional\n                                location\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            appleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deviceId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            facebookId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            googleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            language\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateAccountDto {\n  @ApiProperty()\n  deviceId: string;\n\n  @ApiPropertyOptional()\n  appleId?: string;\n\n  @ApiPropertyOptional()\n  googleId?: string;\n\n  @ApiPropertyOptional()\n  facebookId?: string;\n\n  @ApiPropertyOptional()\n  location?: string;\n\n  @ApiPropertyOptional()\n  language?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGroupDto.html":{"url":"classes/CreateGroupDto.html","title":"class - CreateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/create-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                inviteOnly\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            inviteOnly\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/create-group.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/create-group.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateGroupDto {\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  inviteOnly?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileDto.html":{"url":"classes/CreateProfileDto.html","title":"class - CreateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/dto/create-profile.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                displayName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            avatarUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/dto/create-profile.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({minLength: 3})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/dto/create-profile.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateProfileDto {\n  @ApiProperty({ minLength: 3 })\n  displayName: string;\n\n  @ApiPropertyOptional()\n  avatarUrl?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorDto.html":{"url":"classes/ErrorDto.html","title":"class - ErrorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/bad-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ErrorDto {\n  @ApiProperty()\n  name: string;\n\n  @ApiProperty()\n  message: string;\n}\n\nexport class BadRequestDto {\n  @ApiProperty()\n  statusCode: HttpStatus;\n\n  @ApiProperty()\n  timestamp: Date;\n\n  @ApiProperty()\n  path: string;\n\n  @ApiProperty()\n  error: ErrorDto;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExtensionsModule.html":{"url":"modules/ExtensionsModule.html","title":"module - ExtensionsModule","body":"\n                   \n\n\n\n\n    Modules\n    ExtensionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExtensionsModule\n\n\n\ncluster_ExtensionsModule_imports\n\n\n\n\nProfileModule\n\nProfileModule\n\n\n\nExtensionsModule\n\nExtensionsModule\n\nExtensionsModule -->\n\nProfileModule->ExtensionsModule\n\n\n\n\n\nWalletModule\n\nWalletModule\n\nExtensionsModule -->\n\nWalletModule->ExtensionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/extensions/extensions.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ProfileModule\n                        \n                        \n                            WalletModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileModule } from './profile/profile.module';\nimport { WalletModule } from './wallet/wallet.module';\n\n@Module({\n  imports: [ProfileModule, WalletModule],\n})\nexport class ExtensionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FriendController.html":{"url":"controllers/FriendController.html","title":"controller - FriendController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FriendController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/friend.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                friends\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                block\n                            \n                            \n                                    Async\n                                findRelationOfMeAndOther\n                            \n                            \n                                    Async\n                                findRelations\n                            \n                            \n                                    Async\n                                findRelationsOfMe\n                            \n                            \n                                    Async\n                                findRelationWithOther\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                unblock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(req, addFriendDto: ReferenceFriendDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Send or accept friend request'})@ApiCreatedResponse({type: FriendshipTwoWayRelationStatusDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('me')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addFriendDto\n                                    \n                                                ReferenceFriendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            block\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    block(req, blockFriendDto: ReferenceFriendDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Block user'})@ApiOkResponse({type: FriendshipTwoWayRelationStatusDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('me/block')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    blockFriendDto\n                                    \n                                                ReferenceFriendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRelationOfMeAndOther\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRelationOfMeAndOther(req, otherId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find relation of this user and any other user'})@ApiOkResponse({type: FriendshipTwoWayRelationStatusDto})@ApiParam({name: 'otherId'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('me/:otherId')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otherId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRelations(req, aId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find relations of any user'})@ApiOkResponse({type: FriendshipTwoWayRelationStatusesDto})@ApiResponse({type: FriendshipTwoWayRelationStatusesDto, status: 200})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':aId')\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRelationsOfMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRelationsOfMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find relations of this user'})@ApiOkResponse({type: FriendshipTwoWayRelationStatusesDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRelationWithOther\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRelationWithOther(req, aId, bId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find relation of any two users'})@ApiOkResponse({type: FriendshipTwoWayRelationStatusDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':aId/:bId')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(req, removeFriendDto: ReferenceFriendDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Remove friendship or cancel friend request'})@ApiOkResponse({type: FriendshipTwoWayRelationStatusDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete('me')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    removeFriendDto\n                                    \n                                                ReferenceFriendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unblock\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unblock(req, unblockFriendDto: ReferenceFriendDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Unblock user'})@ApiOkResponse({type: FriendshipTwoWayRelationStatusDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('me/unblock')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unblockFriendDto\n                                    \n                                                ReferenceFriendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  UseGuards,\n  Request,\n  Param,\n  Post,\n  Body,\n  Delete,\n  UseFilters,\n} from '@nestjs/common';\nimport { FriendService } from './friend.service';\nimport { FriendshipTwoWayRelationStatusesDto } from './dto/friendship-two-way-relation-statuses.dto';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport { FriendshipTwoWayRelationStatusDto } from './dto/friendship-two-way-relation-status.dto';\nimport { ReferenceFriendDto } from './dto/reference-friend.dto';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { SelfReferenceErrorFilter } from './self-reference-error.filter';\n\n@ApiTags('friends')\n@Controller('friends')\nexport class FriendController {\n  constructor(private readonly friendService: FriendService) {}\n\n  @ApiOperation({\n    summary: 'Find relations of this user',\n  })\n  @ApiOkResponse({ type: FriendshipTwoWayRelationStatusesDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('me')\n  async findRelationsOfMe(\n    @Request() req,\n  ): Promise {\n    return this.friendService.getAll(req.user.sub);\n  }\n\n  @ApiOperation({\n    summary: 'Find relation of this user and any other user',\n  })\n  @ApiOkResponse({ type: FriendshipTwoWayRelationStatusDto })\n  @ApiParam({ name: 'otherId' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('me/:otherId')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async findRelationOfMeAndOther(\n    @Request() req,\n    @Param('otherId') otherId,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.get(req.user.sub, otherId);\n    return dto;\n  }\n\n  @ApiOperation({\n    summary: 'Find relations of any user',\n  })\n  @ApiOkResponse({ type: FriendshipTwoWayRelationStatusesDto })\n  @ApiResponse({\n    type: FriendshipTwoWayRelationStatusesDto,\n    status: 200,\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':aId')\n  async findRelations(\n    @Request() req,\n    @Param('aId') aId,\n  ): Promise {\n    return this.friendService.getAll(aId);\n  }\n\n  @ApiOperation({\n    summary: 'Find relation of any two users',\n  })\n  @ApiOkResponse({ type: FriendshipTwoWayRelationStatusDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':aId/:bId')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async findRelationWithOther(\n    @Request() req,\n    @Param('aId') aId,\n    @Param('bId') bId,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.get(aId, bId);\n    return dto;\n  }\n\n  @ApiOperation({\n    summary: 'Send or accept friend request',\n  })\n  @ApiCreatedResponse({ type: FriendshipTwoWayRelationStatusDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('me')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async add(\n    @Request() req,\n    @Body() addFriendDto: ReferenceFriendDto,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.add(req.user.sub, addFriendDto.id);\n    return dto;\n  }\n\n  @ApiOperation({\n    summary: 'Remove friendship or cancel friend request',\n  })\n  @ApiOkResponse({ type: FriendshipTwoWayRelationStatusDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete('me')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async remove(\n    @Request() req,\n    @Body() removeFriendDto: ReferenceFriendDto,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.remove(\n      req.user.sub,\n      removeFriendDto.id,\n    );\n    return dto;\n  }\n\n  @ApiOperation({\n    summary: 'Block user',\n  })\n  @ApiOkResponse({ type: FriendshipTwoWayRelationStatusDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('me/block')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async block(\n    @Request() req,\n    @Body() blockFriendDto: ReferenceFriendDto,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.block(\n      req.user.sub,\n      blockFriendDto.id,\n    );\n    return dto;\n  }\n\n  @ApiOperation({\n    summary: 'Unblock user',\n  })\n  @ApiOkResponse({ type: FriendshipTwoWayRelationStatusDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('me/unblock')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async unblock(\n    @Request() req,\n    @Body() unblockFriendDto: ReferenceFriendDto,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.unblock(\n      req.user.sub,\n      unblockFriendDto.id,\n    );\n    return dto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FriendModule.html":{"url":"modules/FriendModule.html","title":"module - FriendModule","body":"\n                   \n\n\n\n\n    Modules\n    FriendModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FriendModule\n\n\n\ncluster_FriendModule_exports\n\n\n\ncluster_FriendModule_providers\n\n\n\n\nFriendService \n\nFriendService \n\n\n\nFriendModule\n\nFriendModule\n\nFriendService  -->\n\nFriendModule->FriendService \n\n\n\n\n\nFriendService\n\nFriendService\n\nFriendModule -->\n\nFriendService->FriendModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/friend/friend.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FriendService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FriendController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FriendService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Friendship } from './entities/friendship.entity';\nimport { FriendshipComposite } from './entities/friendship-composite-view.entity';\nimport { FriendService } from './friend.service';\nimport { FriendController } from './friend.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Friendship, FriendshipComposite])],\n  providers: [FriendService],\n  controllers: [FriendController],\n  exports: [FriendService],\n})\nexport class FriendModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FriendService.html":{"url":"injectables/FriendService.html","title":"injectable - FriendService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FriendService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/friend.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _acceptFriendRequest\n                            \n                            \n                                    Private\n                                    Static\n                                _deriveTwoWayRelationStatus\n                            \n                            \n                                    Private\n                                    Async\n                                _getNormalAndInverse\n                            \n                            \n                                    Private\n                                    Async\n                                _removeRelations\n                            \n                            \n                                    Async\n                                _sendFriendRequest\n                            \n                            \n                                    Private\n                                    Async\n                                _setRelations\n                            \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                block\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                unblock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(friendshipRepository: Repository, friendshipCompositeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/friend/friend.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        friendshipRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        friendshipCompositeRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            _acceptFriendRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _acceptFriendRequest(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:197\n                \n            \n\n\n            \n                \n                    Set two-way relation as friends\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _deriveTwoWayRelationStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _deriveTwoWayRelationStatus(normalRelationStatus: FriendshipOneWayRelationStatus, inverseRelationStatus: FriendshipOneWayRelationStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:26\n                \n            \n\n\n            \n                \n                    Derive the two-way relation status given the normal and inverse one-way relation statuses\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    normalRelationStatus\n                                    \n                                                FriendshipOneWayRelationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        One-way relation status from a to b\n\n                                    \n                                \n                                \n                                    inverseRelationStatus\n                                    \n                                                FriendshipOneWayRelationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        One-way relation status from b to a\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FriendshipTwoWayRelationStatus | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            _getNormalAndInverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getNormalAndInverse(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:69\n                \n            \n\n\n            \n                \n                    Get both one-way relation statuses from a to b and from b to a\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            _removeRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _removeRelations(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:168\n                \n            \n\n\n            \n                \n                    Remove all relations between a and b\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            _sendFriendRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _sendFriendRequest(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:180\n                \n            \n\n\n            \n                \n                    Set both one-way relations from a to b represent a friend request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            _setRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _setRelations(aId: string, bId: string, normalStatus: FriendshipOneWayRelationStatus, inverseStatus: FriendshipOneWayRelationStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:136\n                \n            \n\n\n            \n                \n                    Individually set relations between two users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                                \n                                    normalStatus\n                                    \n                                                FriendshipOneWayRelationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        One way friendship relation from a to b\n\n                                    \n                                \n                                \n                                    inverseStatus\n                                    \n                                                FriendshipOneWayRelationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        One way friendship relation from b to a\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:214\n                \n            \n\n\n            \n                \n                    Send friend request from a to b, or accept friend request from b to a\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            block\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    block(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:277\n                \n            \n\n\n            \n                \n                    Block b for a\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:84\n                \n            \n\n\n            \n                \n                    Get the one-way relation status of a to b\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for the acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for the referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(aId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:96\n                \n            \n\n\n            \n                \n                    Get all two-way relation statuses of a user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:247\n                \n            \n\n\n            \n                \n                    Remove friendship of a and b or discard friend request from b\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unblock\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unblock(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:311\n                \n            \n\n\n            \n                \n                    Unblock b for a\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Friendship } from './entities/friendship.entity';\nimport { Repository } from 'typeorm';\nimport { FriendshipComposite } from './entities/friendship-composite-view.entity';\nimport { FriendshipOneWayRelationStatus } from './enums/friendship-one-way-relation-status.enum';\nimport { FriendshipTwoWayRelationStatus } from './enums/friendship-two-way-relation-status.enum';\nimport { FriendshipTwoWayRelationStatusesDto } from './dto/friendship-two-way-relation-statuses.dto';\n\nexport class SelfReferenceError extends Error {}\n\n@Injectable()\nexport class FriendService {\n  constructor(\n    @InjectRepository(Friendship)\n    private friendshipRepository: Repository,\n    @InjectRepository(FriendshipComposite)\n    private friendshipCompositeRepository: Repository,\n  ) {}\n\n  /**\n   * Derive the two-way relation status given the normal and inverse one-way relation statuses\n   * @param normalRelationStatus One-way relation status from a to b\n   * @param inverseRelationStatus One-way relation status from b to a\n   */\n  private static _deriveTwoWayRelationStatus(\n    normalRelationStatus: FriendshipOneWayRelationStatus,\n    inverseRelationStatus: FriendshipOneWayRelationStatus,\n  ): FriendshipTwoWayRelationStatus | null {\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.Ok &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.Ok\n    ) {\n      return FriendshipTwoWayRelationStatus.Friends;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.Ok &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.NoAction\n    ) {\n      return FriendshipTwoWayRelationStatus.SentRequest;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.NoAction &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.Ok\n    ) {\n      return FriendshipTwoWayRelationStatus.ReceivedRequest;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.DidBlock &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.GotBlocked\n    ) {\n      return FriendshipTwoWayRelationStatus.BlockedByYou;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.GotBlocked &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.DidBlock\n    ) {\n      return FriendshipTwoWayRelationStatus.BlockedByOther;\n    }\n    // no complete relation\n    return null;\n  }\n\n  /**\n   * Get both one-way relation statuses from a to b and from b to a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  private async _getNormalAndInverse(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return Promise.all([\n      this.friendshipRepository.findOne({ aId: aId, bId: bId }),\n      this.friendshipRepository.findOne({ aId: bId, bId: aId }),\n    ]);\n  }\n\n  /**\n   * Get the one-way relation status of a to b\n   * @param aId Account UUID for the acting user\n   * @param bId Account UUID for the referred user\n   */\n  async get(aId: string, bId: string): Promise {\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    return FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n  }\n\n  /**\n   * Get all two-way relation statuses of a user\n   * @param aId\n   */\n  async getAll(aId: string): Promise {\n    const dto = new FriendshipTwoWayRelationStatusesDto();\n    const friendshipComposites = await this.friendshipCompositeRepository.find({\n      where: { aId: aId },\n    });\n    for (const friendshipComposite of friendshipComposites) {\n      const finalStatus = FriendService._deriveTwoWayRelationStatus(\n        friendshipComposite?.statusAtoB,\n        friendshipComposite?.statusBtoA,\n      );\n      const id = friendshipComposite.bId;\n      switch (finalStatus) {\n        case FriendshipTwoWayRelationStatus.SentRequest:\n          dto.sentRequests.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.ReceivedRequest:\n          dto.receivedRequests.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.Friends:\n          dto.friends.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.BlockedByYou:\n          dto.blockedByYou.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.BlockedByOther:\n          dto.blockedByOther.push(id);\n          break;\n      }\n    }\n    return dto;\n  }\n\n  /**\n   * Individually set relations between two users\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   * @param normalStatus One way friendship relation from a to b\n   * @param inverseStatus One way friendship relation from b to a\n   * @private\n   */\n  private async _setRelations(\n    aId: string,\n    bId: string,\n    normalStatus: FriendshipOneWayRelationStatus,\n    inverseStatus: FriendshipOneWayRelationStatus,\n  ): Promise {\n    const normal = new Friendship();\n    normal.aId = aId;\n    normal.bId = bId;\n    normal.status = normalStatus;\n\n    const inverse = new Friendship();\n    inverse.aId = bId;\n    inverse.bId = aId;\n    inverse.status = inverseStatus;\n\n    const [savedNormal, savedInverse] = await this.friendshipRepository.save([\n      normal,\n      inverse,\n    ]);\n    return FriendService._deriveTwoWayRelationStatus(\n      savedNormal?.status,\n      savedInverse?.status,\n    );\n  }\n\n  /**\n   * Remove all relations between a and b\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   * @private\n   */\n  private async _removeRelations(aId: string, bId: string): Promise {\n    await Promise.all([\n      this.friendshipRepository.delete({ aId: aId, bId: bId }),\n      this.friendshipRepository.delete({ aId: bId, bId: aId }),\n    ]);\n  }\n\n  /**\n   * Set both one-way relations from a to b represent a friend request\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async _sendFriendRequest(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return this._setRelations(\n      aId,\n      bId,\n      FriendshipOneWayRelationStatus.Ok,\n      FriendshipOneWayRelationStatus.NoAction,\n    );\n  }\n\n  /**\n   * Set two-way relation as friends\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async _acceptFriendRequest(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return this._setRelations(\n      aId,\n      bId,\n      FriendshipOneWayRelationStatus.Ok,\n      FriendshipOneWayRelationStatus.Ok,\n    );\n  }\n\n  /**\n   * Send friend request from a to b, or accept friend request from b to a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async add(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n      case FriendshipTwoWayRelationStatus.SentRequest:\n      case FriendshipTwoWayRelationStatus.Friends:\n        // blocked status blocks any other action, return blocked status and do nothing.\n        return currentFinalStatus;\n      case FriendshipTwoWayRelationStatus.ReceivedRequest:\n        return this._acceptFriendRequest(aId, bId);\n      case null:\n        return this._sendFriendRequest(aId, bId);\n    }\n  }\n\n  /**\n   * Remove friendship of a and b or discard friend request from b\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async remove(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n        // blocked status blocks any other action, return blocked status and do nothing.\n        return currentFinalStatus;\n      default:\n        await this._removeRelations(aId, bId);\n        return null;\n    }\n  }\n\n  /**\n   * Block b for a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async block(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      // already blocked statuses\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n        return currentFinalStatus;\n      default:\n        return this._setRelations(\n          aId,\n          bId,\n          FriendshipOneWayRelationStatus.DidBlock,\n          FriendshipOneWayRelationStatus.GotBlocked,\n        );\n    }\n  }\n\n  /**\n   * Unblock b for a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async unblock(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n        await this._removeRelations(aId, bId);\n        return null;\n      default:\n        return currentFinalStatus;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Friendship.html":{"url":"classes/Friendship.html","title":"class - Friendship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Friendship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/entities/friendship.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                a\n                            \n                            \n                                aId\n                            \n                            \n                                b\n                            \n                            \n                                bId\n                            \n                            \n                                createdAt\n                            \n                            \n                                status\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            a\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            b\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FriendshipOneWayRelationStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: FriendshipOneWayRelationStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Check,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Account } from '../../account/entities/account.entity';\nimport { FriendshipOneWayRelationStatus } from '../enums/friendship-one-way-relation-status.enum';\n\n@Entity()\n@Check(`\"aId\" != \"bId\"`)\nexport class Friendship {\n  @PrimaryColumn()\n  aId: string;\n\n  @PrimaryColumn()\n  bId: string;\n\n  @Column({\n    type: 'enum',\n    enum: FriendshipOneWayRelationStatus,\n    default: FriendshipOneWayRelationStatus.NoAction,\n  })\n  status: FriendshipOneWayRelationStatus;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @OneToOne(() => Account)\n  @JoinColumn()\n  a: Account;\n\n  @OneToOne(() => Account)\n  @JoinColumn()\n  b: Account;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendshipComposite.html":{"url":"classes/FriendshipComposite.html","title":"class - FriendshipComposite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendshipComposite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/entities/friendship-composite-view.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aId\n                            \n                            \n                                bId\n                            \n                            \n                                statusAtoB\n                            \n                            \n                                statusBtoA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship-composite-view.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship-composite-view.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusAtoB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FriendshipOneWayRelationStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship-composite-view.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusBtoA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FriendshipOneWayRelationStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship-composite-view.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ViewColumn, ViewEntity } from 'typeorm';\nimport { FriendshipOneWayRelationStatus } from '../enums/friendship-one-way-relation-status.enum';\n\n@ViewEntity({\n  expression: `\n    select\n      \"normal\".\"aId\" as \"aId\",\n      \"normal\".\"bId\" as \"bId\",\n      \"normal\".\"status\" as \"statusAtoB\",\n      \"inverse\".\"status\" as \"statusBtoA\"\n    from \"friendship\" \"normal\"\n        join \"friendship\" \"inverse\" on \"normal\".\"aId\" = \"inverse\".\"bId\" and \"normal\".\"bId\" = \"inverse\".\"aId\";\n  `,\n})\nexport class FriendshipComposite {\n  @ViewColumn()\n  aId: string;\n\n  @ViewColumn()\n  bId: string;\n\n  @ViewColumn()\n  statusAtoB: FriendshipOneWayRelationStatus;\n\n  @ViewColumn()\n  statusBtoA: FriendshipOneWayRelationStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendshipTwoWayRelationStatusDto.html":{"url":"classes/FriendshipTwoWayRelationStatusDto.html","title":"class - FriendshipTwoWayRelationStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendshipTwoWayRelationStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/dto/friendship-two-way-relation-status.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FriendshipTwoWayRelationStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-status.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { FriendshipTwoWayRelationStatus } from '../enums/friendship-two-way-relation-status.enum';\n\nexport class FriendshipTwoWayRelationStatusDto {\n  @ApiProperty()\n  status: FriendshipTwoWayRelationStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendshipTwoWayRelationStatusesDto.html":{"url":"classes/FriendshipTwoWayRelationStatusesDto.html","title":"class - FriendshipTwoWayRelationStatusesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendshipTwoWayRelationStatusesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blockedByOther\n                            \n                            \n                                blockedByYou\n                            \n                            \n                                friends\n                            \n                            \n                                receivedRequests\n                            \n                            \n                                sentRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            blockedByOther\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            blockedByYou\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            friends\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            receivedRequests\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sentRequests\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class FriendshipTwoWayRelationStatusesDto {\n  @ApiProperty({ type: [String] })\n  sentRequests: string[] = [];\n\n  @ApiProperty({ type: [String] })\n  receivedRequests: string[] = [];\n\n  @ApiProperty({ type: [String] })\n  friends: string[] = [];\n\n  @ApiProperty({ type: [String] })\n  blockedByYou: string[] = [];\n\n  @ApiProperty({ type: [String] })\n  blockedByOther: string[] = [];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Group.html":{"url":"classes/Group.html","title":"class - Group","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Group\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/entities/group.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                inviteOnly\n                            \n                            \n                                members\n                            \n                            \n                                name\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            inviteOnly\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            members\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GroupMember[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'text', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { GroupMember } from './group-member.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class Group {\n  @ApiProperty()\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @ApiProperty()\n  @Column({ type: 'text', unique: true })\n  name: string;\n\n  @ApiProperty()\n  @Column({ default: false })\n  inviteOnly: boolean;\n\n  @ApiProperty()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ApiProperty()\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @ApiProperty({ type: () => [GroupMember] })\n  @OneToMany(() => GroupMember, (groupMember) => groupMember.group)\n  members: GroupMember[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupController.html":{"url":"controllers/GroupController.html","title":"controller - GroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                groups\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                banFromGroup\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findMany\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                getMemberOfGroup\n                            \n                            \n                                    Async\n                                getMembershipsOfMe\n                            \n                            \n                                    Async\n                                getMembershipsOfUser\n                            \n                            \n                                    Async\n                                getMembersOfGroup\n                            \n                            \n                                    Async\n                                inviteToGroup\n                            \n                            \n                                    Async\n                                joinGroup\n                            \n                            \n                                    Async\n                                leaveGroup\n                            \n                            \n                                    Async\n                                promote\n                            \n                            \n                                    Async\n                                removeMemberOfGroup\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            banFromGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    banFromGroup(req, groupId, targetUserId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Ban user from group'})@ApiParam({name: 'groupId'})@ApiParam({name: 'userId'})@ApiOkResponse({type: MembershipDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post(':groupId/members/:userId/ban')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:325\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetUserId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createGroupDto: CreateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create group'})@ApiCreatedResponse({type: CreateGroupDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post()\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createGroupDto\n                                    \n                                                CreateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, groupId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete group'})@ApiParam({name: 'groupId'})@ApiNoContentResponse()@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Delete(':groupId')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:143\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMany\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMany(name?: string, inviteOnly?: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find groups'})@ApiOkResponse({type: GroupsDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get()\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    inviteOnly\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(groupId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find group'})@ApiParam({name: 'groupId'})@ApiOkResponse({type: GroupDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get(':groupId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMemberOfGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMemberOfGroup(req, groupId, userId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get member of group'})@ApiParam({name: 'groupId'})@ApiParam({name: 'userId'})@ApiOkResponse({type: MembershipDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get(':groupId/members/:userId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:219\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMembershipsOfMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMembershipsOfMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get memberships of me'})@ApiOkResponse({type: MembershipsDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get('memberships/me')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMembershipsOfUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMembershipsOfUser(req, userId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get memberships of user'})@ApiParam({name: 'userId'})@ApiOkResponse({type: MembershipsDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get('memberships/:userId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMembersOfGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMembersOfGroup(req, groupId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get members of group'})@ApiParam({name: 'groupId'})@ApiOkResponse({type: MembershipsDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get(':groupId/members')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:197\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            inviteToGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    inviteToGroup(req, groupId, targetUserId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Invite user to group'})@ApiParam({name: 'groupId'})@ApiParam({name: 'userId'})@ApiCreatedResponse({type: MembershipDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post(':groupId/members/:userId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:262\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetUserId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            joinGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    joinGroup(req, groupId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Join group'})@ApiParam({name: 'groupId'})@ApiCreatedResponse({type: MembershipDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post(':groupId/members/me')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            leaveGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    leaveGroup(req, groupId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Leave group'})@ApiParam({name: 'groupId'})@ApiNoContentResponse()@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Delete(':groupId/members/me')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:289\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            promote\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    promote(req, groupId, targetUserId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Promote user to admin'})@ApiParam({name: 'groupId'})@ApiParam({name: 'userId'})@ApiCreatedResponse({type: MembershipDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post(':groupId/members/:userId/ban')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:351\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetUserId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeMemberOfGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMemberOfGroup(req, groupId, targetUserId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Remove user from group'})@ApiParam({name: 'groupId'})@ApiParam({name: 'userId'})@ApiNoContentResponse()@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Delete(':groupId/members/:userId')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:306\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetUserId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, groupId, updateGroupDto: UpdateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update group'})@ApiParam({name: 'groupId'})@ApiOkResponse({type: GroupDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Patch(':groupId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateGroupDto\n                                    \n                                                UpdateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Request,\n  UseFilters,\n  UseGuards,\n} from '@nestjs/common';\nimport { GroupService } from './group.service';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport { GroupDto } from './dto/group.dto';\nimport { GroupsDto } from './dto/groups.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\nimport { GroupExceptionFilter } from './filters/group-exception.filter';\nimport { MembershipsDto } from './dto/memberships.dto';\nimport { MembershipDto } from './dto/membership.dto';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiNoContentResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { BadRequestDto } from '../../common/dto/bad-request.dto';\n\n@ApiTags('groups')\n@Controller('groups')\nexport class GroupController {\n  constructor(private readonly groupService: GroupService) {}\n\n  @ApiOperation({ summary: 'Create group' })\n  @ApiCreatedResponse({ type: CreateGroupDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // POST /groups\n  // service.create\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post()\n  async create(\n    @Request() req,\n    @Body() createGroupDto: CreateGroupDto,\n  ): Promise {\n    const dto = new GroupDto();\n    dto.group = await this.groupService.create(\n      req.user.sub,\n      createGroupDto.name,\n      createGroupDto.inviteOnly,\n    );\n    if (dto.group === undefined) {\n      dto.group = null;\n    }\n    return dto;\n  }\n\n  @ApiOperation({ summary: 'Find groups' })\n  @ApiOkResponse({ type: GroupsDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // GET /groups\n  // service.findMany\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get()\n  async findMany(\n    @Query('name') name?: string,\n    @Query('inviteOnly') inviteOnly?: boolean,\n  ): Promise {\n    const dto = new GroupsDto();\n    [dto.groups, dto.count] = await this.groupService.findMany({\n      name: name,\n      inviteOnly: inviteOnly,\n    });\n    return dto;\n  }\n\n  @ApiOperation({ summary: 'Find group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiOkResponse({ type: GroupDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // GET /groups/{groupId}\n  // service.findOne\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get(':groupId')\n  async findOne(@Param('groupId') groupId): Promise {\n    const dto = new GroupDto();\n    dto.group = await this.groupService.findOne(groupId);\n    if (dto.group === undefined) {\n      dto.group = null;\n    }\n    return dto;\n  }\n\n  @ApiOperation({ summary: 'Update group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiOkResponse({ type: GroupDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // PATCH /groups/{groupId}\n  // service.update\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Patch(':groupId')\n  async update(\n    @Request() req,\n    @Param('groupId') groupId,\n    @Body() updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const memberId = req.user.sub;\n    const dto = new GroupDto();\n    dto.group = await this.groupService.update(\n      groupId,\n      memberId,\n      updateGroupDto,\n    );\n    return dto;\n  }\n\n  @ApiOperation({ summary: 'Delete group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiNoContentResponse()\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // DELETE /groups/{groupId}\n  // service.delete\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Delete(':groupId')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async delete(@Request() req, @Param('groupId') groupId) {\n    const memberId = req.user.sub;\n    await this.groupService.delete(groupId, memberId);\n  }\n\n  @ApiOperation({ summary: 'Get memberships of me' })\n  @ApiOkResponse({ type: MembershipsDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // GET /groups/memberships/me\n  // service.findMembershipOfUser\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get('memberships/me')\n  async getMembershipsOfMe(@Request() req): Promise {\n    const userId = req.user.sub;\n    const memberships = await this.groupService.findMembershipsOfUser(userId);\n    return {\n      count: memberships.length,\n      memberships: memberships,\n    };\n  }\n\n  @ApiOperation({ summary: 'Get memberships of user' })\n  @ApiParam({ name: 'userId' })\n  @ApiOkResponse({ type: MembershipsDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // GET /groups/memberships/{userId}\n  // service.findMembershipOfUser\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get('memberships/:userId')\n  async getMembershipsOfUser(\n    @Request() req,\n    @Param('userId') userId,\n  ): Promise {\n    const memberships = await this.groupService.findMembershipsOfUser(userId);\n    return {\n      count: memberships.length,\n      memberships: memberships,\n    };\n  }\n\n  @ApiOperation({ summary: 'Get members of group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiOkResponse({ type: MembershipsDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // GET /groups/{groupId}/members\n  // service.getMembers\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get(':groupId/members')\n  async getMembersOfGroup(\n    @Request() req,\n    @Param('groupId') groupId,\n  ): Promise {\n    const [members, count] = await this.groupService.getMembers(groupId);\n    return {\n      count: count,\n      memberships: members,\n    };\n  }\n\n  @ApiOperation({ summary: 'Get member of group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiParam({ name: 'userId' })\n  @ApiOkResponse({ type: MembershipDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // GET /groups/{groupId}/members/{userId}\n  // service.getMember\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get(':groupId/members/:userId')\n  async getMemberOfGroup(\n    @Request() req,\n    @Param('groupId') groupId,\n    @Param('userId') userId,\n  ): Promise {\n    const member = await this.groupService.getMember(groupId, userId);\n    return {\n      membership: member,\n    };\n  }\n\n  @ApiOperation({ summary: 'Join group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiCreatedResponse({ type: MembershipDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // POST /groups/{groupId}/members/me\n  // service.join\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post(':groupId/members/me')\n  async joinGroup(\n    @Request() req,\n    @Param('groupId') groupId,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    const member = await this.groupService.join(groupId, actingUserId);\n    return {\n      membership: member,\n    };\n  }\n\n  @ApiOperation({ summary: 'Invite user to group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiParam({ name: 'userId' })\n  @ApiCreatedResponse({ type: MembershipDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // POST /groups/{groupId}/members/{userId}\n  // service.invite\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post(':groupId/members/:userId')\n  async inviteToGroup(\n    @Request() req,\n    @Param('groupId') groupId,\n    @Param('userId') targetUserId,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    const member = await this.groupService.invite(\n      groupId,\n      actingUserId,\n      targetUserId,\n    );\n    return {\n      membership: member,\n    };\n  }\n\n  @ApiOperation({ summary: 'Leave group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiNoContentResponse()\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // DELETE /groups/{groupId}/members/me\n  // service.leave\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Delete(':groupId/members/me')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async leaveGroup(@Request() req, @Param('groupId') groupId): Promise {\n    const actingUserId: string = req.user.sub;\n    await this.groupService.leave(groupId, actingUserId);\n  }\n\n  @ApiOperation({ summary: 'Remove user from group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiParam({ name: 'userId' })\n  @ApiNoContentResponse()\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // DELETE /groups/{groupId}/members/{userId}\n  // service.removeMember\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Delete(':groupId/members/:userId')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async removeMemberOfGroup(\n    @Request() req,\n    @Param('groupId') groupId,\n    @Param('userId') targetUserId,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    await this.groupService.removeMember(groupId, actingUserId, targetUserId);\n  }\n\n  @ApiOperation({ summary: 'Ban user from group' })\n  @ApiParam({ name: 'groupId' })\n  @ApiParam({ name: 'userId' })\n  @ApiOkResponse({ type: MembershipDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // POST /groups/{groupId}/members/{userId}/ban\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post(':groupId/members/:userId/ban')\n  async banFromGroup(\n    @Request() req,\n    @Param('groupId') groupId,\n    @Param('userId') targetUserId,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    const member = await this.groupService.ban(\n      groupId,\n      actingUserId,\n      targetUserId,\n    );\n    return {\n      membership: member,\n    };\n  }\n\n  @ApiOperation({ summary: 'Promote user to admin' })\n  @ApiParam({ name: 'groupId' })\n  @ApiParam({ name: 'userId' })\n  @ApiCreatedResponse({ type: MembershipDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  // POST /groups/{groupId}/members/{userId}/promote\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post(':groupId/members/:userId/ban')\n  async promote(\n    @Request() req,\n    @Param('groupId') groupId,\n    @Param('userId') targetUserId,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    const member = await this.groupService.promoteToAdmin(\n      groupId,\n      actingUserId,\n      targetUserId,\n    );\n    return {\n      membership: member,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupDoesNotExistError.html":{"url":"classes/GroupDoesNotExistError.html","title":"class - GroupDoesNotExistError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupDoesNotExistError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupDto.html":{"url":"classes/GroupDto.html","title":"class - GroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Group\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/group.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Group } from '../entities/group.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class GroupDto {\n  @ApiProperty()\n  group: Group;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupExceptionFilter.html":{"url":"classes/GroupExceptionFilter.html","title":"class - GroupExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/filters/group-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: _BaseGroupException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/group/filters/group-exception.filter.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                _BaseGroupException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { _BaseGroupException } from '../group.service';\n\n@Catch(_BaseGroupException)\nexport class GroupExceptionFilter implements ExceptionFilter {\n  catch(exception: _BaseGroupException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = HttpStatus.BAD_REQUEST;\n    const name = exception.name;\n    const message = exception.message;\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      error: {\n        name: name,\n        message: message,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupMember.html":{"url":"classes/GroupMember.html","title":"class - GroupMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/entities/group-member.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                            \n                                groupId\n                            \n                            \n                                member\n                            \n                            \n                                memberId\n                            \n                            \n                                membershipStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Group\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            member\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@ManyToOne(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            memberId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            membershipStatus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GroupMembershipStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'enum', enum: GroupMembershipStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GroupMembershipStatus } from '../enums/group-membership-status.enum';\nimport { Column, Entity, ManyToOne, PrimaryColumn } from 'typeorm';\nimport { Group } from './group.entity';\nimport { Account } from '../../account/entities/account.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class GroupMember {\n  @ApiProperty()\n  @PrimaryColumn()\n  groupId: string;\n\n  @ApiProperty()\n  @PrimaryColumn()\n  memberId: string;\n\n  @ApiProperty()\n  @Column({\n    type: 'enum',\n    enum: GroupMembershipStatus,\n    default: GroupMembershipStatus.Member,\n  })\n  membershipStatus: GroupMembershipStatus;\n\n  @ApiProperty({ type: () => Group })\n  @ManyToOne(() => Group, (group) => group.members, { onDelete: 'CASCADE' })\n  group: Group;\n\n  @ApiProperty()\n  @ManyToOne(() => Account, { onDelete: 'CASCADE' })\n  member: Account;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GroupModule.html":{"url":"modules/GroupModule.html","title":"module - GroupModule","body":"\n                   \n\n\n\n\n    Modules\n    GroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_providers\n\n\n\ncluster_GroupModule_exports\n\n\n\n\nGroupService \n\nGroupService \n\n\n\nGroupModule\n\nGroupModule\n\nGroupService  -->\n\nGroupModule->GroupService \n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/group/group.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GroupController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GroupService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GroupService } from './group.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupController } from './group.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Group, GroupMember])],\n  controllers: [GroupController],\n  providers: [GroupService],\n  exports: [GroupService],\n})\nexport class GroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupsDto.html":{"url":"classes/GroupsDto.html","title":"class - GroupsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/groups.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                groups\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/groups.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Group[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/groups.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Group } from '../entities/group.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class GroupsDto {\n  @ApiProperty()\n  count;\n\n  @ApiProperty({ type: [Group] })\n  groups: Group[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guard/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/account/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.SECRET ?? 'secretsecretigotasecret',\n    });\n  }\n\n  // these valid results are attached to user param of the request object\n  async validate(payload: any) {\n    return { sub: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LeaderboardController.html":{"url":"controllers/LeaderboardController.html","title":"controller - LeaderboardController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LeaderboardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                leaderboards\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEntries\n                            \n                            \n                                    Async\n                                getEntry\n                            \n                            \n                                    Async\n                                getEntryOfMe\n                            \n                            \n                                    Async\n                                updateEntry\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntries(req, leaderboardId, offset: string, limit: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get leaderboard entries'})@ApiOkResponse({type: LeaderboardEntriesDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiParam({name: 'leaderboardId'})@ApiQuery({name: 'offset'})@ApiQuery({name: 'limit'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(LeaderboardExceptionFilter)@Get(':leaderboardId')\n                \n            \n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    leaderboardId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntry(req, leaderboardId, userId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get leaderboard entry for user'})@ApiOkResponse({type: LeaderboardEntryDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiParam({name: 'leaderboardId'})@ApiParam({name: 'userId'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(LeaderboardExceptionFilter)@Get(':leaderboardId/:userId')\n                \n            \n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    leaderboardId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntryOfMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntryOfMe(req, leaderboardId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get leaderboard entry for current user'})@ApiOkResponse({type: LeaderboardEntryDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiParam({name: 'leaderboardId'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':leaderboardId/me')@UseFilters(LeaderboardExceptionFilter)\n                \n            \n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    leaderboardId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEntry(req, leaderboardId, updateEntryDto: UpdateEntryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update leaderboard entry of user'})@ApiOkResponse({type: LeaderboardEntryDto})@ApiBadRequestResponse({type: BadRequestDto})@ApiParam({name: 'leaderboardId'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(LeaderboardExceptionFilter)@Post(':leaderboardId')\n                \n            \n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.controller.ts:97\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    leaderboardId\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntryDto\n                                    \n                                                UpdateEntryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n  Request,\n  UseFilters,\n  Query,\n  Body,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport { LeaderboardService } from './leaderboard.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { BadRequestDto } from '../../common/dto/bad-request.dto';\nimport { LeaderboardExceptionFilter } from './filters/leaderboard-exception.filter';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\nimport { UpdateEntryDto } from './dto/update-entry.dto';\n\n@ApiTags('leaderboards')\n@Controller('leaderboards')\nexport class LeaderboardController {\n  constructor(private readonly leaderboardService: LeaderboardService) {}\n\n  @ApiOperation({ summary: 'Get leaderboard entry for current user' })\n  @ApiOkResponse({ type: LeaderboardEntryDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiParam({ name: 'leaderboardId' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':leaderboardId/me')\n  @UseFilters(LeaderboardExceptionFilter)\n  async getEntryOfMe(\n    @Request() req,\n    @Param('leaderboardId') leaderboardId,\n  ): Promise {\n    const userId = req.user.sub;\n    return this.leaderboardService.getEntry(leaderboardId, userId);\n  }\n\n  @ApiOperation({ summary: 'Get leaderboard entry for user' })\n  @ApiOkResponse({ type: LeaderboardEntryDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiParam({ name: 'leaderboardId' })\n  @ApiParam({ name: 'userId' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(LeaderboardExceptionFilter)\n  @Get(':leaderboardId/:userId')\n  async getEntry(\n    @Request() req,\n    @Param('leaderboardId') leaderboardId,\n    @Param('userId') userId,\n  ): Promise {\n    return this.leaderboardService.getEntry(leaderboardId, userId);\n  }\n\n  @ApiOperation({ summary: 'Get leaderboard entries' })\n  @ApiOkResponse({ type: LeaderboardEntriesDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiParam({ name: 'leaderboardId' })\n  @ApiQuery({ name: 'offset' })\n  @ApiQuery({ name: 'limit' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(LeaderboardExceptionFilter)\n  @Get(':leaderboardId')\n  async getEntries(\n    @Request() req,\n    @Param('leaderboardId') leaderboardId,\n    @Query('offset') offset: string = undefined,\n    @Query('limit') limit: string = undefined,\n  ): Promise {\n    return this.leaderboardService.getEntries(leaderboardId, {\n      offset: offset,\n      limit: limit,\n    });\n  }\n\n  @ApiOperation({ summary: 'Update leaderboard entry of user' })\n  @ApiOkResponse({ type: LeaderboardEntryDto })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiParam({ name: 'leaderboardId' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(LeaderboardExceptionFilter)\n  @Post(':leaderboardId')\n  async updateEntry(\n    @Request() req,\n    @Param('leaderboardId') leaderboardId,\n    @Body() updateEntryDto: UpdateEntryDto,\n  ): Promise {\n    const userId = req.user.sub;\n    return this.leaderboardService.updateEntry(\n      leaderboardId,\n      userId,\n      updateEntryDto.score,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardEntriesDto.html":{"url":"classes/LeaderboardEntriesDto.html","title":"class - LeaderboardEntriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardEntriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/dto/leaderboard-entries.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                entries\n                            \n                            \n                                limit\n                            \n                            \n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LeaderboardEntryDto[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entries.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            limit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entries.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            offset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entries.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { LeaderboardEntryDto } from './leaderboard-entry.dto';\n\nexport class LeaderboardEntriesDto {\n  @ApiProperty()\n  offset: number;\n\n  @ApiProperty()\n  limit: number;\n\n  @ApiProperty({ type: [LeaderboardEntryDto] })\n  entries: LeaderboardEntryDto[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardEntryDto.html":{"url":"classes/LeaderboardEntryDto.html","title":"class - LeaderboardEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/dto/leaderboard-entry.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                rank\n                            \n                            \n                                score\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            rank\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entry.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entry.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entry.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class LeaderboardEntryDto {\n  @ApiProperty()\n  userId: string;\n\n  @ApiProperty()\n  score: number;\n\n  @ApiProperty()\n  rank: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardEntryNotFoundError.html":{"url":"classes/LeaderboardEntryNotFoundError.html","title":"class - LeaderboardEntryNotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardEntryNotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseLeaderboardException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\n\nexport class _BaseLeaderboardException extends Error {}\nexport class LeaderboardEntryNotFoundError extends _BaseLeaderboardException {}\nexport class CouldNotUpdateLeaderboardEntryError extends _BaseLeaderboardException {}\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(private readonly redisService: RedisService) {}\n\n  async getEntry(\n    leaderboardId: string,\n    userId: string,\n  ): Promise {\n    const client = this.redisService.getClient();\n    const [score, rank] = await Promise.all([\n      client.zscore(leaderboardId, userId),\n      client.zrevrank(leaderboardId, userId),\n    ]);\n    if (score == null || rank == null) {\n      throw new LeaderboardEntryNotFoundError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" was not found`,\n      );\n    }\n    return {\n      userId: userId,\n      score: Number(score),\n      rank: Number(rank),\n    };\n  }\n\n  async getEntries(\n    leaderboardId: string,\n    options?: {\n      offset: string;\n      limit: string;\n    },\n  ): Promise {\n    const client = this.redisService.getClient();\n\n    let start = 0;\n    let stop = -1;\n\n    let normalizedOffset = null;\n    let normalizedLimit = null;\n\n    if (options.offset && isFinite(Number(options.offset))) {\n      normalizedOffset = Number(options.offset);\n      start = normalizedOffset;\n    }\n    if (options.limit && isFinite(Number(options.limit))) {\n      normalizedLimit = Number(options.limit);\n      stop = start + Number(options.limit) - 1;\n    }\n\n    const result = await client.zrevrange(\n      leaderboardId,\n      start,\n      stop,\n      'WITHSCORES',\n    );\n\n    // construct entries array\n    const entries: LeaderboardEntryDto[] = [];\n    for (let i = 0; i  {\n    const client = this.redisService.getClient();\n\n    const updatedEntryCount = await client.zadd(leaderboardId, score, userId);\n    if (updatedEntryCount !== 1) {\n      throw new CouldNotUpdateLeaderboardEntryError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" could not be updated with score \"${score}\"`,\n      );\n    }\n\n    return this.getEntry(leaderboardId, userId);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardExceptionFilter.html":{"url":"classes/LeaderboardExceptionFilter.html","title":"class - LeaderboardExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/filters/leaderboard-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: _BaseLeaderboardException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/leaderboard/filters/leaderboard-exception.filter.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                _BaseLeaderboardException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { _BaseLeaderboardException } from '../leaderboard.service';\n\n@Catch(_BaseLeaderboardException)\nexport class LeaderboardExceptionFilter implements ExceptionFilter {\n  catch(exception: _BaseLeaderboardException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = HttpStatus.BAD_REQUEST;\n    const name = exception.name;\n    const message = exception.message;\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      error: {\n        name: name,\n        message: message,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LeaderboardModule.html":{"url":"modules/LeaderboardModule.html","title":"module - LeaderboardModule","body":"\n                   \n\n\n\n\n    Modules\n    LeaderboardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LeaderboardModule\n\n\n\ncluster_LeaderboardModule_providers\n\n\n\ncluster_LeaderboardModule_exports\n\n\n\n\nLeaderboardService \n\nLeaderboardService \n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nLeaderboardService  -->\n\nLeaderboardModule->LeaderboardService \n\n\n\n\n\nLeaderboardService\n\nLeaderboardService\n\nLeaderboardModule -->\n\nLeaderboardService->LeaderboardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LeaderboardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LeaderboardController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LeaderboardService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LeaderboardService } from './leaderboard.service';\nimport { RedisModule } from 'nestjs-redis';\nimport { LeaderboardController } from './leaderboard.controller';\n\n@Module({\n  imports: [\n    RedisModule.register({\n      url: process.env.REDIS_URL || 'redis://127.0.0.1:6379/0',\n      keyPrefix: 'lb:',\n    }),\n  ],\n  providers: [LeaderboardService],\n  controllers: [LeaderboardController],\n  exports: [LeaderboardService],\n})\nexport class LeaderboardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LeaderboardService.html":{"url":"injectables/LeaderboardService.html","title":"injectable - LeaderboardService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LeaderboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEntries\n                            \n                            \n                                    Async\n                                getEntry\n                            \n                            \n                                    Async\n                                updateEntry\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/core/leaderboard/leaderboard.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntries(leaderboardId: string, options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntry(leaderboardId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEntry(leaderboardId: string, userId: string, score: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    score\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\n\nexport class _BaseLeaderboardException extends Error {}\nexport class LeaderboardEntryNotFoundError extends _BaseLeaderboardException {}\nexport class CouldNotUpdateLeaderboardEntryError extends _BaseLeaderboardException {}\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(private readonly redisService: RedisService) {}\n\n  async getEntry(\n    leaderboardId: string,\n    userId: string,\n  ): Promise {\n    const client = this.redisService.getClient();\n    const [score, rank] = await Promise.all([\n      client.zscore(leaderboardId, userId),\n      client.zrevrank(leaderboardId, userId),\n    ]);\n    if (score == null || rank == null) {\n      throw new LeaderboardEntryNotFoundError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" was not found`,\n      );\n    }\n    return {\n      userId: userId,\n      score: Number(score),\n      rank: Number(rank),\n    };\n  }\n\n  async getEntries(\n    leaderboardId: string,\n    options?: {\n      offset: string;\n      limit: string;\n    },\n  ): Promise {\n    const client = this.redisService.getClient();\n\n    let start = 0;\n    let stop = -1;\n\n    let normalizedOffset = null;\n    let normalizedLimit = null;\n\n    if (options.offset && isFinite(Number(options.offset))) {\n      normalizedOffset = Number(options.offset);\n      start = normalizedOffset;\n    }\n    if (options.limit && isFinite(Number(options.limit))) {\n      normalizedLimit = Number(options.limit);\n      stop = start + Number(options.limit) - 1;\n    }\n\n    const result = await client.zrevrange(\n      leaderboardId,\n      start,\n      stop,\n      'WITHSCORES',\n    );\n\n    // construct entries array\n    const entries: LeaderboardEntryDto[] = [];\n    for (let i = 0; i  {\n    const client = this.redisService.getClient();\n\n    const updatedEntryCount = await client.zadd(leaderboardId, score, userId);\n    if (updatedEntryCount !== 1) {\n      throw new CouldNotUpdateLeaderboardEntryError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" could not be updated with score \"${score}\"`,\n      );\n    }\n\n    return this.getEntry(leaderboardId, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MembershipDto.html":{"url":"classes/MembershipDto.html","title":"class - MembershipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MembershipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/membership.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                membership\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            membership\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GroupMember\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/membership.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { GroupMember } from '../entities/group-member.entity';\n\nexport class MembershipDto {\n  @ApiProperty()\n  membership: GroupMember;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MembershipsDto.html":{"url":"classes/MembershipsDto.html","title":"class - MembershipsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MembershipsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/memberships.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                memberships\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/memberships.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            memberships\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GroupMember[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/memberships.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { GroupMember } from '../entities/group-member.entity';\n\nexport class MembershipsDto {\n  @ApiProperty()\n  count;\n\n  @ApiProperty({ type: [GroupMember] })\n  memberships: GroupMember[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotGroupAdminError.html":{"url":"classes/NotGroupAdminError.html","title":"class - NotGroupAdminError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotGroupAdminError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotGroupMemberError.html":{"url":"classes/NotGroupMemberError.html","title":"class - NotGroupMemberError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotGroupMemberError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotInvitedToGroupError.html":{"url":"classes/NotInvitedToGroupError.html","title":"class - NotInvitedToGroupError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotInvitedToGroupError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/entities/profile.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                createdAt\n                            \n                            \n                                displayName\n                            \n                            \n                                level\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            avatarUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            level\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'integer', default: 1})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  JoinColumn,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Account } from '../../../core/account/entities/account.entity';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n@Entity()\nexport class Profile {\n  @ApiProperty()\n  @PrimaryColumn()\n  userId: string;\n\n  @ApiProperty()\n  @Column({ type: 'text' })\n  displayName: string;\n\n  @ApiPropertyOptional()\n  @Column({ type: 'text', nullable: true })\n  avatarUrl?: string;\n\n  @ApiProperty()\n  @Column({ type: 'integer', default: 1 })\n  level: number;\n\n  @ApiPropertyOptional()\n  @OneToOne(() => Account)\n  @JoinColumn()\n  user: string;\n\n  @ApiProperty()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ApiProperty()\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileAlreadyExistsError.html":{"url":"classes/ProfileAlreadyExistsError.html","title":"class - ProfileAlreadyExistsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileAlreadyExistsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/profile.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Profile } from './entities/profile.entity';\n\nexport class ProfileAlreadyExistsError extends Error {}\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n  ) {}\n\n  async create(\n    userId: string,\n    createProfileDto: CreateProfileDto,\n  ): Promise {\n    let profile = await this.profileRepository.findOne(userId);\n    if (profile != null) {\n      throw new ProfileAlreadyExistsError();\n    }\n\n    profile = new Profile();\n    profile.userId = userId;\n    profile.displayName = createProfileDto.displayName;\n    profile.avatarUrl = createProfileDto?.avatarUrl;\n    return this.profileRepository.save(profile);\n  }\n\n  async findOne(userId: string): Promise {\n    return this.profileRepository.findOne(userId);\n  }\n\n  async update(\n    userId: string,\n    updateProfileDto: UpdateProfileDto,\n  ): Promise {\n    const profile = await this.profileRepository.findOne(userId);\n    if (profile == null) {\n      return;\n    }\n    profile.displayName = updateProfileDto?.displayName ?? profile.displayName;\n    profile.avatarUrl = updateProfileDto?.avatarUrl ?? profile.avatarUrl;\n    return this.profileRepository.save(profile);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profiles\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findMe\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createProfileDto: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new profile'})@ApiCreatedResponse({type: ProfileDto})@ApiBadRequestResponse()@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/extensions/profile/profile.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createProfileDto\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find profile of current user'})@UseGuards(JwtAuthGuard)@ApiBearerAuth()@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/extensions/profile/profile.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find profile of any user'})@ApiParam({name: 'userId'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':userId')\n                \n            \n\n            \n                \n                    Defined in src/extensions/profile/profile.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, updateProfileDto: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update profile of current user'})@UseGuards(JwtAuthGuard)@ApiBearerAuth()@Patch('me')\n                \n            \n\n            \n                \n                    Defined in src/extensions/profile/profile.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProfileDto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Put,\n  Param,\n  Request,\n  Delete,\n  Patch,\n  UseGuards,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ProfileAlreadyExistsError, ProfileService } from './profile.service';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport { Profile } from './entities/profile.entity';\nimport { ProfileDto } from './dto/profile.dto';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@ApiTags('profiles')\n@Controller('profiles')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @ApiOperation({ summary: 'Create new profile' })\n  @ApiCreatedResponse({ type: ProfileDto })\n  @ApiBadRequestResponse()\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(\n    @Request() req,\n    @Body() createProfileDto: CreateProfileDto,\n  ): Promise {\n    try {\n      const userId = req.user.sub;\n      return {\n        profile: await this.profileService.create(userId, createProfileDto),\n      };\n    } catch (e) {\n      if (e instanceof ProfileAlreadyExistsError) {\n        throw new HttpException(\n          'Profile already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  @ApiOperation({ summary: 'Find profile of current user' })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Get('me')\n  async findMe(@Request() req): Promise {\n    const userId = req.user.sub;\n    return {\n      profile: await this.profileService.findOne(userId),\n    };\n  }\n\n  @ApiOperation({ summary: 'Find profile of any user' })\n  @ApiParam({ name: 'userId' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':userId')\n  async findOne(@Param('userId') userId: string): Promise {\n    return {\n      profile: await this.profileService.findOne(userId),\n    };\n  }\n\n  @ApiOperation({ summary: 'Update profile of current user' })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Patch('me')\n  async update(\n    @Request() req,\n    @Body() updateProfileDto: UpdateProfileDto,\n  ): Promise {\n    const userId = req.user.sub;\n    return {\n      profile: await this.profileService.update(userId, updateProfileDto),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileDto.html":{"url":"classes/ProfileDto.html","title":"class - ProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/dto/profile.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Profile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/dto/profile.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Profile } from '../entities/profile.entity';\n\nexport class ProfileDto {\n  @ApiPropertyOptional()\n  profile?: Profile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nProfileService \n\nProfileService \n\n\n\nProfileModule\n\nProfileModule\n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/extensions/profile/profile.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { ProfileController } from './profile.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Profile } from './entities/profile.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Profile])],\n  controllers: [ProfileController],\n  providers: [ProfileService],\n  exports: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/profile.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/extensions/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createProfileDto: CreateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/profile/profile.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createProfileDto\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/profile/profile.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, updateProfileDto: UpdateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/profile/profile.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProfileDto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Profile } from './entities/profile.entity';\n\nexport class ProfileAlreadyExistsError extends Error {}\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n  ) {}\n\n  async create(\n    userId: string,\n    createProfileDto: CreateProfileDto,\n  ): Promise {\n    let profile = await this.profileRepository.findOne(userId);\n    if (profile != null) {\n      throw new ProfileAlreadyExistsError();\n    }\n\n    profile = new Profile();\n    profile.userId = userId;\n    profile.displayName = createProfileDto.displayName;\n    profile.avatarUrl = createProfileDto?.avatarUrl;\n    return this.profileRepository.save(profile);\n  }\n\n  async findOne(userId: string): Promise {\n    return this.profileRepository.findOne(userId);\n  }\n\n  async update(\n    userId: string,\n    updateProfileDto: UpdateProfileDto,\n  ): Promise {\n    const profile = await this.profileRepository.findOne(userId);\n    if (profile == null) {\n      return;\n    }\n    profile.displayName = updateProfileDto?.displayName ?? profile.displayName;\n    profile.avatarUrl = updateProfileDto?.avatarUrl ?? profile.avatarUrl;\n    return this.profileRepository.save(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReferenceFriendDto.html":{"url":"classes/ReferenceFriendDto.html","title":"class - ReferenceFriendDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReferenceFriendDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/dto/reference-friend.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/reference-friend.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class ReferenceFriendDto {\n  @ApiProperty({})\n  id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfReferenceError.html":{"url":"classes/SelfReferenceError.html","title":"class - SelfReferenceError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfReferenceError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/friend.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Friendship } from './entities/friendship.entity';\nimport { Repository } from 'typeorm';\nimport { FriendshipComposite } from './entities/friendship-composite-view.entity';\nimport { FriendshipOneWayRelationStatus } from './enums/friendship-one-way-relation-status.enum';\nimport { FriendshipTwoWayRelationStatus } from './enums/friendship-two-way-relation-status.enum';\nimport { FriendshipTwoWayRelationStatusesDto } from './dto/friendship-two-way-relation-statuses.dto';\n\nexport class SelfReferenceError extends Error {}\n\n@Injectable()\nexport class FriendService {\n  constructor(\n    @InjectRepository(Friendship)\n    private friendshipRepository: Repository,\n    @InjectRepository(FriendshipComposite)\n    private friendshipCompositeRepository: Repository,\n  ) {}\n\n  /**\n   * Derive the two-way relation status given the normal and inverse one-way relation statuses\n   * @param normalRelationStatus One-way relation status from a to b\n   * @param inverseRelationStatus One-way relation status from b to a\n   */\n  private static _deriveTwoWayRelationStatus(\n    normalRelationStatus: FriendshipOneWayRelationStatus,\n    inverseRelationStatus: FriendshipOneWayRelationStatus,\n  ): FriendshipTwoWayRelationStatus | null {\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.Ok &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.Ok\n    ) {\n      return FriendshipTwoWayRelationStatus.Friends;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.Ok &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.NoAction\n    ) {\n      return FriendshipTwoWayRelationStatus.SentRequest;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.NoAction &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.Ok\n    ) {\n      return FriendshipTwoWayRelationStatus.ReceivedRequest;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.DidBlock &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.GotBlocked\n    ) {\n      return FriendshipTwoWayRelationStatus.BlockedByYou;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.GotBlocked &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.DidBlock\n    ) {\n      return FriendshipTwoWayRelationStatus.BlockedByOther;\n    }\n    // no complete relation\n    return null;\n  }\n\n  /**\n   * Get both one-way relation statuses from a to b and from b to a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  private async _getNormalAndInverse(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return Promise.all([\n      this.friendshipRepository.findOne({ aId: aId, bId: bId }),\n      this.friendshipRepository.findOne({ aId: bId, bId: aId }),\n    ]);\n  }\n\n  /**\n   * Get the one-way relation status of a to b\n   * @param aId Account UUID for the acting user\n   * @param bId Account UUID for the referred user\n   */\n  async get(aId: string, bId: string): Promise {\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    return FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n  }\n\n  /**\n   * Get all two-way relation statuses of a user\n   * @param aId\n   */\n  async getAll(aId: string): Promise {\n    const dto = new FriendshipTwoWayRelationStatusesDto();\n    const friendshipComposites = await this.friendshipCompositeRepository.find({\n      where: { aId: aId },\n    });\n    for (const friendshipComposite of friendshipComposites) {\n      const finalStatus = FriendService._deriveTwoWayRelationStatus(\n        friendshipComposite?.statusAtoB,\n        friendshipComposite?.statusBtoA,\n      );\n      const id = friendshipComposite.bId;\n      switch (finalStatus) {\n        case FriendshipTwoWayRelationStatus.SentRequest:\n          dto.sentRequests.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.ReceivedRequest:\n          dto.receivedRequests.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.Friends:\n          dto.friends.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.BlockedByYou:\n          dto.blockedByYou.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.BlockedByOther:\n          dto.blockedByOther.push(id);\n          break;\n      }\n    }\n    return dto;\n  }\n\n  /**\n   * Individually set relations between two users\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   * @param normalStatus One way friendship relation from a to b\n   * @param inverseStatus One way friendship relation from b to a\n   * @private\n   */\n  private async _setRelations(\n    aId: string,\n    bId: string,\n    normalStatus: FriendshipOneWayRelationStatus,\n    inverseStatus: FriendshipOneWayRelationStatus,\n  ): Promise {\n    const normal = new Friendship();\n    normal.aId = aId;\n    normal.bId = bId;\n    normal.status = normalStatus;\n\n    const inverse = new Friendship();\n    inverse.aId = bId;\n    inverse.bId = aId;\n    inverse.status = inverseStatus;\n\n    const [savedNormal, savedInverse] = await this.friendshipRepository.save([\n      normal,\n      inverse,\n    ]);\n    return FriendService._deriveTwoWayRelationStatus(\n      savedNormal?.status,\n      savedInverse?.status,\n    );\n  }\n\n  /**\n   * Remove all relations between a and b\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   * @private\n   */\n  private async _removeRelations(aId: string, bId: string): Promise {\n    await Promise.all([\n      this.friendshipRepository.delete({ aId: aId, bId: bId }),\n      this.friendshipRepository.delete({ aId: bId, bId: aId }),\n    ]);\n  }\n\n  /**\n   * Set both one-way relations from a to b represent a friend request\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async _sendFriendRequest(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return this._setRelations(\n      aId,\n      bId,\n      FriendshipOneWayRelationStatus.Ok,\n      FriendshipOneWayRelationStatus.NoAction,\n    );\n  }\n\n  /**\n   * Set two-way relation as friends\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async _acceptFriendRequest(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return this._setRelations(\n      aId,\n      bId,\n      FriendshipOneWayRelationStatus.Ok,\n      FriendshipOneWayRelationStatus.Ok,\n    );\n  }\n\n  /**\n   * Send friend request from a to b, or accept friend request from b to a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async add(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n      case FriendshipTwoWayRelationStatus.SentRequest:\n      case FriendshipTwoWayRelationStatus.Friends:\n        // blocked status blocks any other action, return blocked status and do nothing.\n        return currentFinalStatus;\n      case FriendshipTwoWayRelationStatus.ReceivedRequest:\n        return this._acceptFriendRequest(aId, bId);\n      case null:\n        return this._sendFriendRequest(aId, bId);\n    }\n  }\n\n  /**\n   * Remove friendship of a and b or discard friend request from b\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async remove(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n        // blocked status blocks any other action, return blocked status and do nothing.\n        return currentFinalStatus;\n      default:\n        await this._removeRelations(aId, bId);\n        return null;\n    }\n  }\n\n  /**\n   * Block b for a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async block(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      // already blocked statuses\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n        return currentFinalStatus;\n      default:\n        return this._setRelations(\n          aId,\n          bId,\n          FriendshipOneWayRelationStatus.DidBlock,\n          FriendshipOneWayRelationStatus.GotBlocked,\n        );\n    }\n  }\n\n  /**\n   * Unblock b for a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async unblock(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n        await this._removeRelations(aId, bId);\n        return null;\n      default:\n        return currentFinalStatus;\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfReferenceErrorFilter.html":{"url":"classes/SelfReferenceErrorFilter.html","title":"class - SelfReferenceErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfReferenceErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/self-reference-error.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: SelfReferenceError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/self-reference-error.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                SelfReferenceError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, ExceptionFilter, HttpStatus } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { SelfReferenceError } from './friend.service';\n\nexport class SelfReferenceErrorFilter implements ExceptionFilter {\n  catch(exception: SelfReferenceError, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = HttpStatus.BAD_REQUEST;\n    const name = exception;\n    const message = exception.message;\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      error: {\n        name: name,\n        message: message,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAccountDto.html":{"url":"classes/UpdateAccountDto.html","title":"class - UpdateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/dto/update-account.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateAccountDto } from './create-account.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateAccountDto extends PartialType(CreateAccountDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEntryDto.html":{"url":"classes/UpdateEntryDto.html","title":"class - UpdateEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/dto/update-entry.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                score\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/update-entry.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UpdateEntryDto {\n  @ApiProperty()\n  score: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGroupDto.html":{"url":"classes/UpdateGroupDto.html","title":"class - UpdateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/update-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateGroupDto } from './create-group.dto';\n\nexport class UpdateGroupDto extends PartialType(CreateGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/dto/update-profile.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateProfileDto } from './create-profile.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateProfileDto extends PartialType(CreateProfileDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Wallet.html":{"url":"classes/Wallet.html","title":"class - Wallet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Wallet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/wallet/entities/wallet.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                normalCurrency\n                            \n                            \n                                premiumCurrency\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            normalCurrency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'integer', nullable: false, default: 1000})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            premiumCurrency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'integer', nullable: false, default: 50})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@OneToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Account } from '../../../core/account/entities/account.entity';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n@Entity()\nexport class Wallet {\n  @ApiProperty()\n  @PrimaryColumn()\n  userId: string;\n\n  @ApiProperty()\n  @Column({ type: 'integer', nullable: false, default: 1000 })\n  normalCurrency: number;\n\n  @ApiProperty()\n  @Column({ type: 'integer', nullable: false, default: 50 })\n  premiumCurrency: number;\n\n  @ApiPropertyOptional()\n  @OneToOne(() => Account, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  user: Account;\n\n  @ApiProperty()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ApiProperty()\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WalletController.html":{"url":"controllers/WalletController.html","title":"controller - WalletController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WalletController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/wallet/wallet.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                wallets\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findMe\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get current users wallet info '})@ApiOkResponse({type: Wallet})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/extensions/wallet/wallet.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get friends wallet info '})@ApiOkResponse({type: Wallet})@ApiForbiddenResponse()@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':userId')\n                \n            \n\n            \n                \n                    Defined in src/extensions/wallet/wallet.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseUUIDPipe,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { WalletService } from './wallet.service';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport {\n  ApiBearerAuth,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Wallet } from './entities/wallet.entity';\nimport { FriendService } from '../../core/friend/friend.service';\nimport { FriendshipTwoWayRelationStatus } from '../../core/friend/enums/friendship-two-way-relation-status.enum';\n\n@ApiTags('wallets')\n@Controller('wallets')\nexport class WalletController {\n  constructor(\n    private readonly walletService: WalletService,\n    private readonly friendService: FriendService,\n  ) {}\n\n  @ApiOperation({ summary: 'Get current users wallet info ' })\n  @ApiOkResponse({ type: Wallet })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('me')\n  async findMe(@Request() req): Promise {\n    const userId = req.user.sub;\n    return this.walletService.findOrCreate(userId);\n  }\n\n  @ApiOperation({ summary: 'Get friends wallet info ' })\n  @ApiOkResponse({ type: Wallet })\n  @ApiForbiddenResponse()\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':userId')\n  async findOne(\n    @Request() req,\n    @Param('userId', ParseUUIDPipe) userId: string,\n  ): Promise {\n    const requestingUserId = req.user.sub;\n    // check\n    const friendshipStatus = await this.friendService.get(\n      requestingUserId,\n      userId,\n    );\n    if (friendshipStatus !== FriendshipTwoWayRelationStatus.Friends) {\n      throw new HttpException(\n        `Not friends, cannot see wallet`,\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return this.walletService.findOrCreate(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WalletModule.html":{"url":"modules/WalletModule.html","title":"module - WalletModule","body":"\n                   \n\n\n\n\n    Modules\n    WalletModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WalletModule\n\n\n\ncluster_WalletModule_imports\n\n\n\ncluster_WalletModule_exports\n\n\n\ncluster_WalletModule_providers\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nWalletModule\n\nWalletModule\n\nWalletModule -->\n\nCoreModule->WalletModule\n\n\n\n\n\nWalletService \n\nWalletService \n\nWalletService  -->\n\nWalletModule->WalletService \n\n\n\n\n\nWalletService\n\nWalletService\n\nWalletModule -->\n\nWalletService->WalletModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/extensions/wallet/wallet.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WalletService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WalletController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CoreModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WalletService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { WalletService } from './wallet.service';\nimport { WalletController } from './wallet.controller';\nimport { CoreModule } from '../../core/core.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Wallet } from './entities/wallet.entity';\nimport { FriendService } from '../../core/friend/friend.service';\n\n@Module({\n  imports: [CoreModule, TypeOrmModule.forFeature([Wallet])],\n  controllers: [WalletController],\n  providers: [WalletService],\n  exports: [WalletService],\n})\nexport class WalletModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WalletService.html":{"url":"injectables/WalletService.html","title":"injectable - WalletService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  WalletService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/wallet/wallet.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Async\n                                updateNormalCurrency\n                            \n                            \n                                    Async\n                                updatePremiumCurrency\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(walletRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/extensions/wallet/wallet.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        walletRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOrCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/wallet/wallet.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateNormalCurrency\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateNormalCurrency(userId: string, newAmount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/wallet/wallet.service.ts:28\n                \n            \n\n\n            \n                \n                    Set new amount for the normal currency\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newAmount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePremiumCurrency\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePremiumCurrency(userId: string, newAmount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/wallet/wallet.service.ts:42\n                \n            \n\n\n            \n                \n                    Set new amount for the premium currency\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newAmount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Wallet } from './entities/wallet.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class WalletService {\n  constructor(\n    @InjectRepository(Wallet) private walletRepository: Repository,\n  ) {}\n\n  async findOrCreate(userId: string): Promise {\n    const wallet = await this.walletRepository.findOne(userId);\n    if (wallet != null) {\n      return wallet;\n    }\n\n    const newWallet = new Wallet();\n    newWallet.userId = userId;\n    return this.walletRepository.save(newWallet);\n  }\n\n  /**\n   * Set new amount for the normal currency\n   * @param userId\n   * @param newAmount\n   */\n  async updateNormalCurrency(\n    userId: string,\n    newAmount: number,\n  ): Promise {\n    const wallet = await this.findOrCreate(userId);\n    wallet.normalCurrency = newAmount;\n    return this.walletRepository.save(wallet);\n  }\n\n  /**\n   * Set new amount for the premium currency\n   * @param userId\n   * @param newAmount\n   */\n  async updatePremiumCurrency(\n    userId: string,\n    newAmount: number,\n  ): Promise {\n    const wallet = await this.findOrCreate(userId);\n    wallet.premiumCurrency = newAmount;\n    return this.walletRepository.save(wallet);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/_BaseGroupException.html":{"url":"classes/_BaseGroupException.html","title":"class - _BaseGroupException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  _BaseGroupException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne(\n      targetUserId,\n    );\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/_BaseLeaderboardException.html":{"url":"classes/_BaseLeaderboardException.html","title":"class - _BaseLeaderboardException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  _BaseLeaderboardException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\n\nexport class _BaseLeaderboardException extends Error {}\nexport class LeaderboardEntryNotFoundError extends _BaseLeaderboardException {}\nexport class CouldNotUpdateLeaderboardEntryError extends _BaseLeaderboardException {}\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(private readonly redisService: RedisService) {}\n\n  async getEntry(\n    leaderboardId: string,\n    userId: string,\n  ): Promise {\n    const client = this.redisService.getClient();\n    const [score, rank] = await Promise.all([\n      client.zscore(leaderboardId, userId),\n      client.zrevrank(leaderboardId, userId),\n    ]);\n    if (score == null || rank == null) {\n      throw new LeaderboardEntryNotFoundError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" was not found`,\n      );\n    }\n    return {\n      userId: userId,\n      score: Number(score),\n      rank: Number(rank),\n    };\n  }\n\n  async getEntries(\n    leaderboardId: string,\n    options?: {\n      offset: string;\n      limit: string;\n    },\n  ): Promise {\n    const client = this.redisService.getClient();\n\n    let start = 0;\n    let stop = -1;\n\n    let normalizedOffset = null;\n    let normalizedLimit = null;\n\n    if (options.offset && isFinite(Number(options.offset))) {\n      normalizedOffset = Number(options.offset);\n      start = normalizedOffset;\n    }\n    if (options.limit && isFinite(Number(options.limit))) {\n      normalizedLimit = Number(options.limit);\n      stop = start + Number(options.limit) - 1;\n    }\n\n    const result = await client.zrevrange(\n      leaderboardId,\n      start,\n      stop,\n      'WITHSCORES',\n    );\n\n    // construct entries array\n    const entries: LeaderboardEntryDto[] = [];\n    for (let i = 0; i  {\n    const client = this.redisService.getClient();\n\n    const updatedEntryCount = await client.zadd(leaderboardId, score, userId);\n    if (updatedEntryCount !== 1) {\n      throw new CouldNotUpdateLeaderboardEntryError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" could not be updated with score \"${score}\"`,\n      );\n    }\n\n    return this.getEntry(leaderboardId, userId);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/dto/bad-request.dto.ts\n            \n            class\n            BadRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/common/dto/bad-request.dto.ts\n            \n            class\n            ErrorDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/guard/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/account/account.controller.ts\n            \n            controller\n            AccountController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/account/account.service.ts\n            \n            injectable\n            AccountService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/core/account/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/account/auth.controller.ts\n            \n            function\n            _generateJwt\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/account/dto/access-token.dto.ts\n            \n            class\n            AccessTokenDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/account/dto/auth.dto.ts\n            \n            class\n            AuthDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/account/dto/create-account.dto.ts\n            \n            class\n            CreateAccountDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/account/dto/update-account.dto.ts\n            \n            class\n            UpdateAccountDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/account/entities/account.entity.ts\n            \n            class\n            Account\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/core/account/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/friend/dto/friendship-two-way-relation-status.dto.ts\n            \n            class\n            FriendshipTwoWayRelationStatusDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts\n            \n            class\n            FriendshipTwoWayRelationStatusesDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/friend/dto/reference-friend.dto.ts\n            \n            class\n            ReferenceFriendDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/friend/entities/friendship-composite-view.entity.ts\n            \n            class\n            FriendshipComposite\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/friend/entities/friendship.entity.ts\n            \n            class\n            Friendship\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/friend/friend.controller.ts\n            \n            controller\n            FriendController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/friend/friend.service.ts\n            \n            class\n            SelfReferenceError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/friend/friend.service.ts\n            \n            injectable\n            FriendService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                src/core/friend/self-reference-error.filter.ts\n            \n            class\n            SelfReferenceErrorFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/group/dto/create-group.dto.ts\n            \n            class\n            CreateGroupDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/group/dto/group.dto.ts\n            \n            class\n            GroupDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/group/dto/groups.dto.ts\n            \n            class\n            GroupsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/group/dto/membership.dto.ts\n            \n            class\n            MembershipDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/group/dto/memberships.dto.ts\n            \n            class\n            MembershipsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/group/dto/update-group.dto.ts\n            \n            class\n            UpdateGroupDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/entities/group-member.entity.ts\n            \n            class\n            GroupMember\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/group/entities/group.entity.ts\n            \n            class\n            Group\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/group/filters/group-exception.filter.ts\n            \n            class\n            GroupExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/group/group.controller.ts\n            \n            controller\n            GroupController\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            _BaseGroupException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            BannedFromGroupError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            CannotBanError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            CannotDeleteGroupError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            CannotKickError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            CannotLeaveGroupError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            GroupDoesNotExistError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            NotGroupAdminError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            NotGroupMemberError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            class\n            NotInvitedToGroupError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/group/group.service.ts\n            \n            injectable\n            GroupService\n            \n                75 %\n                (12/16)\n            \n        \n        \n            \n                \n                src/core/leaderboard/dto/leaderboard-entries.dto.ts\n            \n            class\n            LeaderboardEntriesDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/leaderboard/dto/leaderboard-entry.dto.ts\n            \n            class\n            LeaderboardEntryDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/leaderboard/dto/update-entry.dto.ts\n            \n            class\n            UpdateEntryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/leaderboard/filters/leaderboard-exception.filter.ts\n            \n            class\n            LeaderboardExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/leaderboard/leaderboard.controller.ts\n            \n            controller\n            LeaderboardController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/leaderboard/leaderboard.service.ts\n            \n            class\n            _BaseLeaderboardException\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/leaderboard/leaderboard.service.ts\n            \n            class\n            CouldNotUpdateLeaderboardEntryError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/leaderboard/leaderboard.service.ts\n            \n            class\n            LeaderboardEntryNotFoundError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/leaderboard/leaderboard.service.ts\n            \n            injectable\n            LeaderboardService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/extensions/profile/dto/create-profile.dto.ts\n            \n            class\n            CreateProfileDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/extensions/profile/dto/profile.dto.ts\n            \n            class\n            ProfileDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/extensions/profile/dto/update-profile.dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/extensions/profile/entities/profile.entity.ts\n            \n            class\n            Profile\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/extensions/profile/profile.controller.ts\n            \n            controller\n            ProfileController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/extensions/profile/profile.service.ts\n            \n            class\n            ProfileAlreadyExistsError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/extensions/profile/profile.service.ts\n            \n            injectable\n            ProfileService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/extensions/wallet/entities/wallet.entity.ts\n            \n            class\n            Wallet\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/extensions/wallet/wallet.controller.ts\n            \n            controller\n            WalletController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/extensions/wallet/wallet.service.ts\n            \n            injectable\n            WalletService\n            \n                40 %\n                (2/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.7.12\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            nestjs-redis : ^1.2.8\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.30\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FriendshipOneWayRelationStatus   (src/.../friendship-one-way-relation-status.enum.ts)\n                        \n                        \n                            FriendshipTwoWayRelationStatus   (src/.../friendship-two-way-relation-status.enum.ts)\n                        \n                        \n                            GroupMembershipStatus   (src/.../group-membership-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/friend/enums/friendship-one-way-relation-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FriendshipOneWayRelationStatus\n                    \n                \n                        \n                            \n                                 Ok\n                            \n                        \n                        \n                            \n                                Value : ok\n                            \n                        \n                        \n                            \n                                 NoAction\n                            \n                        \n                        \n                            \n                                Value : noaction\n                            \n                        \n                        \n                            \n                                 DidBlock\n                            \n                        \n                        \n                            \n                                Value : didblock\n                            \n                        \n                        \n                            \n                                 GotBlocked\n                            \n                        \n                        \n                            \n                                Value : gotblocked\n                            \n                        \n            \n        \n\n    src/core/friend/enums/friendship-two-way-relation-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FriendshipTwoWayRelationStatus\n                    \n                \n                        \n                            \n                                 Friends\n                            \n                        \n                        \n                            \n                                Value : friends\n                            \n                        \n                        \n                            \n                                 SentRequest\n                            \n                        \n                        \n                            \n                                Value : sentrequest\n                            \n                        \n                        \n                            \n                                 ReceivedRequest\n                            \n                        \n                        \n                            \n                                Value : receivedrequest\n                            \n                        \n                        \n                            \n                                 BlockedByOther\n                            \n                        \n                        \n                            \n                                Value : blockedbyother\n                            \n                        \n                        \n                            \n                                 BlockedByYou\n                            \n                        \n                        \n                            \n                                Value : blockedbyyou\n                            \n                        \n            \n        \n\n    src/core/group/enums/group-membership-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        GroupMembershipStatus\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : groupadmin\n                            \n                        \n                        \n                            \n                                 Member\n                            \n                        \n                        \n                            \n                                Value : groupmember\n                            \n                        \n                        \n                            \n                                 Invited\n                            \n                        \n                        \n                            \n                                Value : groupinvited\n                            \n                        \n                        \n                            \n                                 Banned\n                            \n                        \n                        \n                            \n                                Value : groupbanned\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            _generateJwt   (src/.../auth.controller.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/account/auth.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            _generateJwt\n                        \n                        \n                    \n                \n            \n            \n                \n_generateJwt(jwtService, account)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    jwtService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    account\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCaterva\nGetting Started\nRequirements\n\nPostgres\nRedis\n\nAlternatively for quick local development run $ docker-compose up -d in project folder\nSet Environment Variables\nConnections will default to localhost otherwise\n\nDATABASE_URL for Postgres DSN\nREDIS_URL for Redis\nSECRET for JWT Secrete\n\nRun\n$ git clone https://github.com/catervajs/caterva.git\n$ npm install\n$ npm run startOpenAPI Specifications\nAfter launching the project, Swagger UI can be accessed through /api\nAlternatively, OpenAPI specification can be downloaded as a JSON file from /api-json, and used for generating client libraries\nModules Documentation\nLatest documentation is available in the documentation directory\nDocumentation can be generated and viewed with $npm run document\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExtensionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FriendModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LeaderboardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WalletModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_exports\n\n\n\ncluster_AccountModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_ExtensionsModule\n\n\n\ncluster_ExtensionsModule_imports\n\n\n\ncluster_FriendModule\n\n\n\ncluster_FriendModule_exports\n\n\n\ncluster_FriendModule_providers\n\n\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_exports\n\n\n\ncluster_GroupModule_providers\n\n\n\ncluster_LeaderboardModule\n\n\n\ncluster_LeaderboardModule_exports\n\n\n\ncluster_LeaderboardModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_WalletModule\n\n\n\ncluster_WalletModule_exports\n\n\n\ncluster_WalletModule_providers\n\n\n\n\nAccountService \n\nAccountService \n\n\n\nAccountModule\n\nAccountModule\n\nAccountService  -->\n\nAccountModule->AccountService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nAccountModule->CoreModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAccountModule -->\n\nJwtStrategy->AccountModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nAccountModule \n\nAccountModule \n\nAccountModule  -->\n\nCoreModule->AccountModule \n\n\n\n\n\nFriendModule \n\nFriendModule \n\nFriendModule  -->\n\nCoreModule->FriendModule \n\n\n\n\n\nGroupModule \n\nGroupModule \n\nGroupModule  -->\n\nCoreModule->GroupModule \n\n\n\n\n\nLeaderboardModule \n\nLeaderboardModule \n\nLeaderboardModule  -->\n\nCoreModule->LeaderboardModule \n\n\n\n\n\nWalletModule\n\nWalletModule\n\nWalletModule -->\n\nCoreModule->WalletModule\n\n\n\n\n\nExtensionsModule\n\nExtensionsModule\n\nAppModule -->\n\nExtensionsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nFriendModule\n\nFriendModule\n\nCoreModule -->\n\nFriendModule->CoreModule\n\n\n\n\n\nFriendService \n\nFriendService \n\nFriendService  -->\n\nFriendModule->FriendService \n\n\n\n\n\nGroupModule\n\nGroupModule\n\nCoreModule -->\n\nGroupModule->CoreModule\n\n\n\n\n\nGroupService \n\nGroupService \n\nGroupService  -->\n\nGroupModule->GroupService \n\n\n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nCoreModule -->\n\nLeaderboardModule->CoreModule\n\n\n\n\n\nLeaderboardService \n\nLeaderboardService \n\nLeaderboardService  -->\n\nLeaderboardModule->LeaderboardService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nExtensionsModule -->\n\nProfileModule->ExtensionsModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\nExtensionsModule -->\n\nWalletModule->ExtensionsModule\n\n\n\n\n\nWalletService \n\nWalletService \n\nWalletService  -->\n\nWalletModule->WalletService \n\n\n\n\n\nFriendService\n\nFriendService\n\nFriendModule -->\n\nFriendService->FriendModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\nLeaderboardService\n\nLeaderboardService\n\nLeaderboardModule -->\n\nLeaderboardService->LeaderboardModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nWalletService\n\nWalletService\n\nWalletModule -->\n\nWalletService->WalletModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    46 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
