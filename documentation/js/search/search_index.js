var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AccessTokenDto.html",[0,0.293,1,3.136]],["body/classes/AccessTokenDto.html",[0,0.457,1,5.7,2,0.782,3,0.137,4,0.137,5,0.115,6,7.256,7,6.226,8,0.815,9,2.053,10,6.686,11,0.957,12,0.013,13,0.95,14,0.92,15,6.226,16,0.228,17,3.16,18,1.825,19,0.137,20,0.01,21,0.012,22,0.01]],["title/classes/Account.html",[0,0.293,23,1.772]],["body/classes/Account.html",[0,0.336,2,0.575,3,0.101,4,0.101,5,0.085,8,0.99,9,1.697,11,1.25,12,0.014,13,1.044,14,1.155,16,0.219,17,2.324,18,1.342,19,0.101,20,0.007,21,0.01,22,0.007,23,2.663,24,4.579,25,2.081,26,5.255,27,4.49,28,4.83,29,5.255,30,5.255,31,2.436,32,5.825,33,4.49,34,2.29,35,2.846,36,7.099,37,7.099,38,6.139,39,6.139,40,5.839,41,4.579,42,4.207,43,4.49,44,4.579,45,4.579,46,4.579,47,4.579,48,5.223,49,4.579,50,3.073,51,5.999,52,4.579,53,4.49,54,4.579,55,3.772,56,4.755,57,3.987,58,1.342,59,6.181]],["title/controllers/AccountController.html",[60,1.57,61,3.136]],["body/controllers/AccountController.html",[0,0.342,3,0.103,4,0.103,5,0.086,8,0.611,11,0.933,12,0.014,14,0.998,16,0.283,18,1.367,19,0.103,20,0.008,21,0.01,22,0.008,23,3.483,25,1.72,35,2.458,60,1.834,61,4.769,62,1.834,63,4.665,64,2.765,65,2.211,66,6.071,67,1.936,68,6.071,69,6.75,70,4.665,71,5.194,72,4.665,73,4.665,74,2.053,75,2.553,76,1.549,77,2.368,78,2.005,79,4.665,80,4.665,81,4.665,82,4.496,83,4.779,84,4.665,85,5.726,86,4.665,87,4.665,88,2.211,89,3.818,90,3.818,91,2.934,92,2.813,93,4.769,94,3.368,95,2.26,96,0.611,97,4.245,98,3.664,99,2.934,100,4.769,101,1.764,102,4.245,103,3.664,104,3.131,105,2.765,106,4.665,107,2.765,108,3.368,109,2.617,110,2.934,111,2.934,112,4.665,113,4.665,114,2.367,115,1.367,116,1.953,117,4.665,118,4.665,119,1.604,120,4.665,121,3.818,122,4.665,123,4.665,124,4.665]],["title/modules/AccountModule.html",[125,1.35,126,2.68]],["body/modules/AccountModule.html",[0,0.388,3,0.116,4,0.116,5,0.098,12,0.014,16,0.297,19,0.116,20,0.009,21,0.011,22,0.009,23,2.346,61,5.621,62,2.584,96,0.692,97,5.188,98,4.152,108,3.816,125,2.42,126,5.444,127,2.346,128,2.449,129,2.683,130,2.683,131,2.561,132,3.632,133,3.632,134,4.602,135,4.602,136,4.602,137,5.667,138,3.336,139,2.683,140,2.683,141,5.286,142,5.621,143,5.286,144,3.324,145,1.605,146,5.286,147,6.574,148,3.816,149,5.286,150,4.152,151,5.286,152,2.817,153,5.286,154,5.286,155,4.602,156,4.602,157,4.602,158,5.286,159,5.286,160,5.286]],["title/injectables/AccountService.html",[97,2.511,161,0.916]],["body/injectables/AccountService.html",[0,0.266,3,0.08,4,0.08,5,0.067,8,0.475,11,1.137,12,0.014,13,1.056,14,1.094,16,0.258,19,0.08,20,0.006,21,0.008,22,0.006,23,3.581,25,1.886,26,5.063,28,4.653,29,5.063,30,5.063,31,2.926,58,1.064,65,1.865,67,2.077,71,4.968,74,2.18,75,2.8,76,1.699,77,2.543,78,2.086,85,5.344,88,2.475,96,0.475,97,3.22,99,2.283,100,4.023,101,1.373,108,2.62,116,2.022,119,1.722,145,1.102,161,1.175,162,1.934,163,3.629,164,3.697,165,5.121,166,5.121,167,5.121,168,5.121,169,1.732,170,3.629,171,2.534,172,3.629,173,5.121,174,5.121,175,3.629,176,4.459,177,4.023,178,5.121,179,3.629,180,3.248,181,5.121,182,3.629,183,4.459,184,5.121,185,3.629,186,5.121,187,5.121,188,3.629,189,4.459,190,5.121,191,3.629,192,4.459,193,3.629,194,3.629,195,2.481,196,1.427,197,3.629,198,1.322,199,1.26,200,0.925,201,5.933,202,3.629,203,5.933,204,3.629,205,5.933,206,3.629,207,5.121,208,1.027,209,3.629,210,3.629,211,3.629,212,3.629,213,6.796]],["title/controllers/AppController.html",[60,1.57,214,3.136]],["body/controllers/AppController.html",[0,0.437,3,0.131,4,0.131,5,0.11,8,0.781,12,0.014,13,0.926,14,0.881,16,0.276,18,1.748,19,0.131,20,0.01,21,0.012,22,0.01,35,2.172,60,2.781,62,2.345,65,2.576,77,2.092,96,0.781,114,3.027,115,1.748,119,1.417,214,5.557,215,5.964,216,6.792,217,5.964,218,5.964,219,5.062,220,5.193,221,5.193,222,5.193,223,5.964]],["title/modules/AppModule.html",[125,1.35,224,2.882]],["body/modules/AppModule.html",[0,0.399,3,0.12,4,0.12,5,0.101,11,0.835,12,0.014,16,0.289,19,0.12,20,0.009,21,0.011,22,0.009,40,4.829,62,2.63,96,0.712,125,2.45,127,2.413,128,2.519,129,2.759,130,2.759,131,2.634,132,3.677,133,2.759,138,3.395,139,2.759,140,2.759,144,3.419,145,1.65,152,3.564,214,5.692,219,5.305,220,4.733,224,5.921,225,4.733,226,4.733,227,4.733,228,4.97,229,4.97,230,5.436,231,5.436,232,4.733,233,5.436,234,5.436,235,4.733,236,4.733,237,5.436,238,5.436,239,5.436,240,5.436,241,5.436,242,5.436]],["title/injectables/AppService.html",[161,0.916,219,2.68]],["body/injectables/AppService.html",[0,0.445,3,0.134,4,0.134,5,0.112,8,0.794,12,0.014,13,0.935,14,0.896,16,0.261,18,1.777,19,0.134,20,0.01,21,0.012,22,0.01,35,2.208,65,2.602,77,2.127,96,0.794,119,1.441,161,1.639,162,3.231,216,6.829,219,4.795,221,5.28,222,6.22,243,6.064,244,6.064,245,6.064,246,6.064]],["title/controllers/AuthController.html",[60,1.57,142,3.136]],["body/controllers/AuthController.html",[0,0.275,1,2.943,3,0.083,4,0.083,5,0.069,8,0.49,10,5.691,11,1.004,12,0.014,13,0.49,14,0.966,16,0.268,18,1.098,19,0.083,20,0.006,21,0.009,22,0.006,23,3.547,25,1.665,28,3.78,31,2.595,34,1.915,35,2.38,60,1.473,62,1.473,64,2.22,65,1.907,67,1.995,75,2.472,76,1.5,77,2.293,78,1.969,89,2.356,90,2.356,94,2.705,95,1.815,96,0.49,97,3.796,98,2.943,104,2.514,105,2.22,107,2.22,108,2.705,115,1.535,116,1.786,119,1.634,142,4.113,150,2.943,169,1.267,183,4.559,189,4.559,192,4.559,198,1.907,199,1.692,200,1.665,208,1.849,247,3.262,248,3.746,249,5.236,250,5.236,251,5.236,252,5.236,253,3.746,254,6.486,255,3.746,256,3.746,257,7.461,258,3.746,259,3.746,260,3.746,261,3.746,262,3.746,263,3.746,264,3.746,265,3.746,266,3.746,267,5.402,268,3.746,269,5.691,270,4.965,271,3.746,272,3.746,273,3.746,274,3.262,275,3.262,276,3.262,277,3.746,278,3.746,279,3.746,280,3.746,281,3.746,282,3.746,283,1.532,284,3.746,285,5.691,286,3.746,287,3.746,288,2.131,289,2.38,290,5.008,291,1.915,292,6.536,293,6.536,294,6.536,295,3.746,296,3.746,297,3.746,298,3.746,299,3.746,300,3.746,301,3.746,302,3.746,303,3.746]],["title/classes/AuthDto.html",[0,0.293,254,3.136]],["body/classes/AuthDto.html",[0,0.458,2,0.785,3,0.138,4,0.138,5,0.116,8,0.818,9,2.058,11,0.96,12,0.013,13,0.952,14,0.924,16,0.229,17,3.172,18,1.832,19,0.138,20,0.01,21,0.012,22,0.01,31,2.801,254,5.712,304,6.25,305,6.25]],["title/classes/BadRequestDto.html",[0,0.293,306,2.68]],["body/classes/BadRequestDto.html",[0,0.507,2,0.721,3,0.126,4,0.126,5,0.106,8,0.752,9,1.957,11,1.184,12,0.014,13,1.008,14,1.138,16,0.253,17,2.915,18,1.683,19,0.152,20,0.009,21,0.011,22,0.009,42,4.099,76,1.318,95,3.596,96,0.752,291,2.175,306,4.642,307,6.864,308,5,309,4.981,310,4.981,311,4.981,312,5.83,313,5.743,314,5.743,315,5.743,316,5.743,317,3.854]],["title/classes/BannedFromGroupError.html",[0,0.293,318,1.934]],["body/classes/BannedFromGroupError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.362,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.176,336,1.424,337,2.828,338,1.827,339,1.424,340,1.827,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/CannotBanError.html",[0,0.293,340,1.934]],["body/classes/CannotBanError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.176,336,1.424,337,2.828,338,1.827,339,1.424,340,2.129,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/CannotDeleteGroupError.html",[0,0.293,338,1.934]],["body/classes/CannotDeleteGroupError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.176,336,1.424,337,2.828,338,2.129,339,1.424,340,1.827,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/CannotKickError.html",[0,0.293,341,1.934]],["body/classes/CannotKickError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.176,336,1.424,337,2.828,338,1.827,339,1.424,340,1.827,341,2.129,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/CannotLeaveGroupError.html",[0,0.293,339,1.934]],["body/classes/CannotLeaveGroupError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.176,336,1.424,337,2.828,338,1.827,339,1.827,340,1.827,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/modules/CoreModule.html",[125,1.35,228,2.511]],["body/modules/CoreModule.html",[0,0.389,3,0.117,4,0.117,5,0.098,12,0.014,16,0.282,19,0.117,20,0.009,21,0.011,22,0.009,96,0.694,125,2.423,126,5.539,127,2.354,128,2.457,129,2.691,130,2.691,131,2.569,132,2.691,133,3.637,138,3.343,139,2.691,140,2.691,152,3.51,228,5.257,464,4.617,465,4.617,466,4.617,467,5.539,468,5.539,469,5.539,470,5.303,471,5.303,472,5.303,473,5.303,474,5.303]],["title/classes/CouldNotUpdateLeaderboardEntryError.html",[0,0.293,475,2.68]],["body/classes/CouldNotUpdateLeaderboardEntryError.html",[0,0.512,2,0.55,3,0.096,4,0.096,5,0.081,12,0.014,13,0.951,16,0.255,19,0.154,20,0.009,21,0.009,22,0.007,34,2.045,67,1.485,78,1.537,96,0.574,114,2.224,115,1.284,116,1.906,119,1.385,161,1.337,199,1.876,200,1.485,208,1.852,288,1.9,291,1.284,320,2.118,372,2.481,389,1.988,402,2.677,426,2.319,475,4.394,476,3.164,477,4.388,478,4.726,479,2.597,480,2.597,481,3.269,482,3.911,483,2.756,484,2.597,485,2.941,486,3.911,487,2.458,488,4.394,489,4.697,490,5.195,491,2.941,492,4.394,493,4.726,494,4.697,495,4.394,496,2.756,497,3.164,498,3.164,499,3.164,500,3.164,501,3.164,502,4.117,503,2.941,504,2.756,505,2.756,506,5.037,507,4.207,508,4.726,509,4.726,510,4.207,511,3.164,512,3.164,513,3.164,514,3.164,515,3.164,516,4.207,517,3.164,518,3.164,519,3.164,520,3.164,521,4.207,522,3.164,523,3.164,524,3.164,525,3.164]],["title/classes/CreateAccountDto.html",[0,0.293,71,2.68]],["body/classes/CreateAccountDto.html",[0,0.426,2,0.73,3,0.128,4,0.128,5,0.108,8,0.761,9,1.972,11,1.189,12,0.013,13,1.072,14,1.143,16,0.213,17,2.951,18,1.704,19,0.128,20,0.009,21,0.011,22,0.009,25,2.046,26,5.862,28,5.387,29,5.862,30,5.862,71,4.677,526,7.91,527,5.063,528,5.815,529,5.815,530,5.815,531,5.815,532,3.903]],["title/classes/CreateGroupDto.html",[0,0.293,533,2.882]],["body/classes/CreateGroupDto.html",[0,0.451,2,0.771,3,0.135,4,0.135,5,0.114,8,0.804,9,2.037,11,1.106,12,0.013,13,0.942,14,1.064,19,0.135,20,0.01,21,0.012,22,0.01,25,1.834,76,1.752,349,3.39,374,3.196,533,5.198,534,7.637,535,5.35,536,6.144,537,6.144]],["title/classes/CreateProfileDto.html",[0,0.293,538,2.511]],["body/classes/CreateProfileDto.html",[0,0.412,2,0.705,3,0.124,4,0.124,5,0.104,8,0.735,9,1.93,11,1.175,12,0.014,13,1.065,14,1.13,16,0.205,17,3.462,18,1.645,19,0.124,20,0.009,21,0.011,22,0.009,25,2.029,34,2.334,35,2.044,532,3.768,538,4.29,539,7.834,540,4.888,541,6.399,542,6.399,543,6.399,544,6.399,545,5.614,546,5.614,547,6.822,548,5.614,549,5.614,550,5.614,551,5.614]],["title/classes/ErrorDto.html",[0,0.293,312,3.136]],["body/classes/ErrorDto.html",[0,0.516,2,0.742,3,0.13,4,0.13,5,0.109,8,0.774,9,1.991,11,1.081,12,0.014,13,1.04,14,1.04,16,0.257,17,2.999,18,1.732,19,0.155,20,0.01,21,0.011,22,0.01,42,3.503,76,1.724,95,3.409,96,0.774,291,1.732,306,3.966,307,6.542,308,5.146,309,3.966,310,3.966,311,3.966,312,5.902,317,5.043,552,5.91,553,5.91]],["title/modules/ExtensionsModule.html",[125,1.35,229,2.511]],["body/modules/ExtensionsModule.html",[0,0.432,3,0.13,4,0.13,5,0.109,12,0.014,16,0.274,19,0.13,20,0.01,21,0.011,22,0.01,96,0.771,125,2.537,127,2.614,128,2.729,129,2.988,130,2.988,131,2.853,132,2.988,133,2.988,138,3.563,139,2.988,140,2.988,152,3.741,229,5.16,554,5.127,555,5.127,556,5.405,557,5.405,558,5.888,559,5.888,560,5.888]],["title/controllers/FriendController.html",[60,1.57,561,3.136]],["body/controllers/FriendController.html",[0,0.202,3,0.061,4,0.061,5,0.051,8,0.361,11,1.021,12,0.014,13,0.965,14,1.012,16,0.251,18,0.807,19,0.061,20,0.004,21,0.007,22,0.004,25,1.745,35,2.494,60,1.083,62,1.083,64,1.632,65,1.523,67,2.032,75,2.59,76,1.571,77,2.402,78,2.021,82,2.631,83,5.016,89,1.732,90,3.82,91,1.732,92,3.522,94,1.988,95,1.334,96,0.361,102,4.41,105,4.156,107,1.632,109,1.545,110,1.732,111,1.732,114,1.398,115,0.807,116,2.108,119,1.627,121,4.306,180,3.262,199,1.574,200,1.629,208,1.809,283,2.31,285,3.642,389,2.37,395,1.223,429,3.04,561,3.286,562,2.754,563,1.732,564,5.058,565,5.221,566,5.058,567,5.058,568,5.058,569,5.058,570,5.058,571,5.221,572,2.754,573,5.648,574,5.857,575,4.596,576,4.437,577,4.437,578,5.379,579,2.754,580,5.857,581,2.754,582,2.754,583,5.648,584,2.754,585,2.754,586,2.754,587,6.073,588,3.81,589,2.754,590,2.754,591,2.754,592,4.596,593,2.754,594,2.754,595,2.754,596,2.754,597,2.754,598,2.754,599,4.076,600,3.587,601,2.754,602,2.754,603,3.394,604,2.754,605,5.648,606,3.347,607,5.648,608,2.754,609,2.754,610,2.754,611,5.648,612,2.754,613,2.754,614,2.164,615,2.837,616,2.164,617,1.848,618,3.286,619,2.229,620,2.164,621,5.221,622,2.754,623,2.754,624,2.754,625,2.754,626,1.988,627,2.754,628,2.754,629,2.754,630,4.596,631,2.164,632,2.754,633,2.754,634,6.395,635,2.754,636,5.32,637,6.395,638,2.754,639,2.754,640,4.183,641,2.754,642,2.754,643,2.754,644,2.754,645,2.754,646,2.754,647,2.754,648,2.754,649,2.754,650,3.394,651,2.754,652,2.754,653,2.754,654,2.754,655,2.754,656,2.754,657,2.754]],["title/modules/FriendModule.html",[125,1.35,467,2.68]],["body/modules/FriendModule.html",[0,0.412,3,0.124,4,0.124,5,0.104,12,0.014,16,0.291,19,0.124,20,0.009,21,0.011,22,0.009,62,2.682,96,0.735,125,2.485,127,2.492,128,2.602,129,2.849,130,2.849,131,2.72,132,3.73,133,3.73,138,3.462,139,2.849,140,2.849,144,3.531,145,1.705,152,2.991,467,5.41,561,5.773,606,3.327,615,4.663,616,4.41,658,4.888,659,4.888,660,4.888,661,5.614,662,4.41,663,4.579,664,4.41,665,4.053,666,4.41,667,5.614,668,5.614]],["title/injectables/FriendService.html",[161,0.916,615,2.24]],["body/injectables/FriendService.html",[0,0.21,3,0.038,4,0.038,5,0.032,8,0.225,11,1.018,12,0.014,13,1.069,14,0.979,16,0.211,19,0.063,20,0.003,21,0.005,22,0.003,23,3.503,25,1.688,31,0.626,34,1.52,58,0.504,65,1.045,67,1.972,75,2.506,76,1.52,77,2.279,78,1.936,92,2.673,96,0.225,116,2.043,119,1.756,145,0.522,161,0.659,162,0.916,169,0.971,171,2.163,177,2.254,196,0.676,198,2.525,199,1.727,200,1.402,208,1.75,283,2.25,288,1.407,289,2.366,291,0.504,320,0.522,331,1.085,388,3.349,389,2.407,419,0.763,429,2.302,496,1.805,563,1.805,565,3.769,571,3.769,576,2.254,577,2.254,578,4.531,588,3.962,592,5.419,599,5.496,600,3.469,603,1.926,606,3.926,615,1.61,617,1.926,618,1.35,619,3.985,620,1.35,626,3.115,636,2.072,662,1.35,663,1.926,664,1.35,665,1.241,666,1.35,669,1.496,670,3.217,671,3.217,672,3.217,673,3.217,674,2.87,675,3.217,676,3.217,677,3.217,678,2.87,679,1.719,680,3.217,681,1.719,682,2.499,683,1.719,684,1.719,685,3.744,686,6.35,687,6.872,688,6.292,689,1.719,690,4.446,691,5.217,692,1.719,693,2.499,694,4.325,695,4.707,696,4.71,697,4.791,698,5.022,699,6.015,700,2.48,701,1.719,702,1.719,703,3.757,704,2.499,705,1.719,706,3.757,707,1.719,708,1.719,709,2.499,710,1.719,711,4.178,712,4.178,713,1.719,714,2.499,715,1.719,716,1.719,717,1.719,718,1.719,719,2.499,720,1.719,721,2.499,722,1.719,723,1.719,724,1.719,725,2.499,726,1.719,727,1.719,728,1.926,729,3.464,730,1.496,731,1.496,732,4.791,733,2.903,734,2.903,735,3.217,736,3.217,737,3.217,738,3.217,739,4.515,740,4.178,741,1.496,742,2.499,743,4.178,744,4.791,745,4.178,746,4.178,747,2.499,748,1.496,749,2.499,750,1.496,751,1.496,752,1.496,753,4.178,754,6.038,755,1.496,756,4.178,757,1.496,758,1.496,759,1.496,760,1.496,761,1.496,762,1.496,763,1.496,764,1.496,765,1.496,766,1.496,767,1.496,768,1.496,769,1.496,770,1.496,771,1.496,772,2.499,773,3.217,774,3.757,775,3.757,776,5.656,777,4.178,778,2.499,779,2.499,780,2.499,781,1.496,782,1.496,783,1.875,784,2.499]],["title/classes/Friendship.html",[0,0.293,606,2.366]],["body/classes/Friendship.html",[0,0.36,2,0.616,3,0.108,4,0.108,5,0.091,8,0.642,9,1.774,11,1.218,12,0.014,13,0.954,14,1.157,16,0.253,19,0.108,20,0.008,21,0.01,22,0.008,23,3.475,25,2.02,27,4.639,33,4.639,35,2.851,42,4.318,43,4.639,50,3.291,53,4.639,55,3.943,56,3.943,58,1.437,289,2.517,331,1.855,408,2.272,588,2.613,592,4.639,599,4.89,606,3.716,619,2.613,690,5.053,696,3.291,699,5.43,728,3.291,734,3.852,783,3.182,785,4.904,786,5.459,787,5.723,788,5.459,789,4.904,790,5.436,791,4.904,792,4.904,793,4.904,794,4.904,795,6.343,796,3.291,797,4.904,798,4.904,799,5.43,800,6.019,801,3.852,802,4.27,803,4.904,804,4.926]],["title/classes/FriendshipComposite.html",[0,0.293,663,2.68]],["body/classes/FriendshipComposite.html",[0,0.392,2,0.671,3,0.118,4,0.118,5,0.099,8,0.7,9,1.873,11,1.155,12,0.014,13,0.984,14,1.111,16,0.242,19,0.118,20,0.009,21,0.011,22,0.009,35,2.737,58,1.567,331,2.022,430,2.478,588,2.849,592,5.045,599,5.045,606,3.924,619,2.849,663,4.444,665,5.578,690,5.185,694,3.86,695,4.2,696,3.588,728,3.588,805,7.726,806,5.347,807,7.517,808,7.517,809,8.128,810,5.347,811,5.347,812,5.347,813,5.347,814,6.621,815,5.347,816,5.347,817,6.621,818,6.621,819,5.347,820,5.347,821,5.347,822,5.347]],["title/classes/FriendshipTwoWayRelationStatusDto.html",[0,0.293,621,3.136]],["body/classes/FriendshipTwoWayRelationStatusDto.html",[0,0.448,2,0.767,3,0.135,4,0.135,5,0.113,8,0.8,9,2.03,11,0.939,12,0.013,14,0.903,16,0.224,19,0.135,20,0.01,21,0.012,22,0.01,289,2.775,331,2.311,588,4.06,600,4.274,619,4.06,621,5.637,700,5.114,728,4.1,823,6.248,824,6.109,825,6.109]],["title/classes/FriendshipTwoWayRelationStatusesDto.html",[0,0.293,617,2.68]],["body/classes/FriendshipTwoWayRelationStatusesDto.html",[0,0.394,2,0.674,3,0.118,4,0.118,5,0.099,8,0.703,9,1.879,11,1.189,12,0.014,13,1.072,14,1.143,19,0.118,20,0.009,21,0.011,22,0.009,563,4.533,588,4.199,600,4.421,617,4.457,619,4.199,783,3.927,823,6.862,826,5.373,827,6.276,828,6.276,829,7.208,830,7.208,831,6.078,832,5.373,833,5.373,834,5.373,835,5.373,836,5.373]],["title/classes/Group.html",[0,0.293,323,1.51]],["body/classes/Group.html",[0,0.381,2,0.653,3,0.115,4,0.115,5,0.096,8,0.681,9,1.842,11,1.219,12,0.014,13,0.974,14,1.155,16,0.238,19,0.115,20,0.008,21,0.011,22,0.008,25,1.992,27,4.768,31,2.587,33,4.768,35,2.847,38,5.113,40,4.699,42,4.412,43,4.768,48,5.667,50,3.491,53,4.768,55,4.093,56,4.467,57,4.529,58,1.524,59,5.667,76,1.63,323,2.687,325,2.899,327,2.215,349,3.153,350,2.889,355,2.52,374,2.889,440,3.292,783,2.64,796,3.491,837,5.201,838,5.201,839,5.201,840,5.201,841,5.201,842,5.201,843,5.201,844,5.201,845,5.201,846,6.508]],["title/controllers/GroupController.html",[60,1.57,847,3.136]],["body/controllers/GroupController.html",[0,0.13,3,0.039,4,0.039,5,0.033,8,0.233,11,1.178,12,0.014,13,1.069,14,1.02,16,0.24,18,0.521,19,0.039,20,0.003,21,0.005,22,0.003,25,1.759,34,0.865,35,2.514,60,0.699,62,0.699,64,1.054,65,1.075,67,2.039,74,1.49,75,2.611,76,1.67,77,2.422,78,2.014,82,1.856,83,4.971,88,1.605,89,1.856,90,2.38,91,1.118,92,3.042,93,1.397,94,1.283,95,0.861,96,0.233,99,1.118,101,0.672,102,4.398,103,1.397,104,1.193,105,4.144,107,1.054,109,0.997,110,1.118,111,1.118,114,0.902,115,0.521,116,2.137,119,1.56,121,4.341,180,2.491,199,1.805,200,1.123,208,1.953,270,5.048,283,1.802,306,4.693,323,2.941,330,2.082,332,2.694,333,1.368,342,1.68,349,2.341,361,3.72,367,2.042,370,2.135,374,1.68,385,3.181,387,2.042,389,2.227,390,3.02,392,1.754,395,2.17,406,3.526,426,1.834,430,2.042,440,2.444,444,2.135,451,2.135,533,4.223,575,4.633,614,1.397,630,4.633,636,4.223,650,4.2,796,1.981,847,2.319,848,1.778,849,3.785,850,3.785,851,2.952,852,2.952,853,3.785,854,3.785,855,2.952,856,3.785,857,3.785,858,3.785,859,3.785,860,3.785,861,5.588,862,3.785,863,3.785,864,1.778,865,6.422,866,1.778,867,1.778,868,1.778,869,1.778,870,1.778,871,1.778,872,1.778,873,1.778,874,1.778,875,1.778,876,1.778,877,2.952,878,1.778,879,1.778,880,1.778,881,1.778,882,2.57,883,1.778,884,1.778,885,1.778,886,1.778,887,6.01,888,1.778,889,1.778,890,1.778,891,1.778,892,1.548,893,1.778,894,1.778,895,1.778,896,1.778,897,1.778,898,1.778,899,1.778,900,1.778,901,1.778,902,1.778,903,1.778,904,1.778,905,1.778,906,1.778,907,1.778,908,1.778,909,1.778,910,1.778,911,1.778,912,1.778,913,1.778,914,1.778,915,1.778,916,1.778,917,1.548,918,1.397,919,3.462,920,1.778,921,2.319,922,1.778,923,1.397,924,1.778,925,1.548,926,1.397,927,1.778,928,1.397,929,1.778,930,1.778,931,1.397,932,1.548,933,1.548,934,1.778,935,1.778,936,6.903,937,5.588,938,1.778,939,1.778,940,1.778,941,1.778,942,1.778,943,1.778,944,1.778,945,1.778,946,1.778,947,1.778,948,1.778,949,1.778,950,6.258,951,1.778,952,1.778,953,3.785,954,1.778,955,1.778,956,1.778,957,1.778,958,2.952,959,3.841,960,2.952,961,1.778,962,4.143,963,1.778,964,1.778,965,1.778,966,1.778,967,1.778,968,1.778,969,1.778,970,1.778,971,1.778,972,1.778,973,1.778,974,1.778,975,1.778,976,1.778,977,1.778,978,1.778]],["title/classes/GroupDoesNotExistError.html",[0,0.293,334,1.934]],["body/classes/GroupDoesNotExistError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.106,335,3.176,336,1.424,337,2.828,338,1.827,339,1.424,340,1.827,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/GroupDto.html",[0,0.293,919,3.136]],["body/classes/GroupDto.html",[0,0.458,2,0.785,3,0.138,4,0.138,5,0.116,8,0.818,9,2.058,11,0.96,12,0.013,14,0.924,16,0.229,19,0.138,20,0.01,21,0.012,22,0.01,323,3.087,324,2.775,919,5.712,979,6.25,980,6.25]],["title/classes/GroupExceptionFilter.html",[0,0.293,923,3.136]],["body/classes/GroupExceptionFilter.html",[0,0.399,2,0.682,3,0.12,4,0.12,5,0.101,8,0.712,11,0.835,12,0.014,14,0.803,16,0.265,19,0.12,20,0.009,21,0.011,22,0.009,25,1.385,65,2.436,75,2.056,76,1.735,77,1.907,92,3.1,95,2.634,96,0.712,199,1.945,200,1.385,289,2.436,290,3.648,291,1.593,309,3.648,310,3.648,311,3.648,317,4.863,321,3.503,918,4.27,923,5.255,981,6.689,982,4.733,983,5.255,984,5.692,985,5.231,986,5.255,987,5.692,988,5.939,989,4.733,990,4.27,991,4.27,992,5.255,993,3.924,994,5.436,995,4.27,996,4.27,997,4.27,998,4.27,999,4.733,1000,4.27,1001,4.27,1002,4.27,1003,4.27]],["title/classes/GroupMember.html",[0,0.293,325,1.51]],["body/classes/GroupMember.html",[0,0.37,2,0.634,3,0.111,4,0.111,5,0.093,8,0.661,9,1.807,11,1.192,12,0.014,13,0.964,14,1.123,16,0.278,17,2.562,18,1.479,19,0.111,20,0.008,21,0.01,22,0.008,23,3.269,25,1.876,35,2.766,50,3.388,55,4.017,56,4.017,58,1.479,323,3.016,325,2.416,328,3.52,329,2.446,330,2.15,331,1.909,361,3.247,387,3.247,390,3.11,401,3.395,417,2.446,442,2.446,783,3.242,786,5.561,787,5.785,790,5.484,795,6.412,796,4.287,800,6.101,802,4.395,804,5.785,1004,7.759,1005,5.048,1006,5.048,1007,5.048,1008,5.048,1009,5.048,1010,5.048,1011,5.048]],["title/modules/GroupModule.html",[125,1.35,468,2.68]],["body/modules/GroupModule.html",[0,0.412,3,0.124,4,0.124,5,0.104,12,0.014,16,0.292,19,0.124,20,0.009,21,0.011,22,0.009,62,2.685,96,0.736,125,2.487,127,2.496,128,2.606,129,2.854,130,2.854,131,2.725,132,3.733,133,3.733,138,3.466,139,2.854,140,2.854,144,3.537,145,1.708,152,2.997,323,2.127,324,2.496,325,2.583,326,2.496,327,2.395,342,3.691,468,5.412,847,5.778,918,4.418,1012,4.897,1013,4.897,1014,4.897,1015,5.624,1016,5.624,1017,5.624]],["title/classes/GroupsDto.html",[0,0.293,921,3.136]],["body/classes/GroupsDto.html",[0,0.454,2,0.777,3,0.136,4,0.136,5,0.115,8,0.81,9,2.046,11,0.951,12,0.013,14,1.069,16,0.227,19,0.136,20,0.01,21,0.012,22,0.01,323,2.898,324,2.748,367,3.55,921,5.681,959,6.018,1018,6.191,1019,6.191,1020,6.191]],["title/injectables/JwtAuthGuard.html",[109,2.24,161,0.916]],["body/injectables/JwtAuthGuard.html",[0,0.462,3,0.139,4,0.139,5,0.117,12,0.013,16,0.267,19,0.139,20,0.01,21,0.012,22,0.01,96,0.825,109,4.098,148,4.547,161,1.676,162,3.356,320,1.912,1021,6.299,1022,6.299,1023,6.299,1024,6.299]],["title/injectables/JwtStrategy.html",[137,2.882,161,0.916]],["body/injectables/JwtStrategy.html",[0,0.414,3,0.124,4,0.124,5,0.104,8,0.739,11,0.867,12,0.014,14,1.011,16,0.27,19,0.124,20,0.009,21,0.011,22,0.011,25,1.438,65,2.492,67,1.877,75,2.134,76,1.295,77,1.98,92,2.615,96,0.739,116,1.542,119,1.341,137,4.941,148,4.074,156,4.914,157,4.914,161,1.57,162,3.007,169,2.491,176,4.914,275,4.914,276,4.914,320,1.713,350,2.505,389,1.713,1025,5.643,1026,6.844,1027,5.643,1028,6.844,1029,5.643,1030,5.643,1031,5.643,1032,5.643,1033,4.914,1034,4.433,1035,5.643,1036,5.643,1037,5.643,1038,5.643,1039,5.643,1040,5.643,1041,5.643,1042,5.643,1043,5.643]],["title/controllers/LeaderboardController.html",[60,1.57,1044,3.136]],["body/controllers/LeaderboardController.html",[0,0.257,3,0.077,4,0.077,5,0.065,8,0.459,11,1.128,12,0.014,13,1.063,14,0.938,16,0.273,18,1.028,19,0.077,20,0.006,21,0.008,22,0.006,25,1.617,35,2.312,60,1.379,62,1.379,64,2.079,65,1.82,67,1.972,75,2.401,76,1.457,77,2.227,78,1.936,82,3.992,83,4.867,88,2.312,89,2.206,90,3.144,91,2.206,92,3.109,96,0.459,101,1.327,102,4.22,104,2.355,105,3.977,107,2.079,109,1.968,110,2.206,111,2.206,114,1.78,115,1.028,116,2.133,119,1.508,121,3.992,199,1.23,270,4.844,306,4.503,389,2.267,426,2.188,481,1.968,482,3.355,483,3.144,484,2.079,485,2.355,487,3.267,488,5.195,489,5.005,490,5.368,491,3.909,502,3.663,503,3.909,504,4.386,505,4.386,575,4.26,614,2.756,630,4.26,650,3.355,783,1.78,796,4.26,831,2.756,892,5.071,917,3.055,925,3.055,931,2.756,932,3.055,933,3.055,962,2.756,1044,3.927,1045,3.508,1046,3.508,1047,5.824,1048,5.071,1049,3.508,1050,3.508,1051,3.508,1052,3.508,1053,3.508,1054,3.508,1055,3.508,1056,3.508,1057,3.508,1058,3.508,1059,3.508,1060,5.764,1061,3.508,1062,3.508,1063,2.756,1064,3.508,1065,2.756,1066,3.508,1067,3.508,1068,3.508,1069,3.508,1070,6.348,1071,6.348,1072,4.999,1073,3.508,1074,3.508,1075,3.508,1076,3.508,1077,3.508,1078,3.508,1079,3.508,1080,3.508]],["title/classes/LeaderboardEntriesDto.html",[0,0.293,484,2.366]],["body/classes/LeaderboardEntriesDto.html",[0,0.434,2,0.743,3,0.13,4,0.13,5,0.11,8,0.775,9,1.993,11,1.155,12,0.013,14,1.111,16,0.217,19,0.13,20,0.01,21,0.011,22,0.01,25,2.055,481,4.218,483,3.723,484,4.175,489,3.723,502,4.729,504,4.729,505,4.729,1081,6.776,1082,5.92,1083,5.92,1084,4.612,1085,5.92,1086,5.92]],["title/classes/LeaderboardEntryDto.html",[0,0.293,481,2.24]],["body/classes/LeaderboardEntryDto.html",[0,0.439,2,0.751,3,0.132,4,0.132,5,0.111,8,0.784,9,2.006,11,1.161,12,0.013,13,0.928,14,1.116,19,0.132,20,0.01,21,0.012,22,0.01,25,2.06,426,2.214,481,3.977,494,4.751,495,5.07,1081,6.8,1084,4.629,1087,5.212,1088,5.986,1089,5.986,1090,5.212]],["title/classes/LeaderboardEntryNotFoundError.html",[0,0.293,486,2.68]],["body/classes/LeaderboardEntryNotFoundError.html",[0,0.512,2,0.55,3,0.096,4,0.096,5,0.081,12,0.014,13,0.951,16,0.255,19,0.154,20,0.009,21,0.009,22,0.007,34,2.045,67,1.485,78,1.537,96,0.574,114,2.224,115,1.284,116,1.906,119,1.385,161,1.337,199,1.876,200,1.485,208,1.852,288,1.9,291,1.284,320,2.118,372,2.481,389,1.988,402,2.677,426,2.319,475,3.911,476,3.164,477,4.388,478,4.726,479,2.597,480,2.597,481,3.269,482,3.911,483,2.756,484,2.597,485,2.941,486,4.394,487,2.458,488,4.394,489,4.697,490,5.195,491,2.941,492,4.394,493,4.726,494,4.697,495,4.394,496,2.756,497,3.164,498,3.164,499,3.164,500,3.164,501,3.164,502,4.117,503,2.941,504,2.756,505,2.756,506,5.037,507,4.207,508,4.726,509,4.726,510,4.207,511,3.164,512,3.164,513,3.164,514,3.164,515,3.164,516,4.207,517,3.164,518,3.164,519,3.164,520,3.164,521,4.207,522,3.164,523,3.164,524,3.164,525,3.164]],["title/classes/LeaderboardExceptionFilter.html",[0,0.293,1065,3.136]],["body/classes/LeaderboardExceptionFilter.html",[0,0.399,2,0.682,3,0.12,4,0.12,5,0.101,8,0.712,11,0.835,12,0.014,14,0.803,16,0.265,19,0.12,20,0.009,21,0.011,22,0.009,25,1.385,65,2.436,75,2.056,76,1.735,77,1.907,92,3.1,95,2.634,96,0.712,199,1.945,200,1.385,289,2.436,290,3.648,291,1.593,309,3.648,310,3.648,311,3.648,317,4.863,477,4.755,982,4.733,983,5.255,984,5.692,985,5.231,986,5.255,987,5.692,988,5.939,989,4.733,990,4.27,991,4.27,992,5.255,993,3.924,995,4.27,996,4.27,997,4.27,998,4.27,999,4.733,1000,4.27,1001,4.27,1002,4.27,1003,4.27,1063,4.27,1065,5.255,1091,6.689,1092,5.436]],["title/modules/LeaderboardModule.html",[125,1.35,469,2.68]],["body/modules/LeaderboardModule.html",[0,0.414,3,0.124,4,0.124,5,0.104,12,0.014,16,0.28,19,0.124,20,0.009,21,0.011,22,0.009,62,2.69,96,0.739,125,2.491,127,2.505,128,2.615,129,2.864,130,2.864,131,2.734,132,3.738,133,3.738,138,3.473,139,2.864,140,2.864,152,3.007,236,4.914,469,5.416,479,3.345,480,3.345,487,4.666,1044,5.786,1063,4.433,1093,4.914,1094,4.914,1095,4.914,1096,5.643,1097,5.643,1098,5.643,1099,5.643,1100,5.643,1101,5.643,1102,5.643,1103,5.643]],["title/injectables/LeaderboardService.html",[161,0.916,487,2.24]],["body/injectables/LeaderboardService.html",[0,0.487,3,0.086,4,0.086,5,0.072,8,0.509,11,1.107,12,0.014,13,1.051,14,0.981,16,0.243,19,0.146,20,0.009,21,0.009,22,0.006,25,1.692,34,1.946,65,1.956,67,1.918,75,2.511,76,1.523,77,2.159,78,1.839,88,1.415,96,0.509,114,1.972,115,1.139,116,1.814,119,1.276,161,1.232,162,2.07,169,1.314,199,1.818,200,1.368,208,1.741,288,1.751,291,1.139,320,1.869,372,2.827,389,2.016,402,2.517,426,2.341,475,3.604,476,2.805,477,3.87,478,5.203,479,2.303,480,2.303,481,3.013,482,3.604,483,2.443,484,2.303,485,2.608,486,3.604,487,3.013,488,4.456,489,4.806,490,5.244,491,4.13,492,4.13,493,4.443,494,4.806,495,4.13,496,2.443,497,2.805,498,2.805,499,2.805,500,2.805,501,2.805,502,4.175,503,4.13,504,2.443,505,2.443,506,4.793,507,3.877,508,4.443,509,4.443,510,3.877,511,2.805,512,2.805,513,2.805,514,2.805,515,2.805,516,3.877,517,2.805,518,2.805,519,2.805,520,2.805,521,3.877,522,2.805,523,2.805,524,2.805,525,2.805,603,2.608,882,3.383,1048,4.676,1084,3.183,1104,3.885,1105,3.885,1106,3.885,1107,5.37,1108,3.885,1109,3.885,1110,3.885,1111,3.885,1112,3.885]],["title/classes/MembershipDto.html",[0,0.293,928,3.136]],["body/classes/MembershipDto.html",[0,0.458,2,0.783,3,0.137,4,0.137,5,0.115,8,0.817,9,2.055,11,0.959,12,0.013,14,0.922,16,0.228,19,0.137,20,0.01,21,0.012,22,0.01,325,2.907,326,2.769,327,2.656,330,3.272,928,5.706,1113,6.238,1114,6.238]],["title/classes/MembershipsDto.html",[0,0.293,926,3.136]],["body/classes/MembershipsDto.html",[0,0.453,2,0.776,3,0.136,4,0.136,5,0.114,8,0.809,9,2.044,11,0.95,12,0.013,14,1.068,16,0.226,19,0.136,20,0.01,21,0.012,22,0.01,325,2.895,326,2.743,327,2.631,887,6.665,926,5.674,959,6.013,1115,6.179,1116,6.179,1117,6.179]],["title/classes/NotGroupAdminError.html",[0,0.293,335,1.934]],["body/classes/NotGroupAdminError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.237,336,1.424,337,2.828,338,1.827,339,1.424,340,1.827,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/NotGroupMemberError.html",[0,0.293,337,1.934]],["body/classes/NotGroupMemberError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.176,336,1.424,337,2.935,338,1.827,339,1.424,340,1.827,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/NotInvitedToGroupError.html",[0,0.293,336,1.934]],["body/classes/NotInvitedToGroupError.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.518,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.176,336,1.827,337,2.828,338,1.827,339,1.424,340,1.827,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/Profile.html",[0,0.293,1118,2.24]],["body/classes/Profile.html",[0,0.33,2,0.564,3,0.099,4,0.099,5,0.083,8,0.776,9,1.677,11,1.252,12,0.014,13,1.056,14,1.164,16,0.243,17,3.818,18,1.318,19,0.099,20,0.007,21,0.01,22,0.007,23,2.631,25,2.077,27,4.45,33,4.45,34,2.282,35,2.868,38,6.115,39,5.91,40,5.431,42,4.178,43,3.978,50,3.978,53,3.978,55,3.728,56,4.731,58,1.318,389,2.013,402,2.424,426,1.943,532,4.45,541,5.773,542,5.773,543,5.773,544,5.773,783,3.008,790,4.279,799,4.656,801,4.656,1084,3.513,1118,3.325,1119,4.497,1120,6.631,1121,4.497,1122,4.497,1123,3.916,1124,4.497,1125,5.161,1126,4.497,1127,4.497,1128,5.161,1129,4.497,1130,4.497,1131,3.916,1132,4.497,1133,4.497,1134,4.497,1135,3.916,1136,4.497,1137,3.916]],["title/classes/ProfileAlreadyExistsError.html",[0,0.293,1138,2.882]],["body/classes/ProfileAlreadyExistsError.html",[0,0.468,2,0.632,3,0.111,4,0.111,5,0.093,12,0.014,13,0.916,16,0.284,19,0.14,20,0.008,21,0.01,22,0.008,34,1.868,58,1.475,67,1.783,74,1.702,78,1.846,88,1.833,96,0.659,99,3.165,101,1.903,115,1.475,119,1.748,145,1.528,161,1.463,169,1.702,171,2.506,196,1.978,198,1.833,199,1.238,200,1.624,208,1.804,288,1.641,291,1.868,320,1.935,426,2.051,538,4.4,1118,4.418,1138,5.051,1139,4.382,1140,4.602,1141,4.696,1142,3.378,1143,3.165,1144,4.382,1145,4.382,1146,6.092,1147,4.382,1148,6.092,1149,4.382,1150,6.092,1151,4.382,1152,6.092,1153,4.382,1154,6.092,1155,4.382,1156,5.55,1157,3.953,1158,4.382,1159,4.382,1160,4.382,1161,4.382]],["title/controllers/ProfileController.html",[60,1.57,1162,3.136]],["body/controllers/ProfileController.html",[0,0.293,3,0.088,4,0.088,5,0.074,8,0.523,11,1.032,12,0.014,13,0.817,14,0.993,16,0.277,18,1.171,19,0.088,20,0.007,21,0.009,22,0.007,25,1.712,35,2.446,60,1.57,62,1.57,64,2.368,65,1.993,67,2.017,74,2.38,75,2.541,76,1.542,77,2.357,78,2,82,4.225,83,4.571,88,2.563,89,3.442,90,3.927,91,2.512,92,2.894,93,3.138,95,1.935,96,0.523,99,2.512,101,1.511,102,4.426,103,4.3,105,4.171,107,2.368,109,2.241,110,2.512,111,2.512,114,2.027,115,1.171,116,1.091,119,1.596,121,4.225,164,3.952,180,2.861,199,1.537,200,1.591,208,1.901,267,4.3,270,3.952,288,1.785,290,2.681,360,1.935,389,1.896,395,1.773,419,1.773,426,2.063,538,4.766,575,4.509,630,4.509,631,3.138,650,4.191,931,3.138,985,2.884,1118,4.472,1138,3.952,1140,3.952,1141,5.087,1142,2.681,1143,3.927,1157,3.138,1162,4.3,1163,3.995,1164,3.995,1165,4.766,1166,3.995,1167,3.995,1168,3.995,1169,3.995,1170,3.478,1171,3.995,1172,3.995,1173,3.995,1174,3.995,1175,3.995,1176,3.995,1177,3.995,1178,3.995,1179,3.478,1180,4.3,1181,3.995,1182,3.995,1183,3.995,1184,3.995,1185,3.995,1186,6.245,1187,3.995,1188,3.478,1189,5.474,1190,3.478,1191,3.995,1192,3.995,1193,3.995]],["title/classes/ProfileDto.html",[0,0.293,1180,3.136]],["body/classes/ProfileDto.html",[0,0.449,2,0.768,3,0.135,4,0.135,5,0.113,8,0.801,9,2.033,11,0.941,12,0.014,14,0.905,16,0.263,18,1.794,19,0.135,20,0.01,21,0.012,22,0.01,25,1.83,35,2.229,532,5.118,1118,4.557,1142,4.108,1180,5.643,1194,6.121,1195,6.121]],["title/modules/ProfileModule.html",[125,1.35,556,2.68]],["body/modules/ProfileModule.html",[0,0.418,3,0.125,4,0.125,5,0.105,12,0.014,16,0.288,19,0.125,20,0.009,21,0.011,22,0.009,62,2.705,96,0.745,125,2.501,127,2.527,128,2.638,129,2.889,130,2.889,131,2.758,132,3.753,133,3.753,138,3.492,139,2.889,140,2.889,144,3.58,145,1.728,152,3.033,556,5.426,1118,3.194,1142,3.821,1143,5.237,1162,5.808,1179,4.957,1196,4.957,1197,4.957,1198,4.957,1199,5.693,1200,5.693,1201,5.693]],["title/injectables/ProfileService.html",[161,0.916,1143,2.511]],["body/injectables/ProfileService.html",[0,0.436,3,0.099,4,0.099,5,0.083,8,0.59,11,1.084,12,0.014,13,1.032,14,1.043,16,0.275,19,0.131,20,0.007,21,0.01,22,0.007,25,1.798,34,1.74,58,1.322,65,2.163,67,2.008,74,2.245,75,2.669,76,1.619,77,2.33,78,1.986,88,2.418,96,0.59,99,2.836,101,1.706,115,1.322,119,1.677,145,1.369,161,1.363,162,2.403,164,4.287,169,2.008,171,2.774,196,1.773,198,1.642,199,1.11,200,1.513,208,1.68,288,1.471,291,1.322,320,1.369,426,2.207,538,4.827,1118,4.306,1138,4.287,1139,3.926,1140,4.287,1141,5.152,1142,3.027,1143,3.735,1144,3.926,1145,5.171,1146,5.781,1147,3.926,1148,5.781,1149,3.926,1150,5.781,1151,3.926,1152,5.781,1153,3.926,1154,5.781,1155,3.926,1156,5.171,1157,4.665,1158,3.926,1159,3.926,1160,3.926,1161,3.926,1202,4.509,1203,4.509,1204,4.509,1205,4.509,1206,4.509,1207,4.509,1208,4.509]],["title/classes/ReferenceFriendDto.html",[0,0.293,574,3.136]],["body/classes/ReferenceFriendDto.html",[0,0.461,2,0.789,3,0.138,4,0.138,5,0.116,8,0.823,9,2.065,11,0.966,12,0.013,13,0.955,14,0.929,19,0.138,20,0.01,21,0.012,22,0.01,31,2.807,574,5.732,1209,7.296,1210,6.286,1211,6.286]],["title/classes/SelfReferenceError.html",[0,0.293,729,2.882]],["body/classes/SelfReferenceError.html",[0,0.266,2,0.288,3,0.051,4,0.051,5,0.042,12,0.014,13,1.005,16,0.236,19,0.08,20,0.004,21,0.006,22,0.004,23,3.387,31,0.836,34,1.636,58,0.673,67,1.767,78,1.83,92,2.374,96,0.301,116,2.137,119,1.843,145,0.697,161,0.833,169,0.776,171,1.772,177,1.803,196,0.902,198,2.348,199,1.838,200,1.584,208,1.924,283,1.843,288,1.671,289,2.348,291,1.064,320,1.103,331,1.374,388,3.15,389,2.33,419,1.019,429,2.001,496,2.284,563,1.444,565,2.853,571,2.853,576,1.803,577,1.803,578,4.025,588,3.863,592,5.471,599,5.501,600,3.33,603,1.541,606,4.029,615,1.288,617,2.438,618,1.803,619,3.863,620,1.803,626,3.699,636,2.622,662,1.803,663,2.438,664,1.803,665,1.657,666,1.803,669,1.999,670,1.999,671,1.999,672,1.999,673,1.999,675,1.999,676,1.999,677,1.999,680,1.999,682,1.999,685,3.254,687,6.643,688,5.919,690,3.746,691,5.414,693,1.999,694,4.654,695,5.065,696,4.455,697,4.461,698,5.414,699,5.759,700,2.438,703,3.163,704,1.999,706,3.163,709,1.999,711,3.924,712,3.924,714,1.999,719,1.999,721,1.999,725,1.999,728,2.438,729,4.285,730,1.999,731,1.999,732,5.414,733,3.54,734,3.54,735,3.924,736,3.924,737,3.924,738,3.924,739,5.168,740,4.86,741,1.999,742,3.163,743,4.86,744,5.414,745,4.86,746,4.86,747,3.163,748,1.999,749,3.163,750,1.999,751,1.999,752,1.999,753,4.86,754,6.446,755,1.999,756,4.86,757,1.999,758,1.999,759,1.999,760,1.999,761,1.999,762,1.999,763,1.999,764,1.999,765,1.999,766,1.999,767,1.999,768,1.999,769,1.999,770,1.999,771,1.999,772,3.163,773,3.924,774,4.461,775,4.461,776,6.143,777,4.86,778,3.163,779,3.163,780,3.163,781,1.999,782,1.999,783,2.287,784,3.163]],["title/classes/SelfReferenceErrorFilter.html",[0,0.293,580,3.136]],["body/classes/SelfReferenceErrorFilter.html",[0,0.399,2,0.682,3,0.12,4,0.12,5,0.101,8,0.712,11,0.835,12,0.014,14,0.803,16,0.265,19,0.12,20,0.009,21,0.011,22,0.009,25,1.385,65,2.436,75,2.056,76,1.735,77,1.907,92,3.1,95,2.634,96,0.712,199,1.945,200,1.385,289,2.436,290,3.648,291,1.593,309,3.648,310,3.648,311,3.648,317,4.863,580,5.255,616,4.27,626,4.829,729,5.458,983,5.255,984,5.692,985,4.829,986,5.255,987,5.692,988,5.939,990,5.255,991,4.27,992,5.255,993,3.924,995,4.27,996,4.27,997,4.27,998,4.27,1000,4.27,1001,4.27,1002,4.27,1003,4.27,1212,6.689,1213,5.436,1214,5.436]],["title/classes/UpdateAccountDto.html",[0,0.293,85,2.882]],["body/classes/UpdateAccountDto.html",[0,0.462,2,0.791,3,0.139,4,0.139,5,0.117,12,0.013,16,0.267,18,1.846,19,0.139,20,0.01,21,0.012,22,0.01,71,4.227,74,2.13,85,5.273,100,4.948,320,1.912,527,5.484,1215,6.299,1216,4.948,1217,6.299]],["title/classes/UpdateEntryDto.html",[0,0.293,1060,3.136]],["body/classes/UpdateEntryDto.html",[0,0.461,2,0.789,3,0.138,4,0.138,5,0.116,8,0.823,9,2.065,11,0.966,12,0.013,14,0.929,19,0.138,20,0.01,21,0.012,22,0.01,494,4.848,1060,5.732,1084,4.324,1087,5.474,1090,5.474,1218,7.296]],["title/classes/UpdateGroupDto.html",[0,0.293,332,1.772]],["body/classes/UpdateGroupDto.html",[0,0.462,2,0.791,3,0.139,4,0.139,5,0.117,12,0.013,16,0.267,18,1.846,19,0.139,20,0.01,21,0.012,22,0.01,74,2.13,320,1.912,332,3.243,333,2.919,533,4.547,535,5.484,1216,4.948,1219,6.299,1220,6.299]],["title/classes/UpdateProfileDto.html",[0,0.293,1141,2.68]],["body/classes/UpdateProfileDto.html",[0,0.462,2,0.791,3,0.139,4,0.139,5,0.117,12,0.013,16,0.267,18,1.846,19,0.139,20,0.01,21,0.012,22,0.01,74,2.13,320,1.912,538,3.961,540,5.484,1140,4.547,1141,4.903,1216,4.948,1221,6.299,1222,6.299]],["title/classes/Wallet.html",[0,0.293,1223,2.511]],["body/classes/Wallet.html",[0,0.369,2,0.632,3,0.111,4,0.111,5,0.093,8,0.659,9,1.804,11,1.225,12,0.014,13,0.834,14,1.146,16,0.256,17,3.935,18,1.475,19,0.111,20,0.008,21,0.01,22,0.008,23,3.265,27,4.696,33,4.696,35,2.823,39,5.778,42,4.359,43,4.278,53,4.278,55,4.009,56,4.4,58,1.475,350,3.265,389,2.124,426,2.051,532,4.278,783,3.733,787,5.008,788,4.382,790,4.602,799,5.008,801,5.008,804,3.953,1084,4.359,1123,4.382,1125,5.55,1128,6.404,1131,4.382,1135,4.382,1137,4.382,1223,4.009,1224,5.032,1225,6.996,1226,6.996,1227,5.032,1228,6.374,1229,5.032,1230,6.374,1231,5.032,1232,5.032,1233,5.032,1234,5.032,1235,5.032]],["title/controllers/WalletController.html",[60,1.57,1236,3.136]],["body/controllers/WalletController.html",[0,0.338,3,0.163,4,0.101,5,0.085,8,0.603,11,1.031,12,0.014,13,0.878,14,0.89,16,0.282,18,1.35,19,0.101,20,0.007,21,0.01,22,0.007,25,1.534,35,2.193,60,1.81,62,1.81,64,2.729,65,2.193,67,1.93,75,2.277,76,1.382,77,2.112,78,1.877,82,3.786,83,4.474,91,2.896,92,2.79,95,2.231,96,0.603,102,4.219,104,4.502,105,3.976,107,2.729,109,2.583,110,2.896,111,2.896,115,1.765,116,1.258,119,1.431,121,3.786,164,4.843,169,1.557,198,2.193,199,1.651,200,1.173,208,1.303,267,4.73,288,1.502,331,1.742,408,2.134,426,2.164,563,4.219,575,4.041,588,2.454,600,2.583,603,4.041,615,3.763,619,2.454,630,4.041,631,3.618,650,4.041,700,3.091,733,3.618,962,3.618,1165,5.242,1170,4.01,1188,4.01,1190,4.01,1223,4.921,1236,4.73,1237,4.605,1238,4.605,1239,6.021,1240,4.605,1241,4.605,1242,4.605,1243,4.605,1244,4.605,1245,6.021,1246,4.502,1247,4.01,1248,6.021,1249,3.618,1250,4.01,1251,4.605,1252,4.605,1253,4.605,1254,6.021,1255,6.021,1256,6.021,1257,4.605,1258,4.605,1259,4.605]],["title/modules/WalletModule.html",[125,1.35,557,2.68]],["body/modules/WalletModule.html",[0,0.403,3,0.121,4,0.121,5,0.102,12,0.014,16,0.294,19,0.121,20,0.009,21,0.011,22,0.009,62,2.649,96,0.72,125,2.463,127,2.442,128,2.549,129,2.791,130,2.791,131,2.665,132,3.697,133,3.697,138,3.419,139,2.791,140,2.791,144,3.459,145,1.67,152,3.59,228,4.985,232,4.789,557,5.481,615,3.086,1223,3.459,1236,5.722,1246,5.565,1247,4.789,1249,4.321,1250,4.789,1260,4.789,1261,5.5,1262,4.789,1263,4.789,1264,5.5,1265,5.5,1266,5.5]],["title/injectables/WalletService.html",[161,0.916,1246,2.68]],["body/injectables/WalletService.html",[0,0.334,3,0.1,4,0.1,5,0.084,8,0.596,11,1.088,12,0.014,13,1.034,14,1.047,16,0.259,19,0.1,20,0.007,21,0.01,22,0.007,25,1.805,34,1.335,58,1.335,65,2.176,67,2.012,75,2.679,76,1.625,77,2.341,78,1.992,96,0.596,116,1.935,119,1.683,145,1.383,161,1.371,162,2.426,169,2.021,171,2.785,196,1.79,198,1.658,199,1.743,200,1.874,208,1.888,426,2.288,685,5.114,694,4.315,1084,4.474,1223,4.838,1246,4.011,1249,3.577,1267,4.554,1268,5.976,1269,6.671,1270,6.671,1271,4.554,1272,4.554,1273,5.976,1274,5.976,1275,4.554,1276,4.554,1277,7.968,1278,4.554,1279,7.083,1280,7.083,1281,4.554,1282,4.554,1283,5.976,1284,4.554,1285,4.554,1286,4.554,1287,4.554,1288,4.554,1289,5.976,1290,4.554,1291,5.976,1292,4.554]],["title/classes/_BaseGroupException.html",[0,0.293,321,1.85]],["body/classes/_BaseGroupException.html",[0,0.47,2,0.222,3,0.065,4,0.039,5,0.033,12,0.014,13,0.998,16,0.204,19,0.141,20,0.003,21,0.005,22,0.003,31,1.6,34,2.071,58,0.518,67,1.731,74,0.994,76,0.866,78,1.763,88,1.071,96,0.232,101,0.669,115,0.862,116,2.064,119,1.713,145,0.537,161,0.675,169,0.598,171,1.483,180,1.606,195,1.827,196,0.695,198,1.071,199,1.899,200,1.986,208,2.176,283,0.723,288,2.498,289,0.644,291,0.862,318,2.129,319,0.898,320,1.947,321,2.971,322,0.898,323,3.087,324,0.785,325,2.291,326,0.785,327,0.753,328,0.82,329,0.857,330,0.753,331,0.669,332,1.95,333,0.82,334,3.027,335,3.176,336,1.424,337,2.828,338,1.827,339,1.424,340,1.827,341,1.827,342,0.785,343,0.898,344,0.898,345,0.898,346,0.898,347,1.914,348,1.914,349,2.165,350,0.785,351,1.914,352,2.23,353,1.914,354,1.492,355,0.857,356,0.898,357,0.898,358,3.499,359,0.898,360,0.857,361,3.84,362,3.586,363,0.898,364,1.914,365,2.962,366,2.962,367,1.362,368,0.898,369,0.898,370,2.549,371,0.898,372,0.753,373,0.898,374,0.785,375,0.898,376,1.492,377,0.898,378,0.898,379,0.898,380,0.898,381,0.898,382,0.898,383,0.898,384,1.492,385,3.845,386,3.391,387,3.274,388,3.037,389,2.294,390,2.689,391,1.492,392,3.037,393,0.898,394,0.898,395,1.95,396,0.898,397,2.962,398,1.914,399,1.492,400,1.492,401,1.424,402,1.202,403,0.898,404,0.898,405,0.898,406,3.423,407,2.362,408,0.82,409,3.075,410,2.23,411,3.075,412,2.83,413,2.67,414,2.129,415,1.492,416,0.898,417,2.129,418,1.914,419,1.305,420,0.898,421,1.492,422,1.492,423,1.492,424,1.492,425,1.492,426,0.862,427,0.898,428,0.898,429,1.674,430,1.748,431,0.898,432,2.83,433,0.898,434,0.898,435,0.898,436,0.898,437,1.492,438,0.898,439,0.857,440,1.748,441,0.898,442,0.857,443,0.898,444,1.827,445,0.898,446,1.492,447,1.492,448,0.898,449,0.898,450,0.898,451,1.827,452,0.898,453,0.898,454,0.898,455,0.898,456,0.898,457,1.492,458,1.492,459,0.898,460,0.898,461,1.492,462,0.898,463,0.898]],["title/classes/_BaseLeaderboardException.html",[0,0.293,477,2.511]],["body/classes/_BaseLeaderboardException.html",[0,0.512,2,0.55,3,0.096,4,0.096,5,0.081,12,0.014,13,0.951,16,0.255,19,0.154,20,0.009,21,0.009,22,0.007,34,2.045,67,1.485,78,1.537,96,0.574,114,2.224,115,1.284,116,1.906,119,1.385,161,1.337,199,1.876,200,1.485,208,1.852,288,1.9,291,1.708,320,2.118,372,2.481,389,1.988,402,2.677,426,2.319,475,3.911,476,3.164,477,4.388,478,4.726,479,2.597,480,2.597,481,3.269,482,3.911,483,2.756,484,2.597,485,2.941,486,3.911,487,2.458,488,4.394,489,4.697,490,5.195,491,2.941,492,4.394,493,4.726,494,4.697,495,4.394,496,2.756,497,3.164,498,3.164,499,3.164,500,3.164,501,3.164,502,4.117,503,2.941,504,2.756,505,2.756,506,5.037,507,4.207,508,4.726,509,4.726,510,4.207,511,3.164,512,3.164,513,3.164,514,3.164,515,3.164,516,4.207,517,3.164,518,3.164,519,3.164,520,3.164,521,4.207,522,3.164,523,3.164,524,3.164,525,3.164]],["title/dependencies.html",[128,2.228,1293,3.323]],["body/dependencies.html",[12,0.014,18,1.741,20,0.01,21,0.011,22,0.01,32,5.174,58,1.741,96,0.778,128,2.753,145,1.804,148,4.29,150,4.668,479,3.522,480,3.522,993,5.096,1033,6.146,1034,4.668,1294,7.531,1295,5.942,1296,5.942,1297,7.059,1298,5.942,1299,5.942,1300,5.942,1301,5.942,1302,5.942,1303,5.942,1304,5.942,1305,5.942,1306,5.942,1307,5.942,1308,5.942,1309,5.942,1310,5.942,1311,5.174,1312,5.174,1313,5.942,1314,5.942]],["title/miscellaneous/enumerations.html",[1315,2.399,1316,4.187]],["body/miscellaneous/enumerations.html",[8,0.735,12,0.014,20,0.009,21,0.011,22,0.009,325,2.123,328,3.161,330,2.905,390,2.492,392,2.602,407,2.72,414,2.72,563,4.29,588,4.073,600,3.827,619,4.073,690,4.579,696,4.579,700,4.579,827,5.94,828,5.94,831,6.552,1315,4.053,1316,4.888,1317,6.822,1318,7.965,1319,5.614,1320,6.822,1321,6.822,1322,6.822,1323,6.822,1324,6.822,1325,6.822,1326,6.822,1327,5.614,1328,5.614,1329,5.614,1330,5.614]],["title/miscellaneous/functions.html",[1315,2.399,1331,4.187]],["body/miscellaneous/functions.html",[8,0.826,12,0.013,13,0.826,20,0.01,21,0.012,22,0.01,23,3.246,25,1.608,75,2.387,76,1.448,77,2.214,131,3.741,247,5.495,269,5.495,274,5.495,1315,4.556,1331,5.495,1332,7.313,1333,6.311,1334,6.311,1335,6.311]],["title/index.html",[8,0.435,1336,2.894,1337,2.894]],["body/index.html",[5,0.099,12,0.013,16,0.196,20,0.009,21,0.011,22,0.009,74,1.808,125,1.808,127,3.542,155,5.765,229,3.362,235,5.765,439,2.59,479,3.169,480,3.924,492,3.588,600,2.999,685,3.86,783,2.713,1034,4.2,1118,2.999,1223,3.362,1311,4.655,1312,4.655,1336,4.655,1337,4.655,1338,5.347,1339,5.347,1340,6.621,1341,5.347,1342,5.347,1343,6.621,1344,7.517,1345,5.347,1346,5.347,1347,5.347,1348,5.347,1349,7.192,1350,5.347,1351,5.347,1352,5.347,1353,5.347,1354,5.347,1355,5.347,1356,5.347,1357,5.347,1358,5.347,1359,5.347,1360,5.347,1361,5.347,1362,7.192,1363,5.347,1364,5.347,1365,5.347,1366,5.347,1367,5.347,1368,6.621,1369,6.621,1370,5.347,1371,5.347,1372,5.347,1373,6.621,1374,5.347,1375,5.347,1376,5.347,1377,7.726,1378,5.347,1379,5.347,1380,6.621,1381,5.347,1382,5.347,1383,5.347,1384,5.347,1385,5.347,1386,5.347,1387,5.347,1388,5.347,1389,5.347,1390,6.621,1391,6.621,1392,5.347,1393,5.347,1394,5.347,1395,5.347,1396,5.347,1397,5.347,1398,5.347,1399,5.347]],["title/modules.html",[127,2.429]],["body/modules.html",[12,0.012,20,0.01,21,0.012,22,0.01,126,4.055,127,2.682,224,4.362,228,3.799,229,3.799,467,4.055,468,4.055,469,4.055,556,4.055,557,4.055,1400,8.289,1401,8.289,1402,8.289,1403,8.289]],["title/overview.html",[1404,4.764]],["body/overview.html",[2,0.583,12,0.014,20,0.008,21,0.01,22,0.008,62,1.826,97,4.861,125,1.571,126,5.439,127,2.062,128,2.152,129,2.357,130,2.357,131,2.25,132,2.357,133,2.357,134,4.044,135,4.044,136,4.044,137,4.863,138,3.073,139,2.357,140,2.357,162,2.475,219,4.521,224,5.659,225,4.044,226,4.044,227,4.044,228,5.184,229,4.861,342,3.432,464,4.044,465,4.044,466,4.044,467,5.367,468,5.367,469,5.367,487,4.337,554,4.044,555,4.044,556,5.094,557,5.261,615,4.337,658,4.044,659,4.044,660,4.044,1012,4.044,1013,4.044,1014,4.044,1093,4.044,1094,4.044,1095,4.044,1143,4.861,1196,4.044,1197,4.044,1198,4.044,1246,5.188,1260,4.044,1262,4.044,1263,4.044,1404,4.044,1405,6.054,1406,4.645,1407,4.645]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":507,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["0.1.13",{"_index":1306,"title":{},"body":{"dependencies.html":{}}}],["0.2.30",{"_index":1314,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1301,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":402,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["1.2.8",{"_index":1300,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":1228,"title":{},"body":{"classes/Wallet.html":{}}}],["2h",{"_index":160,"title":{},"body":{"modules/AccountModule.html":{}}}],["3",{"_index":547,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["3.0.2",{"_index":1308,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":1302,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1313,"title":{},"body":{"dependencies.html":{}}}],["4.7.12",{"_index":1299,"title":{},"body":{"dependencies.html":{}}}],["46",{"_index":1407,"title":{},"body":{"overview.html":{}}}],["50",{"_index":1230,"title":{},"body":{"classes/Wallet.html":{}}}],["6.6.3",{"_index":1310,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1297,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1296,"title":{},"body":{"dependencies.html":{}}}],["7.5.1",{"_index":1294,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1406,"title":{},"body":{"overview.html":{}}}],["8.5.1",{"_index":1304,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1405,"title":{},"body":{"overview.html":{}}}],["_acceptfriendrequest",{"_index":670,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_acceptfriendrequest(aid",{"_index":683,"title":{},"body":{"injectables/FriendService.html":{}}}],["_basegroupexception",{"_index":321,"title":{"classes/_BaseGroupException.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["_baseleaderboardexception",{"_index":477,"title":{"classes/_BaseLeaderboardException.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["_derivetwowayrelationstatus",{"_index":672,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_derivetwowayrelationstatus(normalrelationstatus",{"_index":689,"title":{},"body":{"injectables/FriendService.html":{}}}],["_generatejwt",{"_index":1332,"title":{},"body":{"miscellaneous/functions.html":{}}}],["_generatejwt(jwtservice",{"_index":274,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{}}}],["_generatejwt(this.jwtservice",{"_index":294,"title":{},"body":{"controllers/AuthController.html":{}}}],["_getnormalandinverse",{"_index":673,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_getnormalandinverse(aid",{"_index":701,"title":{},"body":{"injectables/FriendService.html":{}}}],["_removerelations",{"_index":674,"title":{},"body":{"injectables/FriendService.html":{}}}],["_removerelations(aid",{"_index":704,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_sendfriendrequest",{"_index":675,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_sendfriendrequest(aid",{"_index":707,"title":{},"body":{"injectables/FriendService.html":{}}}],["_setrelations",{"_index":676,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["_setrelations(aid",{"_index":710,"title":{},"body":{"injectables/FriendService.html":{}}}],["accept",{"_index":577,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["accessed",{"_index":1367,"title":{},"body":{"index.html":{}}}],["accesstoken",{"_index":10,"title":{},"body":{"classes/AccessTokenDto.html":{},"controllers/AuthController.html":{}}}],["accesstokendto",{"_index":1,"title":{"classes/AccessTokenDto.html":{}},"body":{"classes/AccessTokenDto.html":{},"controllers/AuthController.html":{}}}],["account",{"_index":23,"title":{"classes/Account.html":{}},"body":{"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"miscellaneous/functions.html":{}}}],["account.appleid",{"_index":203,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.controller",{"_index":143,"title":{},"body":{"modules/AccountModule.html":{}}}],["account.deviceid",{"_index":201,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.dto",{"_index":100,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/UpdateAccountDto.html":{}}}],["account.dto.ts",{"_index":527,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{}}}],["account.dto.ts:4",{"_index":529,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:5",{"_index":528,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:6",{"_index":531,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.dto.ts:7",{"_index":530,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["account.googleid",{"_index":205,"title":{},"body":{"injectables/AccountService.html":{}}}],["account.id",{"_index":277,"title":{},"body":{"controllers/AuthController.html":{}}}],["account.service",{"_index":98,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"controllers/AuthController.html":{}}}],["account/account.module",{"_index":471,"title":{},"body":{"modules/CoreModule.html":{}}}],["account/entities/account.entity",{"_index":802,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{}}}],["accountcontroller",{"_index":61,"title":{"controllers/AccountController.html":{}},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{}}}],["accountmodule",{"_index":126,"title":{"modules/AccountModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["accountrepository",{"_index":173,"title":{},"body":{"injectables/AccountService.html":{}}}],["accountservice",{"_index":97,"title":{"injectables/AccountService.html":{}},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"overview.html":{}}}],["acting",{"_index":388,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["actinggroupmember",{"_index":409,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["actinggroupmember.membershipstatus",{"_index":410,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["actinggroupmember?.membershipstatus",{"_index":432,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["actinguserid",{"_index":385,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["action",{"_index":779,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["add",{"_index":677,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["add(aid",{"_index":715,"title":{},"body":{"injectables/FriendService.html":{}}}],["addfriend",{"_index":564,"title":{},"body":{"controllers/FriendController.html":{}}}],["addfriend(req",{"_index":572,"title":{},"body":{"controllers/FriendController.html":{}}}],["addfrienddto",{"_index":573,"title":{},"body":{"controllers/FriendController.html":{}}}],["addfrienddto.id",{"_index":647,"title":{},"body":{"controllers/FriendController.html":{}}}],["admin",{"_index":392,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["admin'})@apibadrequestresponse({type",{"_index":908,"title":{},"body":{"controllers/GroupController.html":{}}}],["admincount",{"_index":399,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["admins",{"_index":404,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["aid",{"_index":592,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["already",{"_index":419,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["alternatively",{"_index":1340,"title":{},"body":{"index.html":{}}}],["amount",{"_index":1279,"title":{},"body":{"injectables/WalletService.html":{}}}],["api",{"_index":1369,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":270,"title":{},"body":{"controllers/AuthController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{}}}],["apibadrequestresponse()@post('apple')@httpcode(httpstatus.ok",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibadrequestresponse()@post('device')@httpcode(httpstatus.ok",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibadrequestresponse()@post('facebook')@httpcode(httpstatus.ok",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibadrequestresponse()@post('google')@httpcode(httpstatus.ok",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibearerauth",{"_index":102,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@get",{"_index":80,"title":{},"body":{"controllers/AccountController.html":{}}}],["apibearerauth()@useguards(jwtauthguard)@patch",{"_index":86,"title":{},"body":{"controllers/AccountController.html":{}}}],["apicreatedresponse",{"_index":103,"title":{},"body":{"controllers/AccountController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["apiforbiddenresponse",{"_index":1248,"title":{},"body":{"controllers/WalletController.html":{}}}],["apinocontentresponse",{"_index":930,"title":{},"body":{"controllers/GroupController.html":{}}}],["apiokresponse",{"_index":104,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/WalletController.html":{}}}],["apiokresponse({type",{"_index":1239,"title":{},"body":{"controllers/WalletController.html":{}}}],["apioperation",{"_index":105,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["apioperation({summary",{"_index":575,"title":{},"body":{"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["apiparam",{"_index":931,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{}}}],["apiproduces",{"_index":221,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["apiproduces('text/plain",{"_index":222,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["apiproperty",{"_index":17,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty()@column({type",{"_index":1125,"title":{},"body":{"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty()@createdatecolumn",{"_index":1123,"title":{},"body":{"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty()@primarycolumn",{"_index":1135,"title":{},"body":{"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty()@updatedatecolumn",{"_index":1131,"title":{},"body":{"classes/Profile.html":{},"classes/Wallet.html":{}}}],["apiproperty({minlength",{"_index":546,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["apipropertyoptional",{"_index":532,"title":{},"body":{"classes/CreateAccountDto.html":{},"classes/CreateProfileDto.html":{},"classes/Profile.html":{},"classes/ProfileDto.html":{},"classes/Wallet.html":{}}}],["apipropertyoptional()@column({type",{"_index":1121,"title":{},"body":{"classes/Profile.html":{}}}],["apipropertyoptional()@onetoone(undefined",{"_index":1233,"title":{},"body":{"classes/Wallet.html":{}}}],["apipropertyoptional()@onetoone(undefined)@joincolumn",{"_index":1133,"title":{},"body":{"classes/Profile.html":{}}}],["apiquery",{"_index":1064,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["apiresponse",{"_index":106,"title":{},"body":{"controllers/AccountController.html":{}}}],["apitags",{"_index":107,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["apitags('account",{"_index":112,"title":{},"body":{"controllers/AccountController.html":{}}}],["apitags('auth",{"_index":279,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('friends",{"_index":628,"title":{},"body":{"controllers/FriendController.html":{}}}],["apitags('groups",{"_index":934,"title":{},"body":{"controllers/GroupController.html":{}}}],["apitags('leaderboards",{"_index":1067,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["apitags('profiles",{"_index":1182,"title":{},"body":{"controllers/ProfileController.html":{}}}],["apitags('wallets",{"_index":1252,"title":{},"body":{"controllers/WalletController.html":{}}}],["app.controller",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":220,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":214,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["apple",{"_index":183,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["appleid",{"_index":26,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"classes/CreateAccountDto.html":{}}}],["appmodule",{"_index":224,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":219,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"overview.html":{}}}],["argumentshost",{"_index":988,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["array",{"_index":520,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["assign",{"_index":448,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["async",{"_index":67,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["attached",{"_index":1042,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":146,"title":{},"body":{"modules/AccountModule.html":{}}}],["auth.guard",{"_index":111,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["auth.guard.ts",{"_index":1022,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authcontroller",{"_index":142,"title":{"controllers/AuthController.html":{}},"body":{"modules/AccountModule.html":{},"controllers/AuthController.html":{}}}],["authdto",{"_index":254,"title":{"classes/AuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthDto.html":{}}}],["authenticate",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{}}}],["authentication",{"_index":292,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":1023,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":1024,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authwithappleid",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithappleid(@body",{"_index":299,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithappleid(authdto",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithdeviceid",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithdeviceid(@body",{"_index":286,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithdeviceid(authdto",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithfacebookid",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithfacebookid(@body",{"_index":302,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithfacebookid(authdto",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithgoogleid",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithgoogleid(@body",{"_index":296,"title":{},"body":{"controllers/AuthController.html":{}}}],["authwithgoogleid(authdto",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{}}}],["available",{"_index":1379,"title":{},"body":{"index.html":{}}}],["avatarurl",{"_index":541,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/Profile.html":{}}}],["await",{"_index":208,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["b",{"_index":699,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/SelfReferenceError.html":{}}}],["badrequestdto",{"_index":306,"title":{"classes/BadRequestDto.html":{}},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@get(':leaderboardid/me')@usefilters(leaderboardexceptionfilter",{"_index":1057,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@delete(':groupid')@httpcode(httpstatus.no_content",{"_index":872,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@delete(':groupid/members/:userid')@httpcode(httpstatus.no_content",{"_index":912,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@delete(':groupid/members/me')@httpcode(httpstatus.no_content",{"_index":905,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get",{"_index":880,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get(':groupid",{"_index":875,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get(':groupid/members",{"_index":896,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get(':groupid/members/:userid",{"_index":884,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get('memberships/:userid",{"_index":893,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@get('memberships/me",{"_index":889,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@patch(':groupid",{"_index":915,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post",{"_index":869,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post(':groupid/members/:userid",{"_index":899,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post(':groupid/members/:userid/ban",{"_index":866,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post(':groupid/members/:userid/promote",{"_index":909,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(groupexceptionfilter)@post(':groupid/members/me",{"_index":902,"title":{},"body":{"controllers/GroupController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(leaderboardexceptionfilter)@get(':leaderboardid",{"_index":1051,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(leaderboardexceptionfilter)@get(':leaderboardid/:userid",{"_index":1054,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["badrequestdto})@apibearerauth()@useguards(jwtauthguard)@usefilters(leaderboardexceptionfilter)@post(':leaderboardid",{"_index":1061,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["ban",{"_index":451,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["banfromgroup",{"_index":849,"title":{},"body":{"controllers/GroupController.html":{}}}],["banfromgroup(req",{"_index":864,"title":{},"body":{"controllers/GroupController.html":{}}}],["banned",{"_index":414,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["bannedfromgrouperror",{"_index":318,"title":{"classes/BannedFromGroupError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["between",{"_index":706,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["bid",{"_index":599,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["block",{"_index":565,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["block(aid",{"_index":717,"title":{},"body":{"injectables/FriendService.html":{}}}],["block(req",{"_index":582,"title":{},"body":{"controllers/FriendController.html":{}}}],["blocked",{"_index":777,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["blockedbyother",{"_index":827,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{},"miscellaneous/enumerations.html":{}}}],["blockedbyyou",{"_index":828,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{},"miscellaneous/enumerations.html":{}}}],["blockfrienddto",{"_index":583,"title":{},"body":{"controllers/FriendController.html":{}}}],["blockfrienddto.id",{"_index":654,"title":{},"body":{"controllers/FriendController.html":{}}}],["blocks",{"_index":778,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["body",{"_index":90,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{}}}],["boolean",{"_index":374,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CreateGroupDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["bootstrap",{"_index":131,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":703,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["break",{"_index":756,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["browse",{"_index":1403,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1400,"title":{},"body":{"modules.html":{}}}],["cancel",{"_index":607,"title":{},"body":{"controllers/FriendController.html":{}}}],["cannotbanerror",{"_index":340,"title":{"classes/CannotBanError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["cannotdeletegrouperror",{"_index":338,"title":{"classes/CannotDeleteGroupError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["cannotkickerror",{"_index":341,"title":{"classes/CannotKickError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["cannotleavegrouperror",{"_index":339,"title":{"classes/CannotLeaveGroupError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["cascade",{"_index":804,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{},"classes/Wallet.html":{}}}],["cascade'})@joincolumn",{"_index":788,"title":{},"body":{"classes/Friendship.html":{},"classes/Wallet.html":{}}}],["case",{"_index":754,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["catch",{"_index":985,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["catch(_basegroupexception",{"_index":994,"title":{},"body":{"classes/GroupExceptionFilter.html":{}}}],["catch(_baseleaderboardexception",{"_index":1092,"title":{},"body":{"classes/LeaderboardExceptionFilter.html":{}}}],["catch(exception",{"_index":986,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["caterva",{"_index":1338,"title":{},"body":{"index.html":{}}}],["cause",{"_index":382,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["check",{"_index":408,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Friendship.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/WalletController.html":{},"classes/_BaseGroupException.html":{}}}],["check(`\"aid",{"_index":803,"title":{},"body":{"classes/Friendship.html":{}}}],["class",{"_index":0,"title":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"classes/ProfileDto.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"classes/ProfileDto.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"overview.html":{}}}],["client",{"_index":492,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"index.html":{}}}],["client.zadd",{"_index":522,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["client.zrevrange",{"_index":517,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["client.zrevrank(leaderboardid",{"_index":498,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["client.zscore(leaderboardid",{"_index":497,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["clone",{"_index":1360,"title":{},"body":{"index.html":{}}}],["cloning",{"_index":1388,"title":{},"body":{"index.html":{}}}],["cluster_accountmodule",{"_index":134,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_accountmodule_exports",{"_index":135,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_accountmodule_providers",{"_index":136,"title":{},"body":{"modules/AccountModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":464,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_exports",{"_index":466,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_imports",{"_index":465,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_extensionsmodule",{"_index":554,"title":{},"body":{"modules/ExtensionsModule.html":{},"overview.html":{}}}],["cluster_extensionsmodule_imports",{"_index":555,"title":{},"body":{"modules/ExtensionsModule.html":{},"overview.html":{}}}],["cluster_friendmodule",{"_index":658,"title":{},"body":{"modules/FriendModule.html":{},"overview.html":{}}}],["cluster_friendmodule_exports",{"_index":659,"title":{},"body":{"modules/FriendModule.html":{},"overview.html":{}}}],["cluster_friendmodule_providers",{"_index":660,"title":{},"body":{"modules/FriendModule.html":{},"overview.html":{}}}],["cluster_groupmodule",{"_index":1012,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_exports",{"_index":1014,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_groupmodule_providers",{"_index":1013,"title":{},"body":{"modules/GroupModule.html":{},"overview.html":{}}}],["cluster_leaderboardmodule",{"_index":1093,"title":{},"body":{"modules/LeaderboardModule.html":{},"overview.html":{}}}],["cluster_leaderboardmodule_exports",{"_index":1095,"title":{},"body":{"modules/LeaderboardModule.html":{},"overview.html":{}}}],["cluster_leaderboardmodule_providers",{"_index":1094,"title":{},"body":{"modules/LeaderboardModule.html":{},"overview.html":{}}}],["cluster_profilemodule",{"_index":1196,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_exports",{"_index":1197,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_profilemodule_providers",{"_index":1198,"title":{},"body":{"modules/ProfileModule.html":{},"overview.html":{}}}],["cluster_walletmodule",{"_index":1260,"title":{},"body":{"modules/WalletModule.html":{},"overview.html":{}}}],["cluster_walletmodule_exports",{"_index":1262,"title":{},"body":{"modules/WalletModule.html":{},"overview.html":{}}}],["cluster_walletmodule_imports",{"_index":1261,"title":{},"body":{"modules/WalletModule.html":{}}}],["cluster_walletmodule_providers",{"_index":1263,"title":{},"body":{"modules/WalletModule.html":{},"overview.html":{}}}],["column",{"_index":56,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["column({default",{"_index":840,"title":{},"body":{"classes/Group.html":{}}}],["column({type",{"_index":50,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{}}}],["common/dto/bad",{"_index":932,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["common/guard/jwt",{"_index":110,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["complete",{"_index":741,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["compodoc",{"_index":1378,"title":{},"body":{"index.html":{}}}],["compose",{"_index":1346,"title":{},"body":{"index.html":{}}}],["composite",{"_index":665,"title":{},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["concepts",{"_index":1387,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":377,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["connections",{"_index":1353,"title":{},"body":{"index.html":{}}}],["const",{"_index":199,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["construct",{"_index":519,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["constructor",{"_index":169,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["constructor(accountrepository",{"_index":170,"title":{},"body":{"injectables/AccountService.html":{}}}],["constructor(friendshiprepository",{"_index":679,"title":{},"body":{"injectables/FriendService.html":{}}}],["constructor(private",{"_index":114,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AppController.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"controllers/ProfileController.html":{},"classes/_BaseLeaderboardException.html":{}}}],["constructor(profilerepository",{"_index":1202,"title":{},"body":{"injectables/ProfileService.html":{}}}],["constructor(redisservice",{"_index":1104,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["constructor(walletrepository",{"_index":1271,"title":{},"body":{"injectables/WalletService.html":{}}}],["controller",{"_index":60,"title":{"controllers/AccountController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}},"body":{"controllers/AccountController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["controller('account",{"_index":113,"title":{},"body":{"controllers/AccountController.html":{}}}],["controller('auth",{"_index":280,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('friends",{"_index":629,"title":{},"body":{"controllers/FriendController.html":{}}}],["controller('groups",{"_index":935,"title":{},"body":{"controllers/GroupController.html":{}}}],["controller('leaderboards",{"_index":1068,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["controller('profiles",{"_index":1183,"title":{},"body":{"controllers/ProfileController.html":{}}}],["controller('wallets",{"_index":1253,"title":{},"body":{"controllers/WalletController.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"controllers/GroupController.html":{},"modules/GroupModule.html":{},"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["core",{"_index":1392,"title":{},"body":{"index.html":{}}}],["core/account/entities/account.entity",{"_index":1137,"title":{},"body":{"classes/Profile.html":{},"classes/Wallet.html":{}}}],["core/core.module",{"_index":232,"title":{},"body":{"modules/AppModule.html":{},"modules/WalletModule.html":{}}}],["core/friend/enums/friendship",{"_index":1251,"title":{},"body":{"controllers/WalletController.html":{}}}],["core/friend/friend.service",{"_index":1250,"title":{},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{}}}],["coremodule",{"_index":228,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/WalletModule.html":{},"modules.html":{},"overview.html":{}}}],["couldnotupdateleaderboardentryerror",{"_index":475,"title":{"classes/CouldNotUpdateLeaderboardEntryError.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["count",{"_index":959,"title":{},"body":{"controllers/GroupController.html":{},"classes/GroupsDto.html":{},"classes/MembershipsDto.html":{}}}],["create",{"_index":74,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/_BaseGroupException.html":{},"index.html":{}}}],["create(createaccountdto",{"_index":174,"title":{},"body":{"injectables/AccountService.html":{}}}],["create(req",{"_index":1166,"title":{},"body":{"controllers/ProfileController.html":{}}}],["create(userid",{"_index":1204,"title":{},"body":{"injectables/ProfileService.html":{}}}],["createaccount",{"_index":66,"title":{},"body":{"controllers/AccountController.html":{}}}],["createaccount(@body",{"_index":118,"title":{},"body":{"controllers/AccountController.html":{}}}],["createaccount(createaccountdto",{"_index":70,"title":{},"body":{"controllers/AccountController.html":{}}}],["createaccountdto",{"_index":71,"title":{"classes/CreateAccountDto.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/CreateAccountDto.html":{},"classes/UpdateAccountDto.html":{}}}],["createaccountdto.appleid",{"_index":204,"title":{},"body":{"injectables/AccountService.html":{}}}],["createaccountdto.deviceid",{"_index":202,"title":{},"body":{"injectables/AccountService.html":{}}}],["createaccountdto.googleid",{"_index":206,"title":{},"body":{"injectables/AccountService.html":{}}}],["createdat",{"_index":27,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["createdatecolumn",{"_index":43,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["creategroup",{"_index":850,"title":{},"body":{"controllers/GroupController.html":{}}}],["creategroup(req",{"_index":868,"title":{},"body":{"controllers/GroupController.html":{}}}],["creategroupdto",{"_index":533,"title":{"classes/CreateGroupDto.html":{}},"body":{"classes/CreateGroupDto.html":{},"controllers/GroupController.html":{},"classes/UpdateGroupDto.html":{}}}],["creategroupdto.inviteonly",{"_index":940,"title":{},"body":{"controllers/GroupController.html":{}}}],["creategroupdto.name",{"_index":939,"title":{},"body":{"controllers/GroupController.html":{}}}],["createprofiledto",{"_index":538,"title":{"classes/CreateProfileDto.html":{}},"body":{"classes/CreateProfileDto.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{}}}],["createprofiledto.displayname",{"_index":1149,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["createprofiledto?.avatarurl",{"_index":1151,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["createprofiledto?.language",{"_index":1153,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["createprofiledto?.location",{"_index":1155,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["creatorid",{"_index":347,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["ctx",{"_index":995,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["ctx.getrequest",{"_index":998,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["ctx.getresponse",{"_index":997,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["currency",{"_index":1280,"title":{},"body":{"injectables/WalletService.html":{}}}],["current",{"_index":82,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["currentadmincount",{"_index":446,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["currentfinalstatus",{"_index":776,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["custom",{"_index":1389,"title":{},"body":{"index.html":{}}}],["d",{"_index":1348,"title":{},"body":{"index.html":{}}}],["database_url",{"_index":1356,"title":{},"body":{"index.html":{}}}],["date",{"_index":42,"title":{},"body":{"classes/Account.html":{},"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["date().toisostring",{"_index":1002,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["declarations",{"_index":130,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["decorators",{"_index":35,"title":{},"body":{"classes/Account.html":{},"controllers/AccountController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/CreateProfileDto.html":{},"controllers/FriendController.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupMember.html":{},"controllers/LeaderboardController.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{}}}],["default",{"_index":783,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"controllers/LeaderboardController.html":{},"classes/Profile.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"index.html":{}}}],["defined",{"_index":14,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{}}}],["delete",{"_index":395,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/_BaseGroupException.html":{}}}],["delete(':groupid",{"_index":952,"title":{},"body":{"controllers/GroupController.html":{}}}],["delete(':groupid/members/:userid",{"_index":973,"title":{},"body":{"controllers/GroupController.html":{}}}],["delete(':groupid/members/me",{"_index":971,"title":{},"body":{"controllers/GroupController.html":{}}}],["delete('me",{"_index":648,"title":{},"body":{"controllers/FriendController.html":{}}}],["delete(groupid",{"_index":396,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["deletegroup",{"_index":851,"title":{},"body":{"controllers/GroupController.html":{}}}],["deletegroup(@request",{"_index":954,"title":{},"body":{"controllers/GroupController.html":{}}}],["deletegroup(req",{"_index":871,"title":{},"body":{"controllers/GroupController.html":{}}}],["dependencies",{"_index":128,"title":{"dependencies.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"dependencies.html":{},"overview.html":{}}}],["derive",{"_index":693,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["description",{"_index":686,"title":{},"body":{"injectables/FriendService.html":{}}}],["development",{"_index":1343,"title":{},"body":{"index.html":{}}}],["device",{"_index":186,"title":{},"body":{"injectables/AccountService.html":{}}}],["deviceid",{"_index":28,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{}}}],["di",{"_index":1386,"title":{},"body":{"index.html":{}}}],["didblock",{"_index":1323,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["directory",{"_index":1380,"title":{},"body":{"index.html":{}}}],["diretory",{"_index":1399,"title":{},"body":{"index.html":{}}}],["discard",{"_index":725,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["discarded",{"_index":378,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["displayname",{"_index":542,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/Profile.html":{}}}],["dist/**/*.entity{.ts,.js",{"_index":240,"title":{},"body":{"modules/AppModule.html":{}}}],["docker",{"_index":1345,"title":{},"body":{"index.html":{}}}],["document",{"_index":1383,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1377,"title":{},"body":{"index.html":{}}}],["downloaded",{"_index":1372,"title":{},"body":{"index.html":{}}}],["dsn",{"_index":1357,"title":{},"body":{"index.html":{}}}],["dto",{"_index":636,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/SelfReferenceError.html":{}}}],["dto.blockedbyother.push(id",{"_index":760,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.blockedbyyou.push(id",{"_index":759,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.count",{"_index":944,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto.friends.push(id",{"_index":758,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.group",{"_index":937,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto.groups",{"_index":943,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto.receivedrequests.push(id",{"_index":757,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.sentrequests.push(id",{"_index":755,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto.status",{"_index":637,"title":{},"body":{"controllers/FriendController.html":{}}}],["dto/access",{"_index":271,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/auth.dto",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":99,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/GroupController.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["dto/friendship",{"_index":618,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["dto/group.dto",{"_index":920,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/groups.dto",{"_index":922,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/leaderboard",{"_index":482,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["dto/membership.dto",{"_index":929,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/memberships.dto",{"_index":927,"title":{},"body":{"controllers/GroupController.html":{}}}],["dto/profile.dto",{"_index":1181,"title":{},"body":{"controllers/ProfileController.html":{}}}],["dto/reference",{"_index":623,"title":{},"body":{"controllers/FriendController.html":{}}}],["dto/update",{"_index":101,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/_BaseGroupException.html":{}}}],["e",{"_index":1186,"title":{},"body":{"controllers/ProfileController.html":{}}}],["effect",{"_index":1396,"title":{},"body":{"index.html":{}}}],["entities",{"_index":239,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/account.entity",{"_index":108,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["entities/friendship",{"_index":664,"title":{},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["entities/friendship.entity",{"_index":662,"title":{},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["entities/group",{"_index":326,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"modules/GroupModule.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["entities/group.entity",{"_index":324,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["entities/profile.entity",{"_index":1142,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{}}}],["entities/wallet.entity",{"_index":1249,"title":{},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{}}}],["entity",{"_index":55,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["entries",{"_index":502,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["entries'})@apibadrequestresponse({type",{"_index":1050,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["entries.dto",{"_index":485,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["entries.dto.ts",{"_index":1082,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{}}}],["entries.dto.ts:4",{"_index":1086,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{}}}],["entries.dto.ts:5",{"_index":1085,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{}}}],["entries.dto.ts:6",{"_index":1083,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{}}}],["entry",{"_index":488,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["entry.dto",{"_index":483,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["entry.dto.ts",{"_index":1087,"title":{},"body":{"classes/LeaderboardEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["entry.dto.ts:2",{"_index":1090,"title":{},"body":{"classes/LeaderboardEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["entry.dto.ts:3",{"_index":1089,"title":{},"body":{"classes/LeaderboardEntryDto.html":{}}}],["entry.dto.ts:4",{"_index":1088,"title":{},"body":{"classes/LeaderboardEntryDto.html":{}}}],["enum",{"_index":795,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{}}}],["enumerations",{"_index":1316,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/friendship",{"_index":728,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/SelfReferenceError.html":{}}}],["enums/group",{"_index":329,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["environment",{"_index":1351,"title":{},"body":{"index.html":{}}}],["error",{"_index":291,"title":{},"body":{"controllers/AuthController.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/ErrorDto.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["error.filter",{"_index":627,"title":{},"body":{"controllers/FriendController.html":{}}}],["error.filter.ts",{"_index":1213,"title":{},"body":{"classes/SelfReferenceErrorFilter.html":{}}}],["error.filter.ts:6",{"_index":1214,"title":{},"body":{"classes/SelfReferenceErrorFilter.html":{}}}],["errordto",{"_index":312,"title":{"classes/ErrorDto.html":{}},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{}}}],["errors",{"_index":383,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["example",{"_index":1397,"title":{},"body":{"index.html":{}}}],["exception",{"_index":990,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["exception.filter",{"_index":925,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["exception.filter.ts",{"_index":982,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{}}}],["exception.filter.ts:12",{"_index":989,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{}}}],["exception.message",{"_index":1000,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["exception.name",{"_index":999,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{}}}],["exceptionfilter",{"_index":984,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["exist",{"_index":366,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["existing",{"_index":195,"title":{},"body":{"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["exists",{"_index":360,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/_BaseGroupException.html":{}}}],["expiresin",{"_index":159,"title":{},"body":{"modules/AccountModule.html":{}}}],["export",{"_index":19,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["exports",{"_index":133,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["express",{"_index":993,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{},"dependencies.html":{}}}],["expression",{"_index":815,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["extends",{"_index":320,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["extensions",{"_index":1391,"title":{},"body":{"index.html":{}}}],["extensions/extensions.module",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["extensionsmodule",{"_index":229,"title":{"modules/ExtensionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ExtensionsModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["extractjwt",{"_index":1031,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":1038,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["facebook",{"_index":189,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["facebookid",{"_index":29,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"classes/CreateAccountDto.html":{}}}],["failed",{"_index":293,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":350,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Wallet.html":{},"classes/_BaseGroupException.html":{}}}],["falsy",{"_index":376,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"index.html":{}}}],["filter",{"_index":369,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["filters/group",{"_index":924,"title":{},"body":{"controllers/GroupController.html":{}}}],["filters/leaderboard",{"_index":1066,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["finalstatus",{"_index":749,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["find",{"_index":180,"title":{},"body":{"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/_BaseGroupException.html":{}}}],["findgroup",{"_index":852,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroup(@param('groupid",{"_index":947,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroup(groupid",{"_index":874,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroups",{"_index":853,"title":{},"body":{"controllers/GroupController.html":{}}}],["findgroups(name",{"_index":878,"title":{},"body":{"controllers/GroupController.html":{}}}],["findmany(options",{"_index":373,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["findme",{"_index":1165,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["findme(@request",{"_index":1188,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["findme(req",{"_index":1170,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["findmembershipsofuser(userid",{"_index":427,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["findone",{"_index":164,"title":{},"body":{"injectables/AccountService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/WalletController.html":{}}}],["findone(@param('userid",{"_index":1191,"title":{},"body":{"controllers/ProfileController.html":{}}}],["findone(groupid",{"_index":363,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["findone(id",{"_index":178,"title":{},"body":{"injectables/AccountService.html":{}}}],["findone(req",{"_index":1242,"title":{},"body":{"controllers/WalletController.html":{}}}],["findone(userid",{"_index":1157,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["findonewithappleid",{"_index":165,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithappleid(appleid",{"_index":181,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithdeviceid",{"_index":166,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithdeviceid(deviceid",{"_index":184,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithfacebookid",{"_index":167,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithfacebookid(facebookid",{"_index":187,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithgoogleid",{"_index":168,"title":{},"body":{"injectables/AccountService.html":{}}}],["findonewithgoogleid(googleid",{"_index":190,"title":{},"body":{"injectables/AccountService.html":{}}}],["findorcreate",{"_index":1268,"title":{},"body":{"injectables/WalletService.html":{}}}],["findorcreate(userid",{"_index":1274,"title":{},"body":{"injectables/WalletService.html":{}}}],["findrelationofmeandother",{"_index":566,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationofmeandother(req",{"_index":586,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelations",{"_index":567,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelations(req",{"_index":591,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationsofme",{"_index":568,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationsofme(req",{"_index":595,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationwithother",{"_index":569,"title":{},"body":{"controllers/FriendController.html":{}}}],["findrelationwithother(req",{"_index":598,"title":{},"body":{"controllers/FriendController.html":{}}}],["first",{"_index":416,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["folder",{"_index":1350,"title":{},"body":{"index.html":{}}}],["found",{"_index":499,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["friend",{"_index":578,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friend.controller",{"_index":667,"title":{},"body":{"modules/FriendModule.html":{}}}],["friend.dto",{"_index":624,"title":{},"body":{"controllers/FriendController.html":{}}}],["friend.dto.ts",{"_index":1210,"title":{},"body":{"classes/ReferenceFriendDto.html":{}}}],["friend.dto.ts:2",{"_index":1211,"title":{},"body":{"classes/ReferenceFriendDto.html":{}}}],["friend.service",{"_index":616,"title":{},"body":{"controllers/FriendController.html":{},"modules/FriendModule.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["friend/friend.module",{"_index":472,"title":{},"body":{"modules/CoreModule.html":{}}}],["friendcontroller",{"_index":561,"title":{"controllers/FriendController.html":{}},"body":{"controllers/FriendController.html":{},"modules/FriendModule.html":{}}}],["friendmodule",{"_index":467,"title":{"modules/FriendModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/FriendModule.html":{},"modules.html":{},"overview.html":{}}}],["friends",{"_index":563,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"miscellaneous/enumerations.html":{}}}],["friendservice",{"_index":615,"title":{"injectables/FriendService.html":{}},"body":{"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["friendservice._derivetwowayrelationstatus",{"_index":744,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendship",{"_index":606,"title":{"classes/Friendship.html":{}},"body":{"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcomposite",{"_index":663,"title":{"classes/FriendshipComposite.html":{}},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcomposite.bid",{"_index":752,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcomposite?.statusatob",{"_index":750,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcomposite?.statusbtoa",{"_index":751,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcompositerepository",{"_index":680,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipcomposites",{"_index":747,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiponewayrelationstatus",{"_index":690,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"miscellaneous/enumerations.html":{}}}],["friendshiponewayrelationstatus.didblock",{"_index":737,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiponewayrelationstatus.gotblocked",{"_index":738,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiponewayrelationstatus.noaction",{"_index":734,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiponewayrelationstatus.ok",{"_index":732,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiprepository",{"_index":682,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshipstatus",{"_index":1256,"title":{},"body":{"controllers/WalletController.html":{}}}],["friendshiptwowayrelationstatus",{"_index":700,"title":{},"body":{"injectables/FriendService.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"miscellaneous/enumerations.html":{}}}],["friendshiptwowayrelationstatus.blockedbyother",{"_index":740,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiptwowayrelationstatus.blockedbyyou",{"_index":739,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiptwowayrelationstatus.friends",{"_index":733,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{}}}],["friendshiptwowayrelationstatus.receivedrequest",{"_index":736,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiptwowayrelationstatus.sentrequest",{"_index":735,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["friendshiptwowayrelationstatusdto",{"_index":621,"title":{"classes/FriendshipTwoWayRelationStatusDto.html":{}},"body":{"controllers/FriendController.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{}}}],["friendshiptwowayrelationstatusesdto",{"_index":617,"title":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{}}}],["function",{"_index":273,"title":{},"body":{"controllers/AuthController.html":{}}}],["functions",{"_index":1331,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":1381,"title":{},"body":{"index.html":{}}}],["generating",{"_index":1375,"title":{},"body":{"index.html":{}}}],["get(':aid",{"_index":639,"title":{},"body":{"controllers/FriendController.html":{}}}],["get(':aid/:bid",{"_index":642,"title":{},"body":{"controllers/FriendController.html":{}}}],["get(':groupid",{"_index":946,"title":{},"body":{"controllers/GroupController.html":{}}}],["get(':groupid/members",{"_index":963,"title":{},"body":{"controllers/GroupController.html":{}}}],["get(':groupid/members/:userid",{"_index":965,"title":{},"body":{"controllers/GroupController.html":{}}}],["get(':leaderboardid",{"_index":1074,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["get(':leaderboardid/:userid",{"_index":1073,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["get(':leaderboardid/me",{"_index":1069,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["get(':userid",{"_index":1190,"title":{},"body":{"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["get('me",{"_index":631,"title":{},"body":{"controllers/FriendController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["get('me/:otherid",{"_index":633,"title":{},"body":{"controllers/FriendController.html":{}}}],["get('memberships/:userid",{"_index":961,"title":{},"body":{"controllers/GroupController.html":{}}}],["get('memberships/me",{"_index":956,"title":{},"body":{"controllers/GroupController.html":{}}}],["get()@apiproduces('text/plain",{"_index":217,"title":{},"body":{"controllers/AppController.html":{}}}],["get(aid",{"_index":719,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["getall",{"_index":678,"title":{},"body":{"injectables/FriendService.html":{}}}],["getall(aid",{"_index":721,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["getcurrentaccount",{"_index":68,"title":{},"body":{"controllers/AccountController.html":{}}}],["getcurrentaccount(@request",{"_index":122,"title":{},"body":{"controllers/AccountController.html":{}}}],["getcurrentaccount(req",{"_index":79,"title":{},"body":{"controllers/AccountController.html":{}}}],["getentries",{"_index":503,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["getentries(leaderboardid",{"_index":1106,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["getentries(req",{"_index":1049,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["getentry",{"_index":491,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["getentry(leaderboardid",{"_index":1109,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["getentry(req",{"_index":1053,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["getentryofme",{"_index":1047,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["getentryofme(req",{"_index":1056,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["gethello",{"_index":216,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmember(groupid",{"_index":438,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["getmemberofgroup",{"_index":854,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmemberofgroup(req",{"_index":883,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembers(groupid",{"_index":441,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["getmembershipsofme",{"_index":855,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembershipsofme(@request",{"_index":957,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembershipsofme(req",{"_index":886,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembershipsofuser",{"_index":856,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembershipsofuser(req",{"_index":891,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembersofgroup",{"_index":857,"title":{},"body":{"controllers/GroupController.html":{}}}],["getmembersofgroup(req",{"_index":895,"title":{},"body":{"controllers/GroupController.html":{}}}],["getting",{"_index":1336,"title":{"index.html":{}},"body":{"index.html":{}}}],["git",{"_index":1359,"title":{},"body":{"index.html":{}}}],["given",{"_index":177,"title":{},"body":{"injectables/AccountService.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["google",{"_index":192,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{}}}],["googleid",{"_index":30,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"classes/CreateAccountDto.html":{}}}],["gotblocked",{"_index":1324,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["group",{"_index":323,"title":{"classes/Group.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group'})@apibadrequestresponse({type",{"_index":865,"title":{},"body":{"controllers/GroupController.html":{}}}],["group.controller",{"_index":1016,"title":{},"body":{"modules/GroupModule.html":{}}}],["group.dto",{"_index":333,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/UpdateGroupDto.html":{},"classes/_BaseGroupException.html":{}}}],["group.dto.ts",{"_index":535,"title":{},"body":{"classes/CreateGroupDto.html":{},"classes/UpdateGroupDto.html":{}}}],["group.dto.ts:2",{"_index":537,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["group.dto.ts:3",{"_index":536,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["group.entity",{"_index":1011,"title":{},"body":{"classes/GroupMember.html":{}}}],["group.inviteonly",{"_index":352,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group.members",{"_index":442,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group.members.length",{"_index":443,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group.name",{"_index":351,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["group.service",{"_index":918,"title":{},"body":{"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"modules/GroupModule.html":{}}}],["group/group.module",{"_index":473,"title":{},"body":{"modules/CoreModule.html":{}}}],["groupadmin",{"_index":1328,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupbanned",{"_index":1330,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupcontroller",{"_index":847,"title":{"controllers/GroupController.html":{}},"body":{"controllers/GroupController.html":{},"modules/GroupModule.html":{}}}],["groupdoesnotexisterror",{"_index":334,"title":{"classes/GroupDoesNotExistError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupdoesnotexisterror(`group",{"_index":365,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupdto",{"_index":919,"title":{"classes/GroupDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/GroupDto.html":{}}}],["groupexceptionfilter",{"_index":923,"title":{"classes/GroupExceptionFilter.html":{}},"body":{"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{}}}],["groupid",{"_index":361,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupinvited",{"_index":1329,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["groupmember",{"_index":325,"title":{"classes/GroupMember.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["groupmember.group",{"_index":355,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmember.memberid",{"_index":356,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmember.membershipstatus",{"_index":357,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmember?.membershipstatus",{"_index":391,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmemberrepository",{"_index":346,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmembershipstatus",{"_index":328,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["groupmembershipstatus.admin",{"_index":358,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmembershipstatus.banned",{"_index":413,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmembershipstatus.invited",{"_index":418,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmembershipstatus.member",{"_index":417,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groupmodule",{"_index":468,"title":{"modules/GroupModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/GroupModule.html":{},"modules.html":{},"overview.html":{}}}],["groupname",{"_index":348,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["grouprepository",{"_index":344,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groups",{"_index":367,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["groups'})@apibadrequestresponse({type",{"_index":879,"title":{},"body":{"controllers/GroupController.html":{}}}],["groupsdto",{"_index":921,"title":{"classes/GroupsDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/GroupsDto.html":{}}}],["groupservice",{"_index":342,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"modules/GroupModule.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"overview.html":{}}}],["gt",{"_index":523,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["hello",{"_index":245,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":987,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["host.switchtohttp",{"_index":996,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["httpcode",{"_index":94,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{}}}],["httpcode(httpstatus.created",{"_index":117,"title":{},"body":{"controllers/AccountController.html":{}}}],["httpcode(httpstatus.created)@post",{"_index":72,"title":{},"body":{"controllers/AccountController.html":{}}}],["httpcode(httpstatus.no_content",{"_index":953,"title":{},"body":{"controllers/GroupController.html":{}}}],["httpcode(httpstatus.ok",{"_index":285,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FriendController.html":{}}}],["httpexception",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["https://github.com/catervajs/caterva.git",{"_index":1361,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":95,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{}}}],["httpstatus.bad_request",{"_index":290,"title":{},"body":{"controllers/AuthController.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["httpstatus.forbidden",{"_index":1259,"title":{},"body":{"controllers/WalletController.html":{}}}],["id",{"_index":31,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["ignoreexpiration",{"_index":1039,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ilike",{"_index":322,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["ilike(`%${options.name",{"_index":380,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["implements",{"_index":983,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["import",{"_index":16,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"index.html":{}}}],["imports",{"_index":152,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["index({unique",{"_index":36,"title":{},"body":{"classes/Account.html":{}}}],["individually",{"_index":714,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["injectable",{"_index":161,"title":{"injectables/AccountService.html":{},"injectables/AppService.html":{},"injectables/FriendService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LeaderboardService.html":{},"injectables/ProfileService.html":{},"injectables/WalletService.html":{}},"body":{"injectables/AccountService.html":{},"injectables/AppService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["injectables",{"_index":162,"title":{},"body":{"injectables/AccountService.html":{},"injectables/AppService.html":{},"injectables/FriendService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LeaderboardService.html":{},"injectables/ProfileService.html":{},"injectables/WalletService.html":{},"overview.html":{}}}],["injectrepository",{"_index":196,"title":{},"body":{"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["injectrepository(account",{"_index":197,"title":{},"body":{"injectables/AccountService.html":{}}}],["injectrepository(friendship",{"_index":730,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["injectrepository(friendshipcomposite",{"_index":731,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["injectrepository(group",{"_index":343,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["injectrepository(groupmember",{"_index":345,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["injectrepository(profile",{"_index":1144,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["injectrepository(wallet",{"_index":1284,"title":{},"body":{"injectables/WalletService.html":{}}}],["install",{"_index":1363,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":1187,"title":{},"body":{"controllers/ProfileController.html":{}}}],["integer",{"_index":1128,"title":{},"body":{"classes/Profile.html":{},"classes/Wallet.html":{}}}],["inverse",{"_index":695,"title":{},"body":{"injectables/FriendService.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{}}}],["inverse\".\"aid",{"_index":822,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["inverse\".\"bid",{"_index":821,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["inverse\".\"status",{"_index":820,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["inverse.aid",{"_index":764,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inverse.bid",{"_index":765,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inverse.status",{"_index":766,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inverse?.status",{"_index":746,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inverserelationstatus",{"_index":691,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["inversestatus",{"_index":712,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["invitation",{"_index":437,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["invite",{"_index":370,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["invited",{"_index":407,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["inviteonly",{"_index":349,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CreateGroupDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["invitetogroup",{"_index":858,"title":{},"body":{"controllers/GroupController.html":{}}}],["invitetogroup(req",{"_index":898,"title":{},"body":{"controllers/GroupController.html":{}}}],["isfinite(number(options.limit",{"_index":515,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["isfinite(number(options.offset",{"_index":512,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["itself",{"_index":774,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["join",{"_index":430,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/FriendshipComposite.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["join(groupid",{"_index":431,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["joincolumn",{"_index":799,"title":{},"body":{"classes/Friendship.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["joingroup",{"_index":859,"title":{},"body":{"controllers/GroupController.html":{}}}],["joingroup(req",{"_index":901,"title":{},"body":{"controllers/GroupController.html":{}}}],["json",{"_index":1373,"title":{},"body":{"index.html":{}}}],["jsonb",{"_index":51,"title":{},"body":{"classes/Account.html":{}}}],["jwt",{"_index":1034,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.strategy",{"_index":151,"title":{},"body":{"modules/AccountModule.html":{}}}],["jwtauthguard",{"_index":109,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["jwtfromrequest",{"_index":1037,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":149,"title":{},"body":{"modules/AccountModule.html":{}}}],["jwtmodule.register",{"_index":154,"title":{},"body":{"modules/AccountModule.html":{}}}],["jwtservice",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{}}}],["jwtservice.sign(payload",{"_index":278,"title":{},"body":{"controllers/AuthController.html":{}}}],["jwtstrategy",{"_index":137,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AccountModule.html":{},"injectables/JwtStrategy.html":{},"overview.html":{}}}],["keyprefix",{"_index":1102,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["kick",{"_index":459,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["language",{"_index":543,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/Profile.html":{}}}],["last",{"_index":447,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["launching",{"_index":1366,"title":{},"body":{"index.html":{}}}],["lb",{"_index":1103,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["leaderboard",{"_index":489,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["leaderboard.controller",{"_index":1098,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["leaderboard.service",{"_index":1063,"title":{},"body":{"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{}}}],["leaderboard/leaderboard.module",{"_index":474,"title":{},"body":{"modules/CoreModule.html":{}}}],["leaderboardcontroller",{"_index":1044,"title":{"controllers/LeaderboardController.html":{}},"body":{"controllers/LeaderboardController.html":{},"modules/LeaderboardModule.html":{}}}],["leaderboardentriesdto",{"_index":484,"title":{"classes/LeaderboardEntriesDto.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["leaderboardentrydto",{"_index":481,"title":{"classes/LeaderboardEntryDto.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["leaderboardentrynotfounderror",{"_index":486,"title":{"classes/LeaderboardEntryNotFoundError.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["leaderboardexceptionfilter",{"_index":1065,"title":{"classes/LeaderboardExceptionFilter.html":{}},"body":{"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{}}}],["leaderboardid",{"_index":490,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["leaderboardmodule",{"_index":469,"title":{"modules/LeaderboardModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/LeaderboardModule.html":{},"modules.html":{},"overview.html":{}}}],["leaderboards",{"_index":1046,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["leaderboardservice",{"_index":487,"title":{"injectables/LeaderboardService.html":{}},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"overview.html":{}}}],["leave",{"_index":444,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["leave(groupid",{"_index":445,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["leavegroup",{"_index":860,"title":{},"body":{"controllers/GroupController.html":{}}}],["leavegroup(req",{"_index":904,"title":{},"body":{"controllers/GroupController.html":{}}}],["legend",{"_index":129,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["level",{"_index":1120,"title":{},"body":{"classes/Profile.html":{}}}],["libraries",{"_index":1376,"title":{},"body":{"index.html":{}}}],["limit",{"_index":505,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["literal",{"_index":1107,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["local",{"_index":1342,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":1354,"title":{},"body":{"index.html":{}}}],["location",{"_index":544,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/Profile.html":{}}}],["logging",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["manytoone",{"_index":800,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{}}}],["manytoone(undefined",{"_index":786,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{}}}],["matching",{"_index":21,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["me'})@apibadrequestresponse({type",{"_index":888,"title":{},"body":{"controllers/GroupController.html":{}}}],["member",{"_index":390,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["member.entity",{"_index":327,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"modules/GroupModule.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["member.entity.ts",{"_index":1005,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:10",{"_index":1007,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:13",{"_index":1009,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:20",{"_index":1010,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:23",{"_index":1006,"title":{},"body":{"classes/GroupMember.html":{}}}],["member.entity.ts:26",{"_index":1008,"title":{},"body":{"classes/GroupMember.html":{}}}],["memberid",{"_index":387,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["members",{"_index":440,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["membership",{"_index":330,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/MembershipDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/enumerations.html":{}}}],["membershipdto",{"_index":928,"title":{"classes/MembershipDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/MembershipDto.html":{}}}],["memberships",{"_index":887,"title":{},"body":{"controllers/GroupController.html":{},"classes/MembershipsDto.html":{}}}],["memberships.length",{"_index":960,"title":{},"body":{"controllers/GroupController.html":{}}}],["membershipsdto",{"_index":926,"title":{"classes/MembershipsDto.html":{}},"body":{"controllers/GroupController.html":{},"classes/MembershipsDto.html":{}}}],["membershipstatus",{"_index":401,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["message",{"_index":317,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["metadata",{"_index":32,"title":{},"body":{"classes/Account.html":{},"dependencies.html":{}}}],["methods",{"_index":65,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{}}}],["minlength",{"_index":551,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["miscellaneous",{"_index":1315,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["module",{"_index":125,"title":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":127,"title":{"modules.html":{}},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":76,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CreateGroupDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"miscellaneous/functions.html":{}}}],["nestjs",{"_index":479,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":96,"title":{},"body":{"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"modules/GroupModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1295,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":150,"title":{},"body":{"modules/AccountModule.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":148,"title":{},"body":{"modules/AccountModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1298,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":18,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"classes/GroupMember.html":{},"controllers/LeaderboardController.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":145,"title":{},"body":{"modules/AccountModule.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"modules/GroupModule.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"dependencies.html":{}}}],["new",{"_index":200,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["newamount",{"_index":1277,"title":{},"body":{"injectables/WalletService.html":{}}}],["newban",{"_index":452,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newban.groupid",{"_index":453,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newban.memberid",{"_index":454,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newban.membershipstatus",{"_index":455,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newmember",{"_index":421,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newmember.groupid",{"_index":422,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newmember.memberid",{"_index":423,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newmember.membershipstatus",{"_index":424,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["newwallet",{"_index":1286,"title":{},"body":{"injectables/WalletService.html":{}}}],["newwallet.userid",{"_index":1287,"title":{},"body":{"injectables/WalletService.html":{}}}],["noaction",{"_index":1322,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["non",{"_index":398,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["normal",{"_index":694,"title":{},"body":{"injectables/FriendService.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{}}}],["normal\".\"aid",{"_index":817,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["normal\".\"bid",{"_index":818,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["normal\".\"status",{"_index":819,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["normal.aid",{"_index":761,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normal.bid",{"_index":762,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normal.status",{"_index":763,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normal?.status",{"_index":745,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normalcurrency",{"_index":1225,"title":{},"body":{"classes/Wallet.html":{}}}],["normalizedlimit",{"_index":510,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["normalizedoffset",{"_index":509,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["normalrelationstatus",{"_index":698,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["normalstatus",{"_index":711,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["notgroupadminerror",{"_index":335,"title":{"classes/NotGroupAdminError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["notgroupmembererror",{"_index":337,"title":{"classes/NotGroupMemberError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["nothing",{"_index":780,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["notinvitedtogrouperror",{"_index":336,"title":{"classes/NotInvitedToGroupError.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["npm",{"_index":1362,"title":{},"body":{"index.html":{}}}],["null",{"_index":34,"title":{},"body":{"classes/Account.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateProfileDto.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["nullable",{"_index":39,"title":{},"body":{"classes/Account.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["number",{"_index":1084,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"injectables/LeaderboardService.html":{},"classes/Profile.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"injectables/WalletService.html":{}}}],["number(options.limit",{"_index":516,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["number(options.offset",{"_index":513,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["number(rank",{"_index":501,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["number(score",{"_index":500,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["object",{"_index":176,"title":{},"body":{"injectables/AccountService.html":{},"injectables/JwtStrategy.html":{}}}],["offset",{"_index":504,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["ok",{"_index":1321,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ondelete",{"_index":787,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{},"classes/Wallet.html":{}}}],["one",{"_index":696,"title":{},"body":{"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/SelfReferenceError.html":{},"miscellaneous/enumerations.html":{}}}],["onetomany",{"_index":846,"title":{},"body":{"classes/Group.html":{}}}],["onetomany(undefined",{"_index":842,"title":{},"body":{"classes/Group.html":{}}}],["onetoone",{"_index":801,"title":{},"body":{"classes/Friendship.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["openapi",{"_index":1370,"title":{},"body":{"index.html":{}}}],["operations",{"_index":775,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["optional",{"_index":25,"title":{},"body":{"classes/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":368,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["options",{"_index":372,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["options.inviteonly",{"_index":384,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["options.limit",{"_index":514,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["options.name",{"_index":379,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["options.offset",{"_index":511,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["otherid",{"_index":587,"title":{},"body":{"controllers/FriendController.html":{}}}],["otherwise",{"_index":1355,"title":{},"body":{"index.html":{}}}],["out",{"_index":140,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["overview",{"_index":1404,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1293,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":116,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["param('aid",{"_index":640,"title":{},"body":{"controllers/FriendController.html":{}}}],["param('bid",{"_index":643,"title":{},"body":{"controllers/FriendController.html":{}}}],["param('groupid",{"_index":950,"title":{},"body":{"controllers/GroupController.html":{}}}],["param('leaderboardid",{"_index":1071,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["param('otherid",{"_index":635,"title":{},"body":{"controllers/FriendController.html":{}}}],["param('userid",{"_index":962,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/WalletController.html":{}}}],["parameters",{"_index":75,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"miscellaneous/functions.html":{}}}],["parseuuidpipe",{"_index":1245,"title":{},"body":{"controllers/WalletController.html":{}}}],["partialtype",{"_index":1216,"title":{},"body":{"classes/UpdateAccountDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{}}}],["partialtype(createaccountdto",{"_index":1217,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["partialtype(creategroupdto",{"_index":1220,"title":{},"body":{"classes/UpdateGroupDto.html":{}}}],["partialtype(createprofiledto",{"_index":1222,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["passport",{"_index":1033,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":147,"title":{},"body":{"modules/AccountModule.html":{}}}],["passportstrategy",{"_index":1030,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1035,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["patch",{"_index":93,"title":{},"body":{"controllers/AccountController.html":{},"controllers/GroupController.html":{},"controllers/ProfileController.html":{}}}],["patch(':groupid",{"_index":949,"title":{},"body":{"controllers/GroupController.html":{}}}],["patch('me",{"_index":1192,"title":{},"body":{"controllers/ProfileController.html":{}}}],["path",{"_index":309,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["payload",{"_index":275,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":1043,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pg",{"_index":1303,"title":{},"body":{"dependencies.html":{}}}],["plugin",{"_index":1384,"title":{},"body":{"index.html":{}}}],["post",{"_index":89,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{}}}],["post(':groupid/members/:userid",{"_index":969,"title":{},"body":{"controllers/GroupController.html":{}}}],["post(':groupid/members/:userid/ban",{"_index":975,"title":{},"body":{"controllers/GroupController.html":{}}}],["post(':groupid/members/:userid/promote",{"_index":977,"title":{},"body":{"controllers/GroupController.html":{}}}],["post(':groupid/members/me",{"_index":967,"title":{},"body":{"controllers/GroupController.html":{}}}],["post(':leaderboardid",{"_index":1078,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["post('apple",{"_index":298,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('device",{"_index":284,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('facebook",{"_index":301,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('google",{"_index":295,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('me",{"_index":645,"title":{},"body":{"controllers/FriendController.html":{}}}],["post('me/block",{"_index":652,"title":{},"body":{"controllers/FriendController.html":{}}}],["post('me/unblock",{"_index":655,"title":{},"body":{"controllers/FriendController.html":{}}}],["postgres",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["postgresql://postgres:password@localhost:5432/caterva",{"_index":238,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":64,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["premium",{"_index":1283,"title":{},"body":{"injectables/WalletService.html":{}}}],["premiumcurrency",{"_index":1226,"title":{},"body":{"classes/Wallet.html":{}}}],["presence",{"_index":403,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["previously",{"_index":420,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["primarycolumn",{"_index":790,"title":{},"body":{"classes/Friendship.html":{},"classes/GroupMember.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["primarygeneratedcolumn",{"_index":57,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":48,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{}}}],["private",{"_index":198,"title":{},"body":{"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["process.env.database_url",{"_index":237,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.redis_url",{"_index":1100,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["process.env.secret",{"_index":156,"title":{},"body":{"modules/AccountModule.html":{},"injectables/JwtStrategy.html":{}}}],["profile",{"_index":1118,"title":{"classes/Profile.html":{}},"body":{"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"index.html":{}}}],["profile'})@apicreatedresponse({type",{"_index":1167,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profile.avatarurl",{"_index":1150,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profile.controller",{"_index":1200,"title":{},"body":{"modules/ProfileModule.html":{}}}],["profile.displayname",{"_index":1148,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profile.dto",{"_index":1140,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts",{"_index":540,"title":{},"body":{"classes/CreateProfileDto.html":{},"classes/UpdateProfileDto.html":{}}}],["profile.dto.ts:11",{"_index":549,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:5",{"_index":548,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:7",{"_index":545,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.dto.ts:9",{"_index":550,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["profile.language",{"_index":1152,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profile.location",{"_index":1154,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profile.service",{"_index":1179,"title":{},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profile.userid",{"_index":1147,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profile/profile.module",{"_index":559,"title":{},"body":{"modules/ExtensionsModule.html":{}}}],["profilealreadyexistserror",{"_index":1138,"title":{"classes/ProfileAlreadyExistsError.html":{}},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{}}}],["profilecontroller",{"_index":1162,"title":{"controllers/ProfileController.html":{}},"body":{"controllers/ProfileController.html":{},"modules/ProfileModule.html":{}}}],["profiledto",{"_index":1180,"title":{"classes/ProfileDto.html":{}},"body":{"controllers/ProfileController.html":{},"classes/ProfileDto.html":{}}}],["profiledto})@apibadrequestresponse()@apibearerauth()@useguards(jwtauthguard)@post",{"_index":1168,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profilemodule",{"_index":556,"title":{"modules/ProfileModule.html":{}},"body":{"modules/ExtensionsModule.html":{},"modules/ProfileModule.html":{},"modules.html":{},"overview.html":{}}}],["profilerepository",{"_index":1145,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["profiles",{"_index":1164,"title":{},"body":{"controllers/ProfileController.html":{}}}],["profileservice",{"_index":1143,"title":{"injectables/ProfileService.html":{}},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"overview.html":{}}}],["project",{"_index":1349,"title":{},"body":{"index.html":{}}}],["promise",{"_index":78,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["promise.all",{"_index":496,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseLeaderboardException.html":{}}}],["promote",{"_index":861,"title":{},"body":{"controllers/GroupController.html":{}}}],["promote(req",{"_index":907,"title":{},"body":{"controllers/GroupController.html":{}}}],["promotetoadmin",{"_index":463,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["properies",{"_index":371,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["properties",{"_index":9,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"classes/GroupDto.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"classes/ProfileDto.html":{},"classes/ReferenceFriendDto.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{}}}],["provided",{"_index":1398,"title":{},"body":{"index.html":{}}}],["providers",{"_index":132,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["put",{"_index":1178,"title":{},"body":{"controllers/ProfileController.html":{}}}],["query",{"_index":917,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["query('inviteonly",{"_index":942,"title":{},"body":{"controllers/GroupController.html":{}}}],["query('limit",{"_index":1076,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["query('name",{"_index":941,"title":{},"body":{"controllers/GroupController.html":{}}}],["query('offset",{"_index":1075,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["quick",{"_index":1341,"title":{},"body":{"index.html":{}}}],["rank",{"_index":495,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["read",{"_index":439,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{},"index.html":{}}}],["readonly",{"_index":115,"title":{},"body":{"controllers/AccountController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"controllers/WalletController.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["receivedrequest",{"_index":1326,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receivedrequests",{"_index":829,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["recommended",{"_index":1385,"title":{},"body":{"index.html":{}}}],["redis",{"_index":480,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{},"index.html":{}}}],["redis://127.0.0.1:6379/0",{"_index":1101,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["redis_url",{"_index":1358,"title":{},"body":{"index.html":{}}}],["redismodule",{"_index":1097,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["redismodule.register",{"_index":1099,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["redisservice",{"_index":478,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["reference",{"_index":626,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["referencefrienddto",{"_index":574,"title":{"classes/ReferenceFriendDto.html":{}},"body":{"controllers/FriendController.html":{},"classes/ReferenceFriendDto.html":{}}}],["referred",{"_index":688,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["reflect",{"_index":1305,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":1394,"title":{},"body":{"index.html":{}}}],["relation",{"_index":588,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"miscellaneous/enumerations.html":{}}}],["relations",{"_index":429,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["remove",{"_index":283,"title":{},"body":{"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"classes/_BaseGroupException.html":{}}}],["remove(aid",{"_index":723,"title":{},"body":{"injectables/FriendService.html":{}}}],["removefriend",{"_index":570,"title":{},"body":{"controllers/FriendController.html":{}}}],["removefriend(req",{"_index":604,"title":{},"body":{"controllers/FriendController.html":{}}}],["removefrienddto",{"_index":605,"title":{},"body":{"controllers/FriendController.html":{}}}],["removefrienddto.id",{"_index":651,"title":{},"body":{"controllers/FriendController.html":{}}}],["removemember",{"_index":460,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["removememberofgroup",{"_index":862,"title":{},"body":{"controllers/GroupController.html":{}}}],["removememberofgroup(req",{"_index":911,"title":{},"body":{"controllers/GroupController.html":{}}}],["repository",{"_index":171,"title":{},"body":{"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{}}}],["represent",{"_index":709,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["req",{"_index":83,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["req.user.sub",{"_index":650,"title":{},"body":{"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["request",{"_index":92,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{}}}],["request'})@apibearerauth()@useguards(jwtauthguard)@delete('me')@usefilters(new",{"_index":608,"title":{},"body":{"controllers/FriendController.html":{}}}],["request'})@apibearerauth()@useguards(jwtauthguard)@post('me')@usefilters(new",{"_index":579,"title":{},"body":{"controllers/FriendController.html":{}}}],["request.dto",{"_index":933,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["request.dto.ts",{"_index":308,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{}}}],["request.dto.ts:10",{"_index":315,"title":{},"body":{"classes/BadRequestDto.html":{}}}],["request.dto.ts:11",{"_index":316,"title":{},"body":{"classes/BadRequestDto.html":{}}}],["request.dto.ts:12",{"_index":314,"title":{},"body":{"classes/BadRequestDto.html":{}}}],["request.dto.ts:13",{"_index":313,"title":{},"body":{"classes/BadRequestDto.html":{}}}],["request.dto.ts:5",{"_index":553,"title":{},"body":{"classes/ErrorDto.html":{}}}],["request.dto.ts:6",{"_index":552,"title":{},"body":{"classes/ErrorDto.html":{}}}],["request.url",{"_index":1003,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["requestinguserid",{"_index":1255,"title":{},"body":{"controllers/WalletController.html":{}}}],["requirements",{"_index":1339,"title":{},"body":{"index.html":{}}}],["reset",{"_index":139,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}],["response",{"_index":992,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["response.status(status).json",{"_index":1001,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["result",{"_index":20,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":22,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["return",{"_index":119,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["returns",{"_index":77,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupExceptionFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceErrorFilter.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"miscellaneous/functions.html":{}}}],["revise",{"_index":282,"title":{},"body":{"controllers/AuthController.html":{}}}],["rimraf",{"_index":1307,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":1344,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1309,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":435,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["savedgroup",{"_index":353,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["savedinverse",{"_index":768,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["savedinverse?.status",{"_index":771,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["savednormal",{"_index":767,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["savednormal?.status",{"_index":770,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["score",{"_index":494,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/UpdateEntryDto.html":{},"classes/_BaseLeaderboardException.html":{}}}],["secret",{"_index":155,"title":{},"body":{"modules/AccountModule.html":{},"index.html":{}}}],["secretorkey",{"_index":1040,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretsecretigotasecret",{"_index":157,"title":{},"body":{"modules/AccountModule.html":{},"injectables/JwtStrategy.html":{}}}],["see",{"_index":1258,"title":{},"body":{"controllers/WalletController.html":{}}}],["select",{"_index":816,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["self",{"_index":625,"title":{},"body":{"controllers/FriendController.html":{}}}],["selfreferenceerror",{"_index":729,"title":{"classes/SelfReferenceError.html":{}},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["selfreferenceerrorfilter",{"_index":580,"title":{"classes/SelfReferenceErrorFilter.html":{}},"body":{"controllers/FriendController.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["send",{"_index":576,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["sentrequest",{"_index":1325,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["sentrequests",{"_index":830,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["server",{"_index":434,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["services",{"_index":1393,"title":{},"body":{"index.html":{}}}],["set",{"_index":685,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{},"injectables/WalletService.html":{},"index.html":{}}}],["signoptions",{"_index":158,"title":{},"body":{"modules/AccountModule.html":{}}}],["single",{"_index":877,"title":{},"body":{"controllers/GroupController.html":{}}}],["someone",{"_index":449,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"modules/AccountModule.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"modules/CoreModule.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"modules/ExtensionsModule.html":{},"controllers/FriendController.html":{},"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"modules/GroupModule.html":{},"classes/GroupsDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"classes/LeaderboardExceptionFilter.html":{},"modules/LeaderboardModule.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"modules/ProfileModule.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateAccountDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateGroupDto.html":{},"classes/UpdateProfileDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["specification",{"_index":1371,"title":{},"body":{"index.html":{}}}],["specifications",{"_index":1365,"title":{},"body":{"index.html":{}}}],["src/.../auth.controller.ts",{"_index":1333,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../friendship",{"_index":1317,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../group",{"_index":1319,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":1334,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":215,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:11",{"_index":218,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":230,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":243,"title":{},"body":{"injectables/AppService.html":{}}}],["src/app.service.ts:7",{"_index":244,"title":{},"body":{"injectables/AppService.html":{}}}],["src/common/dto/bad",{"_index":307,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{}}}],["src/common/guard/jwt",{"_index":1021,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/core/account/account.controller.ts",{"_index":63,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/core/account/account.controller.ts:37",{"_index":73,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/core/account/account.controller.ts:48",{"_index":81,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/core/account/account.controller.ts:60",{"_index":87,"title":{},"body":{"controllers/AccountController.html":{}}}],["src/core/account/account.module.ts",{"_index":141,"title":{},"body":{"modules/AccountModule.html":{}}}],["src/core/account/account.service.ts",{"_index":163,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:18",{"_index":175,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:31",{"_index":194,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:46",{"_index":179,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:54",{"_index":185,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:62",{"_index":182,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:70",{"_index":191,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:77",{"_index":188,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/account.service.ts:9",{"_index":172,"title":{},"body":{"injectables/AccountService.html":{}}}],["src/core/account/auth.controller.ts",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{}}}],["src/core/account/auth.controller.ts:107",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/account/auth.controller.ts:44",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/account/auth.controller.ts:65",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/account/auth.controller.ts:86",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/core/account/dto/access",{"_index":6,"title":{},"body":{"classes/AccessTokenDto.html":{}}}],["src/core/account/dto/auth.dto.ts",{"_index":304,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/core/account/dto/auth.dto.ts:4",{"_index":305,"title":{},"body":{"classes/AuthDto.html":{}}}],["src/core/account/dto/create",{"_index":526,"title":{},"body":{"classes/CreateAccountDto.html":{}}}],["src/core/account/dto/update",{"_index":1215,"title":{},"body":{"classes/UpdateAccountDto.html":{}}}],["src/core/account/entities/account.entity.ts",{"_index":24,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:14",{"_index":49,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:18",{"_index":45,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:22",{"_index":47,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:26",{"_index":41,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:30",{"_index":46,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:33",{"_index":52,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:36",{"_index":44,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/entities/account.entity.ts:39",{"_index":54,"title":{},"body":{"classes/Account.html":{}}}],["src/core/account/jwt.strategy.ts",{"_index":1025,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/account/jwt.strategy.ts:16",{"_index":1029,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/account/jwt.strategy.ts:6",{"_index":1027,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/core/core.module.ts",{"_index":470,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/friend/dto/friendship",{"_index":823,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["src/core/friend/dto/reference",{"_index":1209,"title":{},"body":{"classes/ReferenceFriendDto.html":{}}}],["src/core/friend/entities/friendship",{"_index":805,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["src/core/friend/entities/friendship.entity.ts",{"_index":785,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:19",{"_index":791,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:22",{"_index":793,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:29",{"_index":797,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:32",{"_index":794,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:35",{"_index":798,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:39",{"_index":789,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/entities/friendship.entity.ts:43",{"_index":792,"title":{},"body":{"classes/Friendship.html":{}}}],["src/core/friend/enums/friendship",{"_index":1320,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/friend/friend.controller.ts",{"_index":562,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:117",{"_index":581,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:138",{"_index":609,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:163",{"_index":585,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:188",{"_index":613,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:37",{"_index":597,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:55",{"_index":590,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:75",{"_index":594,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.controller.ts:95",{"_index":602,"title":{},"body":{"controllers/FriendController.html":{}}}],["src/core/friend/friend.module.ts",{"_index":661,"title":{},"body":{"modules/FriendModule.html":{}}}],["src/core/friend/friend.service.ts",{"_index":669,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["src/core/friend/friend.service.ts:13",{"_index":681,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:136",{"_index":713,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:168",{"_index":705,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:180",{"_index":708,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:197",{"_index":684,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:214",{"_index":716,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:247",{"_index":724,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:26",{"_index":692,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:277",{"_index":718,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:311",{"_index":727,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:69",{"_index":702,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:84",{"_index":720,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/friend.service.ts:96",{"_index":722,"title":{},"body":{"injectables/FriendService.html":{}}}],["src/core/friend/self",{"_index":1212,"title":{},"body":{"classes/SelfReferenceErrorFilter.html":{}}}],["src/core/group/dto/create",{"_index":534,"title":{},"body":{"classes/CreateGroupDto.html":{}}}],["src/core/group/dto/group.dto.ts",{"_index":979,"title":{},"body":{"classes/GroupDto.html":{}}}],["src/core/group/dto/group.dto.ts:4",{"_index":980,"title":{},"body":{"classes/GroupDto.html":{}}}],["src/core/group/dto/groups.dto.ts",{"_index":1018,"title":{},"body":{"classes/GroupsDto.html":{}}}],["src/core/group/dto/groups.dto.ts:4",{"_index":1019,"title":{},"body":{"classes/GroupsDto.html":{}}}],["src/core/group/dto/groups.dto.ts:5",{"_index":1020,"title":{},"body":{"classes/GroupsDto.html":{}}}],["src/core/group/dto/membership.dto.ts",{"_index":1113,"title":{},"body":{"classes/MembershipDto.html":{}}}],["src/core/group/dto/membership.dto.ts:4",{"_index":1114,"title":{},"body":{"classes/MembershipDto.html":{}}}],["src/core/group/dto/memberships.dto.ts",{"_index":1115,"title":{},"body":{"classes/MembershipsDto.html":{}}}],["src/core/group/dto/memberships.dto.ts:4",{"_index":1116,"title":{},"body":{"classes/MembershipsDto.html":{}}}],["src/core/group/dto/memberships.dto.ts:5",{"_index":1117,"title":{},"body":{"classes/MembershipsDto.html":{}}}],["src/core/group/dto/update",{"_index":1219,"title":{},"body":{"classes/UpdateGroupDto.html":{}}}],["src/core/group/entities/group",{"_index":1004,"title":{},"body":{"classes/GroupMember.html":{}}}],["src/core/group/entities/group.entity.ts",{"_index":837,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:14",{"_index":839,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:17",{"_index":844,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:20",{"_index":841,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:23",{"_index":838,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:26",{"_index":845,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/entities/group.entity.ts:29",{"_index":843,"title":{},"body":{"classes/Group.html":{}}}],["src/core/group/enums/group",{"_index":1327,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/group/filters/group",{"_index":981,"title":{},"body":{"classes/GroupExceptionFilter.html":{}}}],["src/core/group/group.controller.ts",{"_index":848,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:102",{"_index":876,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:123",{"_index":916,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:150",{"_index":873,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:165",{"_index":890,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:185",{"_index":894,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:207",{"_index":897,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:230",{"_index":885,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:252",{"_index":903,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:275",{"_index":900,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:303",{"_index":906,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:324",{"_index":913,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:345",{"_index":867,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:373",{"_index":910,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:53",{"_index":870,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.controller.ts:80",{"_index":881,"title":{},"body":{"controllers/GroupController.html":{}}}],["src/core/group/group.module.ts",{"_index":1015,"title":{},"body":{"modules/GroupModule.html":{}}}],["src/core/group/group.service.ts",{"_index":319,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["src/core/leaderboard/dto/leaderboard",{"_index":1081,"title":{},"body":{"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{}}}],["src/core/leaderboard/dto/update",{"_index":1218,"title":{},"body":{"classes/UpdateEntryDto.html":{}}}],["src/core/leaderboard/filters/leaderboard",{"_index":1091,"title":{},"body":{"classes/LeaderboardExceptionFilter.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts",{"_index":1045,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts:110",{"_index":1062,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts:45",{"_index":1058,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts:65",{"_index":1055,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.controller.ts:86",{"_index":1052,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["src/core/leaderboard/leaderboard.module.ts",{"_index":1096,"title":{},"body":{"modules/LeaderboardModule.html":{}}}],["src/core/leaderboard/leaderboard.service.ts",{"_index":476,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["src/core/leaderboard/leaderboard.service.ts:11",{"_index":1105,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/core/leaderboard/leaderboard.service.ts:19",{"_index":1110,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/core/leaderboard/leaderboard.service.ts:45",{"_index":1108,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/core/leaderboard/leaderboard.service.ts:99",{"_index":1112,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["src/extensions/extensions.module.ts",{"_index":558,"title":{},"body":{"modules/ExtensionsModule.html":{}}}],["src/extensions/profile/dto/create",{"_index":539,"title":{},"body":{"classes/CreateProfileDto.html":{}}}],["src/extensions/profile/dto/profile.dto.ts",{"_index":1194,"title":{},"body":{"classes/ProfileDto.html":{}}}],["src/extensions/profile/dto/profile.dto.ts:6",{"_index":1195,"title":{},"body":{"classes/ProfileDto.html":{}}}],["src/extensions/profile/dto/update",{"_index":1221,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["src/extensions/profile/entities/profile.entity.ts",{"_index":1119,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:18",{"_index":1136,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:22",{"_index":1126,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:26",{"_index":1122,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:30",{"_index":1129,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:33",{"_index":1130,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:36",{"_index":1127,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:41",{"_index":1134,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:45",{"_index":1124,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/entities/profile.entity.ts:49",{"_index":1132,"title":{},"body":{"classes/Profile.html":{}}}],["src/extensions/profile/profile.controller.ts",{"_index":1163,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.controller.ts:41",{"_index":1169,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.controller.ts:66",{"_index":1172,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.controller.ts:77",{"_index":1174,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.controller.ts:87",{"_index":1177,"title":{},"body":{"controllers/ProfileController.html":{}}}],["src/extensions/profile/profile.module.ts",{"_index":1199,"title":{},"body":{"modules/ProfileModule.html":{}}}],["src/extensions/profile/profile.service.ts",{"_index":1139,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["src/extensions/profile/profile.service.ts:11",{"_index":1203,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/extensions/profile/profile.service.ts:17",{"_index":1205,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/extensions/profile/profile.service.ts:35",{"_index":1206,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/extensions/profile/profile.service.ts:39",{"_index":1208,"title":{},"body":{"injectables/ProfileService.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts",{"_index":1224,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:17",{"_index":1235,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:21",{"_index":1229,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:25",{"_index":1231,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:30",{"_index":1234,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:34",{"_index":1227,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/entities/wallet.entity.ts:38",{"_index":1232,"title":{},"body":{"classes/Wallet.html":{}}}],["src/extensions/wallet/wallet.controller.ts",{"_index":1237,"title":{},"body":{"controllers/WalletController.html":{}}}],["src/extensions/wallet/wallet.controller.ts:37",{"_index":1241,"title":{},"body":{"controllers/WalletController.html":{}}}],["src/extensions/wallet/wallet.controller.ts:48",{"_index":1244,"title":{},"body":{"controllers/WalletController.html":{}}}],["src/extensions/wallet/wallet.module.ts",{"_index":1264,"title":{},"body":{"modules/WalletModule.html":{}}}],["src/extensions/wallet/wallet.service.ts",{"_index":1267,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/extensions/wallet/wallet.service.ts:12",{"_index":1275,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/extensions/wallet/wallet.service.ts:28",{"_index":1278,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/extensions/wallet/wallet.service.ts:42",{"_index":1282,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/extensions/wallet/wallet.service.ts:7",{"_index":1272,"title":{},"body":{"injectables/WalletService.html":{}}}],["src/main.ts",{"_index":1335,"title":{},"body":{"miscellaneous/functions.html":{}}}],["start",{"_index":506,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["started",{"_index":1337,"title":{"index.html":{}},"body":{"index.html":{}}}],["startopenapi",{"_index":1364,"title":{},"body":{"index.html":{}}}],["static",{"_index":671,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["status",{"_index":289,"title":{},"body":{"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/_BaseGroupException.html":{}}}],["status.dto",{"_index":622,"title":{},"body":{"controllers/FriendController.html":{}}}],["status.dto.ts",{"_index":824,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusDto.html":{}}}],["status.dto.ts:4",{"_index":825,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusDto.html":{}}}],["status.enum",{"_index":331,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"classes/_BaseGroupException.html":{}}}],["status.enum.ts",{"_index":1318,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["statusatob",{"_index":807,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["statusbtoa",{"_index":808,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["statuscode",{"_index":310,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["statuses",{"_index":697,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["statuses.dto",{"_index":620,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["statuses.dto.ts",{"_index":826,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:2",{"_index":836,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:3",{"_index":835,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:4",{"_index":834,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:5",{"_index":833,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["statuses.dto.ts:6",{"_index":832,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{}}}],["stop",{"_index":508,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["strategy",{"_index":1032,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":13,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"injectables/AccountService.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{},"miscellaneous/functions.html":{}}}],["sub",{"_index":276,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["summary",{"_index":630,"title":{},"body":{"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["super",{"_index":1036,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1401,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1402,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1311,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["switch",{"_index":753,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["synchronize",{"_index":241,"title":{},"body":{"modules/AppModule.html":{}}}],["take",{"_index":1395,"title":{},"body":{"index.html":{}}}],["target",{"_index":461,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["targetgroupmember",{"_index":411,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["targetgroupmember.membershipstatus",{"_index":457,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["targetgroupmember?.membershipstatus",{"_index":412,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["targetuserid",{"_index":406,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["text",{"_index":38,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{},"classes/Profile.html":{}}}],["this._acceptfriendrequest(aid",{"_index":781,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this._getnormalandinverse(aid",{"_index":743,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this._removerelations(aid",{"_index":784,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this._sendfriendrequest(aid",{"_index":782,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this._setrelations",{"_index":773,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.accountrepository.findone",{"_index":213,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountrepository.save(account",{"_index":207,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.accountservice.create(createaccountdto",{"_index":120,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.findone(req.user.sub",{"_index":123,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.accountservice.findonewithappleid(authdto.id",{"_index":300,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accountservice.findonewithdeviceid(authdto.id",{"_index":287,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accountservice.findonewithfacebookid(authdto.id",{"_index":303,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accountservice.findonewithgoogleid(authdto.id",{"_index":297,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accountservice.update(req.user.sub",{"_index":124,"title":{},"body":{"controllers/AccountController.html":{}}}],["this.appservice.gethello",{"_index":223,"title":{},"body":{"controllers/AppController.html":{}}}],["this.findone(id",{"_index":209,"title":{},"body":{"injectables/AccountService.html":{}}}],["this.findorcreate(userid",{"_index":1289,"title":{},"body":{"injectables/WalletService.html":{}}}],["this.friendservice.add(req.user.sub",{"_index":646,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.block",{"_index":653,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.get",{"_index":1257,"title":{},"body":{"controllers/WalletController.html":{}}}],["this.friendservice.get(aid",{"_index":644,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.get(req.user.sub",{"_index":638,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.getall(aid",{"_index":641,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.getall(req.user.sub",{"_index":632,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.remove",{"_index":649,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendservice.unblock",{"_index":656,"title":{},"body":{"controllers/FriendController.html":{}}}],["this.friendshipcompositerepository.find",{"_index":748,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.friendshiprepository.delete",{"_index":772,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.friendshiprepository.findone",{"_index":742,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.friendshiprepository.save",{"_index":769,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["this.getentry(leaderboardid",{"_index":525,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["this.groupmemberrepository.count",{"_index":400,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.find",{"_index":428,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.findone",{"_index":386,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.remove(actinggroupmember",{"_index":450,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.remove(targetgroupmember",{"_index":462,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(actinggroupmember",{"_index":436,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(groupmember",{"_index":359,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(newban",{"_index":456,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(newmember",{"_index":425,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupmemberrepository.save(targetgroupmember",{"_index":458,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.delete",{"_index":405,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.findandcount",{"_index":375,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.findone",{"_index":364,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.findone(groupid",{"_index":397,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.grouprepository.save(group",{"_index":354,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["this.groupservice.ban",{"_index":976,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.create",{"_index":938,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.delete(groupid",{"_index":955,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findmany",{"_index":945,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findmembershipsofuser(userid",{"_index":958,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.findone(groupid",{"_index":948,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getmember(groupid",{"_index":966,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.getmembers(groupid",{"_index":964,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.invite",{"_index":970,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.join(groupid",{"_index":968,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.leave(groupid",{"_index":972,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.promotetoadmin",{"_index":978,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.removemember(groupid",{"_index":974,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.groupservice.update",{"_index":951,"title":{},"body":{"controllers/GroupController.html":{}}}],["this.leaderboardservice.getentries(leaderboardid",{"_index":1077,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["this.leaderboardservice.getentry(leaderboardid",{"_index":1072,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["this.leaderboardservice.updateentry",{"_index":1079,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["this.profilerepository.findone(userid",{"_index":1146,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["this.profilerepository.save(profile",{"_index":1156,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["this.profileservice.create(userid",{"_index":1185,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.findone(userid",{"_index":1189,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.profileservice.update(userid",{"_index":1193,"title":{},"body":{"controllers/ProfileController.html":{}}}],["this.redisservice.getclient",{"_index":493,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["this.walletrepository.findone(userid",{"_index":1285,"title":{},"body":{"injectables/WalletService.html":{}}}],["this.walletrepository.save(newwallet",{"_index":1288,"title":{},"body":{"injectables/WalletService.html":{}}}],["this.walletrepository.save(wallet",{"_index":1291,"title":{},"body":{"injectables/WalletService.html":{}}}],["this.walletservice.findorcreate(userid",{"_index":1254,"title":{},"body":{"controllers/WalletController.html":{}}}],["through",{"_index":1368,"title":{},"body":{"index.html":{}}}],["throw",{"_index":288,"title":{},"body":{"controllers/AuthController.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"injectables/FriendService.html":{},"classes/GroupDoesNotExistError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["throws",{"_index":362,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["timestamp",{"_index":311,"title":{},"body":{"classes/BadRequestDto.html":{},"classes/ErrorDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["todo",{"_index":281,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto",{"_index":272,"title":{},"body":{"controllers/AuthController.html":{}}}],["token.dto.ts",{"_index":7,"title":{},"body":{"classes/AccessTokenDto.html":{}}}],["token.dto.ts:4",{"_index":15,"title":{},"body":{"classes/AccessTokenDto.html":{}}}],["true",{"_index":40,"title":{},"body":{"classes/Account.html":{},"modules/AppModule.html":{},"classes/Group.html":{},"classes/Profile.html":{}}}],["true})@column({type",{"_index":37,"title":{},"body":{"classes/Account.html":{}}}],["try",{"_index":1184,"title":{},"body":{"controllers/ProfileController.html":{}}}],["trying",{"_index":433,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["two",{"_index":600,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["type",{"_index":11,"title":{},"body":{"classes/AccessTokenDto.html":{},"classes/Account.html":{},"controllers/AccountController.html":{},"injectables/AccountService.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthDto.html":{},"classes/BadRequestDto.html":{},"classes/CreateAccountDto.html":{},"classes/CreateGroupDto.html":{},"classes/CreateProfileDto.html":{},"classes/ErrorDto.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupDto.html":{},"classes/GroupExceptionFilter.html":{},"classes/GroupMember.html":{},"classes/GroupsDto.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntriesDto.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardExceptionFilter.html":{},"injectables/LeaderboardService.html":{},"classes/MembershipDto.html":{},"classes/MembershipsDto.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/ProfileDto.html":{},"injectables/ProfileService.html":{},"classes/ReferenceFriendDto.html":{},"classes/SelfReferenceErrorFilter.html":{},"classes/UpdateEntryDto.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{}}}],["typeorm",{"_index":58,"title":{},"body":{"classes/Account.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/Group.html":{},"classes/GroupDoesNotExistError.html":{},"classes/GroupMember.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":144,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{}}}],["typeormmodule.forfeature([account",{"_index":153,"title":{},"body":{"modules/AccountModule.html":{}}}],["typeormmodule.forfeature([friendship",{"_index":668,"title":{},"body":{"modules/FriendModule.html":{}}}],["typeormmodule.forfeature([group",{"_index":1017,"title":{},"body":{"modules/GroupModule.html":{}}}],["typeormmodule.forfeature([profile",{"_index":1201,"title":{},"body":{"modules/ProfileModule.html":{}}}],["typeormmodule.forfeature([wallet",{"_index":1266,"title":{},"body":{"modules/WalletModule.html":{}}}],["typeormmodule.forroot",{"_index":234,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":1312,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["unban",{"_index":415,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["unblock",{"_index":571,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["unblock(aid",{"_index":726,"title":{},"body":{"injectables/FriendService.html":{}}}],["unblock(req",{"_index":610,"title":{},"body":{"controllers/FriendController.html":{}}}],["unblockfrienddto",{"_index":611,"title":{},"body":{"controllers/FriendController.html":{}}}],["unblockfrienddto.id",{"_index":657,"title":{},"body":{"controllers/FriendController.html":{}}}],["undefined",{"_index":796,"title":{},"body":{"classes/Friendship.html":{},"classes/Group.html":{},"controllers/GroupController.html":{},"classes/GroupMember.html":{},"controllers/LeaderboardController.html":{}}}],["under",{"_index":1390,"title":{},"body":{"index.html":{}}}],["unique",{"_index":59,"title":{},"body":{"classes/Account.html":{},"classes/Group.html":{}}}],["up",{"_index":1347,"title":{},"body":{"index.html":{}}}],["update",{"_index":88,"title":{},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/_BaseGroupException.html":{}}}],["update(id",{"_index":193,"title":{},"body":{"injectables/AccountService.html":{}}}],["update(req",{"_index":1175,"title":{},"body":{"controllers/ProfileController.html":{}}}],["update(userid",{"_index":1207,"title":{},"body":{"injectables/ProfileService.html":{}}}],["updateaccountdto",{"_index":85,"title":{"classes/UpdateAccountDto.html":{}},"body":{"controllers/AccountController.html":{},"injectables/AccountService.html":{},"classes/UpdateAccountDto.html":{}}}],["updateaccountdto.appleid",{"_index":211,"title":{},"body":{"injectables/AccountService.html":{}}}],["updateaccountdto.deviceid",{"_index":210,"title":{},"body":{"injectables/AccountService.html":{}}}],["updateaccountdto.googleid",{"_index":212,"title":{},"body":{"injectables/AccountService.html":{}}}],["updatecurrentaccount",{"_index":69,"title":{},"body":{"controllers/AccountController.html":{}}}],["updatecurrentaccount(req",{"_index":84,"title":{},"body":{"controllers/AccountController.html":{}}}],["updated",{"_index":524,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["updatedat",{"_index":33,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["updatedatecolumn",{"_index":53,"title":{},"body":{"classes/Account.html":{},"classes/Friendship.html":{},"classes/Group.html":{},"classes/Profile.html":{},"classes/Wallet.html":{}}}],["updatedentrycount",{"_index":521,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["updateentry",{"_index":1048,"title":{},"body":{"controllers/LeaderboardController.html":{},"injectables/LeaderboardService.html":{}}}],["updateentry(leaderboardid",{"_index":1111,"title":{},"body":{"injectables/LeaderboardService.html":{}}}],["updateentry(req",{"_index":1059,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["updateentrydto",{"_index":1060,"title":{"classes/UpdateEntryDto.html":{}},"body":{"controllers/LeaderboardController.html":{},"classes/UpdateEntryDto.html":{}}}],["updateentrydto.score",{"_index":1080,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["updategroup",{"_index":863,"title":{},"body":{"controllers/GroupController.html":{}}}],["updategroup(req",{"_index":914,"title":{},"body":{"controllers/GroupController.html":{}}}],["updategroupdto",{"_index":332,"title":{"classes/UpdateGroupDto.html":{}},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/UpdateGroupDto.html":{},"classes/_BaseGroupException.html":{}}}],["updategroupdto.inviteonly",{"_index":394,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["updategroupdto.name",{"_index":393,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["updatenormalcurrency",{"_index":1269,"title":{},"body":{"injectables/WalletService.html":{}}}],["updatenormalcurrency(userid",{"_index":1276,"title":{},"body":{"injectables/WalletService.html":{}}}],["updatepremiumcurrency",{"_index":1270,"title":{},"body":{"injectables/WalletService.html":{}}}],["updatepremiumcurrency(userid",{"_index":1281,"title":{},"body":{"injectables/WalletService.html":{}}}],["updateprofiledto",{"_index":1141,"title":{"classes/UpdateProfileDto.html":{}},"body":{"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/UpdateProfileDto.html":{}}}],["updateprofiledto?.avatarurl",{"_index":1159,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["updateprofiledto?.displayname",{"_index":1158,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["updateprofiledto?.language",{"_index":1160,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["updateprofiledto?.location",{"_index":1161,"title":{},"body":{"classes/ProfileAlreadyExistsError.html":{},"injectables/ProfileService.html":{}}}],["url",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"modules/LeaderboardModule.html":{}}}],["used",{"_index":1374,"title":{},"body":{"index.html":{}}}],["usefilters",{"_index":614,"title":{},"body":{"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["usefilters(groupexceptionfilter",{"_index":936,"title":{},"body":{"controllers/GroupController.html":{}}}],["usefilters(leaderboardexceptionfilter",{"_index":1070,"title":{},"body":{"controllers/LeaderboardController.html":{}}}],["usefilters(new",{"_index":634,"title":{},"body":{"controllers/FriendController.html":{}}}],["useguards",{"_index":91,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["useguards(jwtauthguard",{"_index":121,"title":{},"body":{"controllers/AccountController.html":{},"controllers/FriendController.html":{},"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{},"controllers/ProfileController.html":{},"controllers/WalletController.html":{}}}],["user",{"_index":389,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/FriendController.html":{},"injectables/FriendService.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"injectables/JwtStrategy.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"controllers/ProfileController.html":{},"classes/SelfReferenceError.html":{},"classes/Wallet.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["user'})@apibadrequestresponse({type",{"_index":892,"title":{},"body":{"controllers/GroupController.html":{},"controllers/LeaderboardController.html":{}}}],["user'})@apibearerauth()@useguards(jwtauthguard)@get(':aid",{"_index":593,"title":{},"body":{"controllers/FriendController.html":{}}}],["user'})@apibearerauth()@useguards(jwtauthguard)@get(':userid",{"_index":1173,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user'})@apibearerauth()@useguards(jwtauthguard)@get('me",{"_index":596,"title":{},"body":{"controllers/FriendController.html":{}}}],["user'})@apibearerauth()@useguards(jwtauthguard)@get('me/:otherid')@usefilters(new",{"_index":589,"title":{},"body":{"controllers/FriendController.html":{}}}],["user'})@apibearerauth()@useguards(jwtauthguard)@post('me/block')@httpcode(httpstatus.ok)@usefilters(new",{"_index":584,"title":{},"body":{"controllers/FriendController.html":{}}}],["user'})@apibearerauth()@useguards(jwtauthguard)@post('me/unblock')@httpcode(httpstatus.ok)@usefilters(new",{"_index":612,"title":{},"body":{"controllers/FriendController.html":{}}}],["user'})@useguards(jwtauthguard)@apibearerauth()@get('me",{"_index":1171,"title":{},"body":{"controllers/ProfileController.html":{}}}],["user'})@useguards(jwtauthguard)@apibearerauth()@patch('me",{"_index":1176,"title":{},"body":{"controllers/ProfileController.html":{}}}],["userid",{"_index":426,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/CouldNotUpdateLeaderboardEntryError.html":{},"controllers/GroupController.html":{},"classes/GroupDoesNotExistError.html":{},"controllers/LeaderboardController.html":{},"classes/LeaderboardEntryDto.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/Profile.html":{},"classes/ProfileAlreadyExistsError.html":{},"controllers/ProfileController.html":{},"injectables/ProfileService.html":{},"classes/Wallet.html":{},"controllers/WalletController.html":{},"injectables/WalletService.html":{},"classes/_BaseGroupException.html":{},"classes/_BaseLeaderboardException.html":{}}}],["users",{"_index":603,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"injectables/LeaderboardService.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{}}}],["users'})@apibearerauth()@useguards(jwtauthguard)@get(':aid/:bid')@usefilters(new",{"_index":601,"title":{},"body":{"controllers/FriendController.html":{}}}],["uuid",{"_index":687,"title":{},"body":{"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["valid",{"_index":1041,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate",{"_index":1026,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":1028,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["value",{"_index":831,"title":{},"body":{"classes/FriendshipTwoWayRelationStatusesDto.html":{},"controllers/LeaderboardController.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":381,"title":{},"body":{"classes/BannedFromGroupError.html":{},"classes/CannotBanError.html":{},"classes/CannotDeleteGroupError.html":{},"classes/CannotKickError.html":{},"classes/CannotLeaveGroupError.html":{},"classes/GroupDoesNotExistError.html":{},"classes/NotGroupAdminError.html":{},"classes/NotGroupMemberError.html":{},"classes/NotInvitedToGroupError.html":{},"classes/_BaseGroupException.html":{}}}],["variables",{"_index":1352,"title":{},"body":{"index.html":{}}}],["view.entity",{"_index":666,"title":{},"body":{"modules/FriendModule.html":{},"injectables/FriendService.html":{},"classes/SelfReferenceError.html":{}}}],["view.entity.ts",{"_index":806,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["view.entity.ts:17",{"_index":810,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["view.entity.ts:20",{"_index":811,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["view.entity.ts:23",{"_index":812,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["view.entity.ts:26",{"_index":813,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["viewcolumn",{"_index":809,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["viewed",{"_index":1382,"title":{},"body":{"index.html":{}}}],["viewentity",{"_index":814,"title":{},"body":{"classes/FriendshipComposite.html":{}}}],["void",{"_index":991,"title":{},"body":{"classes/GroupExceptionFilter.html":{},"classes/LeaderboardExceptionFilter.html":{},"classes/SelfReferenceErrorFilter.html":{}}}],["wallet",{"_index":1223,"title":{"classes/Wallet.html":{}},"body":{"classes/Wallet.html":{},"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"index.html":{}}}],["wallet.controller",{"_index":1265,"title":{},"body":{"modules/WalletModule.html":{}}}],["wallet.normalcurrency",{"_index":1290,"title":{},"body":{"injectables/WalletService.html":{}}}],["wallet.premiumcurrency",{"_index":1292,"title":{},"body":{"injectables/WalletService.html":{}}}],["wallet.service",{"_index":1247,"title":{},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{}}}],["wallet/wallet.module",{"_index":560,"title":{},"body":{"modules/ExtensionsModule.html":{}}}],["walletcontroller",{"_index":1236,"title":{"controllers/WalletController.html":{}},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{}}}],["walletmodule",{"_index":557,"title":{"modules/WalletModule.html":{}},"body":{"modules/ExtensionsModule.html":{},"modules/WalletModule.html":{},"modules.html":{},"overview.html":{}}}],["walletrepository",{"_index":1273,"title":{},"body":{"injectables/WalletService.html":{}}}],["wallets",{"_index":1238,"title":{},"body":{"controllers/WalletController.html":{}}}],["walletservice",{"_index":1246,"title":{"injectables/WalletService.html":{}},"body":{"controllers/WalletController.html":{},"modules/WalletModule.html":{},"injectables/WalletService.html":{},"overview.html":{}}}],["wallet})@apibearerauth()@useguards(jwtauthguard)@get('me",{"_index":1240,"title":{},"body":{"controllers/WalletController.html":{}}}],["wallet})@apiforbiddenresponse()@apibearerauth()@useguards(jwtauthguard)@get(':userid",{"_index":1243,"title":{},"body":{"controllers/WalletController.html":{}}}],["way",{"_index":619,"title":{},"body":{"controllers/FriendController.html":{},"injectables/FriendService.html":{},"classes/Friendship.html":{},"classes/FriendshipComposite.html":{},"classes/FriendshipTwoWayRelationStatusDto.html":{},"classes/FriendshipTwoWayRelationStatusesDto.html":{},"classes/SelfReferenceError.html":{},"controllers/WalletController.html":{},"miscellaneous/enumerations.html":{}}}],["withscores",{"_index":518,"title":{},"body":{"classes/CouldNotUpdateLeaderboardEntryError.html":{},"classes/LeaderboardEntryNotFoundError.html":{},"injectables/LeaderboardService.html":{},"classes/_BaseLeaderboardException.html":{}}}],["world",{"_index":246,"title":{},"body":{"injectables/AppService.html":{}}}],["yes",{"_index":882,"title":{},"body":{"controllers/GroupController.html":{},"injectables/LeaderboardService.html":{}}}],["zoom",{"_index":138,"title":{},"body":{"modules/AccountModule.html":{},"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules/ExtensionsModule.html":{},"modules/FriendModule.html":{},"modules/GroupModule.html":{},"modules/LeaderboardModule.html":{},"modules/ProfileModule.html":{},"modules/WalletModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AccessTokenDto.html":{"url":"classes/AccessTokenDto.html","title":"class - AccessTokenDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccessTokenDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/dto/access-token.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accessToken\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/access-token.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AccessTokenDto {\n  accessToken: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Account.html":{"url":"classes/Account.html","title":"class - Account","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/entities/account.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                appleId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                    Optional\n                                deviceId\n                            \n                            \n                                    Optional\n                                facebookId\n                            \n                            \n                                    Optional\n                                googleId\n                            \n                            \n                                id\n                            \n                            \n                                    Optional\n                                metadata\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            appleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index({unique: true})@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            deviceId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index({unique: true})@Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            facebookId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index({unique: true})@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            googleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Index({unique: true})@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            metadata\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     any | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'jsonb', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/entities/account.entity.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  Index,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class Account {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Index({ unique: true })\n  @Column({ type: 'text' })\n  deviceId?: string;\n\n  @Index({ unique: true })\n  @Column({ type: 'text', nullable: true })\n  googleId?: string | null;\n\n  @Index({ unique: true })\n  @Column({ type: 'text', nullable: true })\n  appleId?: string | null;\n\n  @Index({ unique: true })\n  @Column({ type: 'text', nullable: true })\n  facebookId?: string | null;\n\n  @Column({ type: 'jsonb', nullable: true })\n  metadata?: any | null;\n\n  @CreateDateColumn()\n  createdAt?: Date;\n\n  @UpdateDateColumn()\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AccountController.html":{"url":"controllers/AccountController.html","title":"controller - AccountController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createAccount\n                            \n                            \n                                    Async\n                                getCurrentAccount\n                            \n                            \n                                    Async\n                                updateCurrentAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createAccount\n                        \n                        \n                    \n                \n            \n            \n                \ncreateAccount(createAccountDto: CreateAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.CREATED)@Post()\n                \n            \n\n            \n                \n                    Defined in src/core/account/account.controller.ts:37\n                \n            \n\n\n            \n                \n                    Create account\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCurrentAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCurrentAccount(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/core/account/account.controller.ts:48\n                \n            \n\n\n            \n                \n                    Get current account\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateCurrentAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCurrentAccount(req, updateAccountDto: UpdateAccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth()@UseGuards(JwtAuthGuard)@Patch()\n                \n            \n\n            \n                \n                    Defined in src/core/account/account.controller.ts:60\n                \n            \n\n\n            \n                \n                    Update current account\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  UseGuards,\n  Request,\n  Patch,\n  HttpCode,\n  HttpStatus,\n} from '@nestjs/common';\nimport { AccountService } from './account.service';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Account } from './entities/account.entity';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\n\n@ApiTags('account')\n@Controller('account')\nexport class AccountController {\n  constructor(private readonly accountService: AccountService) {}\n\n  /**\n   * Create account\n   * @param createAccountDto\n   */\n  @HttpCode(HttpStatus.CREATED)\n  @Post()\n  createAccount(@Body() createAccountDto: CreateAccountDto): Promise {\n    return this.accountService.create(createAccountDto);\n  }\n\n  /**\n   * Get current account\n   * @param req\n   */\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async getCurrentAccount(@Request() req): Promise {\n    return this.accountService.findOne(req.user.sub);\n  }\n\n  /**\n   * Update current account\n   * @param req\n   * @param updateAccountDto\n   */\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch()\n  async updateCurrentAccount(\n    @Request() req,\n    @Body() updateAccountDto: UpdateAccountDto,\n  ): Promise {\n    return this.accountService.update(req.user.sub, updateAccountDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AccountModule.html":{"url":"modules/AccountModule.html","title":"module - AccountModule","body":"\n                   \n\n\n\n\n    Modules\n    AccountModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_exports\n\n\n\ncluster_AccountModule_providers\n\n\n\n\nAccountService \n\nAccountService \n\n\n\nAccountModule\n\nAccountModule\n\nAccountService  -->\n\nAccountModule->AccountService \n\n\n\n\n\nAccountService\n\nAccountService\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAccountModule -->\n\nJwtStrategy->AccountModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/account/account.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountController\n                        \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountService } from './account.service';\nimport { AccountController } from './account.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Account } from './entities/account.entity';\nimport { AuthController } from './auth.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([Account]),\n    PassportModule,\n    JwtModule.register({\n      secret: process.env.SECRET ?? 'secretsecretigotasecret',\n      signOptions: { expiresIn: '2h' },\n    }),\n  ],\n  controllers: [AccountController, AuthController],\n  providers: [AccountService, JwtStrategy],\n  exports: [AccountService],\n})\nexport class AccountModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccountService.html":{"url":"injectables/AccountService.html","title":"injectable - AccountService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/account.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneWithAppleId\n                            \n                            \n                                    Async\n                                findOneWithDeviceId\n                            \n                            \n                                    Async\n                                findOneWithFacebookId\n                            \n                            \n                                    Async\n                                findOneWithGoogleId\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/account/account.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createAccountDto: CreateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:18\n                \n            \n\n\n            \n                \n                    Create an account object with given createAccountDto\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createAccountDto\n                                    \n                                                CreateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:46\n                \n            \n\n\n            \n                \n                    Find account by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneWithAppleId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithAppleId(appleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:62\n                \n            \n\n\n            \n                \n                    Find account by apple id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    appleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneWithDeviceId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithDeviceId(deviceId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:54\n                \n            \n\n\n            \n                \n                    Find account by device id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    deviceId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneWithFacebookId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithFacebookId(facebookId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:77\n                \n            \n\n\n            \n                \n                    Find account by facebook id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    facebookId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneWithGoogleId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneWithGoogleId(googleId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:70\n                \n            \n\n\n            \n                \n                    Find account by google id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    googleId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id: string, updateAccountDto: UpdateAccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/account.service.ts:31\n                \n            \n\n\n            \n                \n                    Update existing account\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateAccountDto\n                                    \n                                                UpdateAccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateAccountDto } from './dto/create-account.dto';\nimport { UpdateAccountDto } from './dto/update-account.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Account } from './entities/account.entity';\n\n@Injectable()\nexport class AccountService {\n  constructor(\n    @InjectRepository(Account) private accountRepository: Repository,\n  ) {}\n\n  /**\n   * Create an account object with given createAccountDto\n   * @param createAccountDto\n   */\n  async create(createAccountDto: CreateAccountDto): Promise {\n    const account = new Account();\n    account.deviceId = createAccountDto.deviceId;\n    account.appleId = createAccountDto.appleId;\n    account.googleId = createAccountDto.googleId;\n    return this.accountRepository.save(account);\n  }\n\n  /**\n   * Update existing account\n   * @param id\n   * @param updateAccountDto\n   */\n  async update(\n    id: string,\n    updateAccountDto: UpdateAccountDto,\n  ): Promise {\n    const account = await this.findOne(id);\n    account.deviceId = updateAccountDto.deviceId ?? account.deviceId;\n    account.appleId = updateAccountDto.appleId ?? account.appleId;\n    account.googleId = updateAccountDto.googleId ?? account.googleId;\n    return this.accountRepository.save(account);\n  }\n\n  /**\n   * Find account by id\n   * @param id\n   */\n  async findOne(id: string): Promise {\n    return this.accountRepository.findOne({ id: id });\n  }\n\n  /**\n   * Find account by device id\n   * @param deviceId\n   */\n  async findOneWithDeviceId(deviceId: string): Promise {\n    return this.accountRepository.findOne({ deviceId: deviceId });\n  }\n\n  /**\n   * Find account by apple id\n   * @param appleId\n   */\n  async findOneWithAppleId(appleId: string): Promise {\n    return this.accountRepository.findOne({ appleId: appleId });\n  }\n\n  /**\n   * Find account by google id\n   * @param googleId\n   */\n  async findOneWithGoogleId(googleId: string): Promise {\n    return this.accountRepository.findOne({ googleId: googleId });\n  }\n  /**\n   * Find account by facebook id\n   * @param facebookId\n   */\n  async findOneWithFacebookId(facebookId: string): Promise {\n    return this.accountRepository.findOne({ facebookId: facebookId });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiProduces('text/plain')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { ApiProduces } from '@nestjs/swagger';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  @ApiProduces('text/plain')\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nExtensionsModule\n\nExtensionsModule\n\nAppModule -->\n\nExtensionsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CoreModule\n                        \n                        \n                            ExtensionsModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CoreModule } from './core/core.module';\nimport { ExtensionsModule } from './extensions/extensions.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      type: 'postgres',\n      url:\n        process.env.DATABASE_URL ||\n        'postgresql://postgres:password@localhost:5432/caterva',\n      entities: ['dist/**/*.entity{.ts,.js}'],\n      synchronize: true,\n      logging: true,\n    }),\n    CoreModule,\n    ExtensionsModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiProduces('text/plain')\n                \n            \n\n            \n                \n                    Defined in src/app.service.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ApiProduces } from '@nestjs/swagger';\n\n@Injectable()\nexport class AppService {\n  @ApiProduces('text/plain')\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authWithAppleId\n                            \n                            \n                                    Async\n                                authWithDeviceId\n                            \n                            \n                                    Async\n                                authWithFacebookId\n                            \n                            \n                                    Async\n                                authWithGoogleId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authWithAppleId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authWithAppleId(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post('apple')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/core/account/auth.controller.ts:86\n                \n            \n\n\n            \n                \n                    Authenticate with Apple ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authWithDeviceId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authWithDeviceId(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post('device')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/core/account/auth.controller.ts:44\n                \n            \n\n\n            \n                \n                    Authenticate with DeviceID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authWithFacebookId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authWithFacebookId(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post('facebook')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/core/account/auth.controller.ts:107\n                \n            \n\n\n            \n                \n                    Authenticate with Facebook ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            authWithGoogleId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    authWithGoogleId(authDto: AuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBadRequestResponse()@Post('google')@HttpCode(HttpStatus.OK)\n                \n            \n\n            \n                \n                    Defined in src/core/account/auth.controller.ts:65\n                \n            \n\n\n            \n                \n                    Authenticate with Google ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                                AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  HttpException,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { AccountService } from './account.service';\nimport { AuthDto } from './dto/auth.dto';\nimport { JwtService } from '@nestjs/jwt';\nimport { Account } from './entities/account.entity';\nimport {\n  ApiBadRequestResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AccessTokenDto } from './dto/access-token.dto';\n\nfunction _generateJwt(jwtService: JwtService, account: Account): string {\n  const payload = {\n    sub: account.id,\n  };\n  return jwtService.sign(payload);\n}\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  /**\n   * Authenticate with DeviceID\n   * @param authDto\n   */\n  // todo: revise, should i remove these\n  @ApiBadRequestResponse()\n  @Post('device')\n  @HttpCode(HttpStatus.OK)\n  async authWithDeviceId(@Body() authDto: AuthDto): Promise {\n    const account = await this.accountService.findOneWithDeviceId(authDto.id);\n    if (account == null) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Authentication failed',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return { accessToken: _generateJwt(this.jwtService, account) };\n  }\n\n  /**\n   * Authenticate with Google ID\n   * @param authDto\n   */\n  @ApiBadRequestResponse()\n  @Post('google')\n  @HttpCode(HttpStatus.OK)\n  async authWithGoogleId(@Body() authDto: AuthDto): Promise {\n    const account = await this.accountService.findOneWithGoogleId(authDto.id);\n    if (account == null) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Authentication failed',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return { accessToken: _generateJwt(this.jwtService, account) };\n  }\n\n  /**\n   * Authenticate with Apple ID\n   * @param authDto\n   */\n  @ApiBadRequestResponse()\n  @Post('apple')\n  @HttpCode(HttpStatus.OK)\n  async authWithAppleId(@Body() authDto: AuthDto): Promise {\n    const account = await this.accountService.findOneWithAppleId(authDto.id);\n    if (account == null) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Authentication failed',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return { accessToken: _generateJwt(this.jwtService, account) };\n  }\n\n  /**\n   * Authenticate with Facebook ID\n   * @param authDto\n   */\n  @ApiBadRequestResponse()\n  @Post('facebook')\n  @HttpCode(HttpStatus.OK)\n  async authWithFacebookId(@Body() authDto: AuthDto): Promise {\n    const account = await this.accountService.findOneWithFacebookId(authDto.id);\n    if (account == null) {\n      throw new HttpException(\n        {\n          status: HttpStatus.BAD_REQUEST,\n          error: 'Authentication failed',\n        },\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return { accessToken: _generateJwt(this.jwtService, account) };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthDto.html":{"url":"classes/AuthDto.html","title":"class - AuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/dto/auth.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/auth.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthDto {\n  id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BadRequestDto.html":{"url":"classes/BadRequestDto.html","title":"class - BadRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BadRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/bad-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                path\n                            \n                            \n                                statusCode\n                            \n                            \n                                timestamp\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ErrorDto\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            path\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusCode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     HttpStatus\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            timestamp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ErrorDto {\n  name: string;\n  message: string;\n}\n\nexport class BadRequestDto {\n  statusCode: HttpStatus;\n  timestamp: Date;\n  path: string;\n  error: ErrorDto;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BannedFromGroupError.html":{"url":"classes/BannedFromGroupError.html","title":"class - BannedFromGroupError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BannedFromGroupError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotBanError.html":{"url":"classes/CannotBanError.html","title":"class - CannotBanError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotBanError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotDeleteGroupError.html":{"url":"classes/CannotDeleteGroupError.html","title":"class - CannotDeleteGroupError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotDeleteGroupError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotKickError.html":{"url":"classes/CannotKickError.html","title":"class - CannotKickError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotKickError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CannotLeaveGroupError.html":{"url":"classes/CannotLeaveGroupError.html","title":"class - CannotLeaveGroupError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CannotLeaveGroupError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_CoreModule_exports\n\n\n\n\nAccountModule\n\nAccountModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nAccountModule->CoreModule\n\n\n\n\n\nFriendModule\n\nFriendModule\n\nCoreModule -->\n\nFriendModule->CoreModule\n\n\n\n\n\nGroupModule\n\nGroupModule\n\nCoreModule -->\n\nGroupModule->CoreModule\n\n\n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nCoreModule -->\n\nLeaderboardModule->CoreModule\n\n\n\n\n\nAccountModule \n\nAccountModule \n\nAccountModule  -->\n\nCoreModule->AccountModule \n\n\n\n\n\nFriendModule \n\nFriendModule \n\nFriendModule  -->\n\nCoreModule->FriendModule \n\n\n\n\n\nGroupModule \n\nGroupModule \n\nGroupModule  -->\n\nCoreModule->GroupModule \n\n\n\n\n\nLeaderboardModule \n\nLeaderboardModule \n\nLeaderboardModule  -->\n\nCoreModule->LeaderboardModule \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AccountModule\n                        \n                        \n                            FriendModule\n                        \n                        \n                            GroupModule\n                        \n                        \n                            LeaderboardModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AccountModule\n                        \n                        \n                            FriendModule\n                        \n                        \n                            GroupModule\n                        \n                        \n                            LeaderboardModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AccountModule } from './account/account.module';\nimport { FriendModule } from './friend/friend.module';\nimport { GroupModule } from './group/group.module';\nimport { LeaderboardModule } from './leaderboard/leaderboard.module';\n\n@Module({\n  imports: [AccountModule, FriendModule, GroupModule, LeaderboardModule],\n  exports: [AccountModule, FriendModule, GroupModule, LeaderboardModule],\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CouldNotUpdateLeaderboardEntryError.html":{"url":"classes/CouldNotUpdateLeaderboardEntryError.html","title":"class - CouldNotUpdateLeaderboardEntryError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CouldNotUpdateLeaderboardEntryError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseLeaderboardException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\n\nexport class _BaseLeaderboardException extends Error {}\nexport class LeaderboardEntryNotFoundError extends _BaseLeaderboardException {}\nexport class CouldNotUpdateLeaderboardEntryError extends _BaseLeaderboardException {}\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(private readonly redisService: RedisService) {}\n\n  /**\n   * Get entry of user in a leaderboard\n   * @param leaderboardId\n   * @param userId\n   */\n  async getEntry(\n    leaderboardId: string,\n    userId: string,\n  ): Promise {\n    const client = this.redisService.getClient();\n    const [score, rank] = await Promise.all([\n      client.zscore(leaderboardId, userId),\n      client.zrevrank(leaderboardId, userId),\n    ]);\n    if (score == null || rank == null) {\n      throw new LeaderboardEntryNotFoundError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" was not found`,\n      );\n    }\n    return {\n      userId: userId,\n      score: Number(score),\n      rank: Number(rank),\n    };\n  }\n\n  /**\n   * Get entries in leaderboard\n   * @param leaderboardId\n   * @param options\n   */\n  async getEntries(\n    leaderboardId: string,\n    options?: {\n      offset: string;\n      limit: string;\n    },\n  ): Promise {\n    const client = this.redisService.getClient();\n\n    let start = 0;\n    let stop = -1;\n\n    let normalizedOffset = null;\n    let normalizedLimit = null;\n\n    if (options.offset && isFinite(Number(options.offset))) {\n      normalizedOffset = Number(options.offset);\n      start = normalizedOffset;\n    }\n    if (options.limit && isFinite(Number(options.limit))) {\n      normalizedLimit = Number(options.limit);\n      stop = start + Number(options.limit) - 1;\n    }\n\n    const result = await client.zrevrange(\n      leaderboardId,\n      start,\n      stop,\n      'WITHSCORES',\n    );\n\n    // construct entries array\n    const entries: LeaderboardEntryDto[] = [];\n    for (let i = 0; i  {\n    const client = this.redisService.getClient();\n\n    const updatedEntryCount = await client.zadd(\n      leaderboardId,\n      'GT',\n      score,\n      userId,\n    );\n    if (updatedEntryCount !== 1) {\n      throw new CouldNotUpdateLeaderboardEntryError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" could not be updated with score \"${score}\"`,\n      );\n    }\n\n    return this.getEntry(leaderboardId, userId);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAccountDto.html":{"url":"classes/CreateAccountDto.html","title":"class - CreateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/dto/create-account.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                appleId\n                            \n                            \n                                deviceId\n                            \n                            \n                                    Optional\n                                facebookId\n                            \n                            \n                                    Optional\n                                googleId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            appleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            deviceId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            facebookId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            googleId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/account/dto/create-account.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateAccountDto {\n  deviceId: string;\n  appleId?: string;\n  googleId?: string;\n  facebookId?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateGroupDto.html":{"url":"classes/CreateGroupDto.html","title":"class - CreateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/create-group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                inviteOnly\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            inviteOnly\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/create-group.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/create-group.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateGroupDto {\n  name: string;\n  inviteOnly?: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateProfileDto.html":{"url":"classes/CreateProfileDto.html","title":"class - CreateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/dto/create-profile.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                displayName\n                            \n                            \n                                    Optional\n                                language\n                            \n                            \n                                    Optional\n                                location\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            avatarUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/dto/create-profile.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({minLength: 3})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/dto/create-profile.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            language\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/dto/create-profile.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/dto/create-profile.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreateProfileDto {\n  @ApiProperty({ minLength: 3 })\n  displayName: string;\n\n  avatarUrl?: string | null;\n\n  location?: string | null;\n\n  language?: string | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorDto.html":{"url":"classes/ErrorDto.html","title":"class - ErrorDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/bad-request.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            message\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/common/dto/bad-request.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { HttpStatus } from '@nestjs/common';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class ErrorDto {\n  name: string;\n  message: string;\n}\n\nexport class BadRequestDto {\n  statusCode: HttpStatus;\n  timestamp: Date;\n  path: string;\n  error: ErrorDto;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ExtensionsModule.html":{"url":"modules/ExtensionsModule.html","title":"module - ExtensionsModule","body":"\n                   \n\n\n\n\n    Modules\n    ExtensionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ExtensionsModule\n\n\n\ncluster_ExtensionsModule_imports\n\n\n\n\nProfileModule\n\nProfileModule\n\n\n\nExtensionsModule\n\nExtensionsModule\n\nExtensionsModule -->\n\nProfileModule->ExtensionsModule\n\n\n\n\n\nWalletModule\n\nWalletModule\n\nExtensionsModule -->\n\nWalletModule->ExtensionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/extensions/extensions.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ProfileModule\n                        \n                        \n                            WalletModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileModule } from './profile/profile.module';\nimport { WalletModule } from './wallet/wallet.module';\n\n@Module({\n  imports: [ProfileModule, WalletModule],\n})\nexport class ExtensionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FriendController.html":{"url":"controllers/FriendController.html","title":"controller - FriendController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FriendController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/friend.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                friends\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addFriend\n                            \n                            \n                                    Async\n                                block\n                            \n                            \n                                    Async\n                                findRelationOfMeAndOther\n                            \n                            \n                                    Async\n                                findRelations\n                            \n                            \n                                    Async\n                                findRelationsOfMe\n                            \n                            \n                                    Async\n                                findRelationWithOther\n                            \n                            \n                                    Async\n                                removeFriend\n                            \n                            \n                                    Async\n                                unblock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addFriend\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addFriend(req, addFriendDto: ReferenceFriendDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Send or accept friend request'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('me')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:117\n                \n            \n\n\n            \n                \n                    Send or accept friend request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addFriendDto\n                                    \n                                                ReferenceFriendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            block\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    block(req, blockFriendDto: ReferenceFriendDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Block user'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('me/block')@HttpCode(HttpStatus.OK)@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:163\n                \n            \n\n\n            \n                \n                    Block user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    blockFriendDto\n                                    \n                                                ReferenceFriendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRelationOfMeAndOther\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRelationOfMeAndOther(req, otherId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find relation of this user and any other user'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('me/:otherId')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:55\n                \n            \n\n\n            \n                \n                    Find relation of current user and any other user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otherId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRelations(req, aId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find relations of any user'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':aId')\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:75\n                \n            \n\n\n            \n                \n                    Find relations of any user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRelationsOfMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRelationsOfMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find relations of this user'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:37\n                \n            \n\n\n            \n                \n                    Find relations of this user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findRelationWithOther\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findRelationWithOther(req, aId: string, bId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find relation of any two users'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':aId/:bId')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:95\n                \n            \n\n\n            \n                \n                    Find relation of any two users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeFriend\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeFriend(req, removeFriendDto: ReferenceFriendDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Remove friendship or cancel friend request'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Delete('me')@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:138\n                \n            \n\n\n            \n                \n                    Remove friendship or cancel friend request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    removeFriendDto\n                                    \n                                                ReferenceFriendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unblock\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unblock(req, unblockFriendDto: ReferenceFriendDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Unblock user'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post('me/unblock')@HttpCode(HttpStatus.OK)@UseFilters(new SelfReferenceErrorFilter())\n                \n            \n\n            \n                \n                    Defined in src/core/friend/friend.controller.ts:188\n                \n            \n\n\n            \n                \n                    Unblock user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    unblockFriendDto\n                                    \n                                                ReferenceFriendDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  UseGuards,\n  Request,\n  Param,\n  Post,\n  Body,\n  Delete,\n  UseFilters,\n  HttpStatus,\n  HttpCode,\n} from '@nestjs/common';\nimport { FriendService } from './friend.service';\nimport { FriendshipTwoWayRelationStatusesDto } from './dto/friendship-two-way-relation-statuses.dto';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport { FriendshipTwoWayRelationStatusDto } from './dto/friendship-two-way-relation-status.dto';\nimport { ReferenceFriendDto } from './dto/reference-friend.dto';\nimport { ApiBearerAuth, ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { SelfReferenceErrorFilter } from './self-reference-error.filter';\n\n@ApiTags('friends')\n@Controller('friends')\nexport class FriendController {\n  constructor(private readonly friendService: FriendService) {}\n\n  /**\n   * Find relations of this user\n   * @param req\n   */\n  @ApiOperation({\n    summary: 'Find relations of this user',\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('me')\n  async findRelationsOfMe(\n    @Request() req,\n  ): Promise {\n    return this.friendService.getAll(req.user.sub);\n  }\n\n  /**\n   * Find relation of current user and any other user\n   * @param req\n   * @param otherId\n   */\n  @ApiOperation({\n    summary: 'Find relation of this user and any other user',\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('me/:otherId')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async findRelationOfMeAndOther(\n    @Request() req,\n    @Param('otherId') otherId: string,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.get(req.user.sub, otherId);\n    return dto;\n  }\n\n  /**\n   * Find relations of any user\n   * @param req\n   * @param aId\n   */\n  @ApiOperation({\n    summary: 'Find relations of any user',\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':aId')\n  async findRelations(\n    @Request() req,\n    @Param('aId') aId: string,\n  ): Promise {\n    return this.friendService.getAll(aId);\n  }\n\n  /**\n   * Find relation of any two users\n   * @param req\n   * @param aId\n   * @param bId\n   */\n  @ApiOperation({\n    summary: 'Find relation of any two users',\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':aId/:bId')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async findRelationWithOther(\n    @Request() req,\n    @Param('aId') aId: string,\n    @Param('bId') bId: string,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.get(aId, bId);\n    return dto;\n  }\n\n  /**\n   * Send or accept friend request\n   * @param req\n   * @param addFriendDto\n   */\n  @ApiOperation({\n    summary: 'Send or accept friend request',\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('me')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async addFriend(\n    @Request() req,\n    @Body() addFriendDto: ReferenceFriendDto,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.add(req.user.sub, addFriendDto.id);\n    return dto;\n  }\n\n  /**\n   * Remove friendship or cancel friend request\n   * @param req\n   * @param removeFriendDto\n   */\n  @ApiOperation({\n    summary: 'Remove friendship or cancel friend request',\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete('me')\n  @UseFilters(new SelfReferenceErrorFilter())\n  async removeFriend(\n    @Request() req,\n    @Body() removeFriendDto: ReferenceFriendDto,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.remove(\n      req.user.sub,\n      removeFriendDto.id,\n    );\n    return dto;\n  }\n\n  /**\n   * Block user\n   * @param req\n   * @param blockFriendDto\n   */\n  @ApiOperation({\n    summary: 'Block user',\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('me/block')\n  @HttpCode(HttpStatus.OK)\n  @UseFilters(new SelfReferenceErrorFilter())\n  async block(\n    @Request() req,\n    @Body() blockFriendDto: ReferenceFriendDto,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.block(\n      req.user.sub,\n      blockFriendDto.id,\n    );\n    return dto;\n  }\n\n  /**\n   * Unblock user\n   * @param req\n   * @param unblockFriendDto\n   */\n  @ApiOperation({\n    summary: 'Unblock user',\n  })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('me/unblock')\n  @HttpCode(HttpStatus.OK)\n  @UseFilters(new SelfReferenceErrorFilter())\n  async unblock(\n    @Request() req,\n    @Body() unblockFriendDto: ReferenceFriendDto,\n  ): Promise {\n    const dto = new FriendshipTwoWayRelationStatusDto();\n    dto.status = await this.friendService.unblock(\n      req.user.sub,\n      unblockFriendDto.id,\n    );\n    return dto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FriendModule.html":{"url":"modules/FriendModule.html","title":"module - FriendModule","body":"\n                   \n\n\n\n\n    Modules\n    FriendModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FriendModule\n\n\n\ncluster_FriendModule_exports\n\n\n\ncluster_FriendModule_providers\n\n\n\n\nFriendService \n\nFriendService \n\n\n\nFriendModule\n\nFriendModule\n\nFriendService  -->\n\nFriendModule->FriendService \n\n\n\n\n\nFriendService\n\nFriendService\n\nFriendModule -->\n\nFriendService->FriendModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/friend/friend.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FriendService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FriendController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FriendService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Friendship } from './entities/friendship.entity';\nimport { FriendshipComposite } from './entities/friendship-composite-view.entity';\nimport { FriendService } from './friend.service';\nimport { FriendController } from './friend.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Friendship, FriendshipComposite])],\n  providers: [FriendService],\n  controllers: [FriendController],\n  exports: [FriendService],\n})\nexport class FriendModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FriendService.html":{"url":"injectables/FriendService.html","title":"injectable - FriendService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FriendService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/friend.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                _acceptFriendRequest\n                            \n                            \n                                    Private\n                                    Static\n                                _deriveTwoWayRelationStatus\n                            \n                            \n                                    Private\n                                    Async\n                                _getNormalAndInverse\n                            \n                            \n                                    Private\n                                    Async\n                                _removeRelations\n                            \n                            \n                                    Async\n                                _sendFriendRequest\n                            \n                            \n                                    Private\n                                    Async\n                                _setRelations\n                            \n                            \n                                    Async\n                                add\n                            \n                            \n                                    Async\n                                block\n                            \n                            \n                                    Async\n                                get\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                unblock\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(friendshipRepository: Repository, friendshipCompositeRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/core/friend/friend.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        friendshipRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        friendshipCompositeRepository\n                                                  \n                                                        \n                                                                    Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            _acceptFriendRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _acceptFriendRequest(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:197\n                \n            \n\n\n            \n                \n                    Set two-way relation as friends\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _deriveTwoWayRelationStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _deriveTwoWayRelationStatus(normalRelationStatus: FriendshipOneWayRelationStatus, inverseRelationStatus: FriendshipOneWayRelationStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:26\n                \n            \n\n\n            \n                \n                    Derive the two-way relation status given the normal and inverse one-way relation statuses\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    normalRelationStatus\n                                    \n                                                FriendshipOneWayRelationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        One-way relation status from a to b\n\n                                    \n                                \n                                \n                                    inverseRelationStatus\n                                    \n                                                FriendshipOneWayRelationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        One-way relation status from b to a\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FriendshipTwoWayRelationStatus | null\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            _getNormalAndInverse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getNormalAndInverse(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:69\n                \n            \n\n\n            \n                \n                    Get both one-way relation statuses from a to b and from b to a\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            _removeRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _removeRelations(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:168\n                \n            \n\n\n            \n                \n                    Remove all relations between a and b\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            _sendFriendRequest\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _sendFriendRequest(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:180\n                \n            \n\n\n            \n                \n                    Set both one-way relations from a to b represent a friend request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            _setRelations\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _setRelations(aId: string, bId: string, normalStatus: FriendshipOneWayRelationStatus, inverseStatus: FriendshipOneWayRelationStatus)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:136\n                \n            \n\n\n            \n                \n                    Individually set relations between two users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                                \n                                    normalStatus\n                                    \n                                                FriendshipOneWayRelationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        One way friendship relation from a to b\n\n                                    \n                                \n                                \n                                    inverseStatus\n                                    \n                                                FriendshipOneWayRelationStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        One way friendship relation from b to a\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:214\n                \n            \n\n\n            \n                \n                    Send friend request from a to b, or accept friend request from b to a\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            block\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    block(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:277\n                \n            \n\n\n            \n                \n                    Block b for a\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:84\n                \n            \n\n\n            \n                \n                    Get the one-way relation status of a to b\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for the acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for the referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(aId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:96\n                \n            \n\n\n            \n                \n                    Get all two-way relation statuses of a user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            remove\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:247\n                \n            \n\n\n            \n                \n                    Remove friendship of a and b or discard friend request from b\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            unblock\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    unblock(aId: string, bId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/friend.service.ts:311\n                \n            \n\n\n            \n                \n                    Unblock b for a\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    aId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for acting user\n\n                                    \n                                \n                                \n                                    bId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Account UUID for referred user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Friendship } from './entities/friendship.entity';\nimport { Repository } from 'typeorm';\nimport { FriendshipComposite } from './entities/friendship-composite-view.entity';\nimport { FriendshipOneWayRelationStatus } from './enums/friendship-one-way-relation-status.enum';\nimport { FriendshipTwoWayRelationStatus } from './enums/friendship-two-way-relation-status.enum';\nimport { FriendshipTwoWayRelationStatusesDto } from './dto/friendship-two-way-relation-statuses.dto';\n\nexport class SelfReferenceError extends Error {}\n\n@Injectable()\nexport class FriendService {\n  constructor(\n    @InjectRepository(Friendship)\n    private friendshipRepository: Repository,\n    @InjectRepository(FriendshipComposite)\n    private friendshipCompositeRepository: Repository,\n  ) {}\n\n  /**\n   * Derive the two-way relation status given the normal and inverse one-way relation statuses\n   * @param normalRelationStatus One-way relation status from a to b\n   * @param inverseRelationStatus One-way relation status from b to a\n   */\n  private static _deriveTwoWayRelationStatus(\n    normalRelationStatus: FriendshipOneWayRelationStatus,\n    inverseRelationStatus: FriendshipOneWayRelationStatus,\n  ): FriendshipTwoWayRelationStatus | null {\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.Ok &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.Ok\n    ) {\n      return FriendshipTwoWayRelationStatus.Friends;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.Ok &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.NoAction\n    ) {\n      return FriendshipTwoWayRelationStatus.SentRequest;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.NoAction &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.Ok\n    ) {\n      return FriendshipTwoWayRelationStatus.ReceivedRequest;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.DidBlock &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.GotBlocked\n    ) {\n      return FriendshipTwoWayRelationStatus.BlockedByYou;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.GotBlocked &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.DidBlock\n    ) {\n      return FriendshipTwoWayRelationStatus.BlockedByOther;\n    }\n    // no complete relation\n    return null;\n  }\n\n  /**\n   * Get both one-way relation statuses from a to b and from b to a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  private async _getNormalAndInverse(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return Promise.all([\n      this.friendshipRepository.findOne({ aId: aId, bId: bId }),\n      this.friendshipRepository.findOne({ aId: bId, bId: aId }),\n    ]);\n  }\n\n  /**\n   * Get the one-way relation status of a to b\n   * @param aId Account UUID for the acting user\n   * @param bId Account UUID for the referred user\n   */\n  async get(aId: string, bId: string): Promise {\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    return FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n  }\n\n  /**\n   * Get all two-way relation statuses of a user\n   * @param aId\n   */\n  async getAll(aId: string): Promise {\n    const dto = new FriendshipTwoWayRelationStatusesDto();\n    const friendshipComposites = await this.friendshipCompositeRepository.find({\n      where: { aId: aId },\n    });\n    for (const friendshipComposite of friendshipComposites) {\n      const finalStatus = FriendService._deriveTwoWayRelationStatus(\n        friendshipComposite?.statusAtoB,\n        friendshipComposite?.statusBtoA,\n      );\n      const id = friendshipComposite.bId;\n      switch (finalStatus) {\n        case FriendshipTwoWayRelationStatus.SentRequest:\n          dto.sentRequests.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.ReceivedRequest:\n          dto.receivedRequests.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.Friends:\n          dto.friends.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.BlockedByYou:\n          dto.blockedByYou.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.BlockedByOther:\n          dto.blockedByOther.push(id);\n          break;\n      }\n    }\n    return dto;\n  }\n\n  /**\n   * Individually set relations between two users\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   * @param normalStatus One way friendship relation from a to b\n   * @param inverseStatus One way friendship relation from b to a\n   * @private\n   */\n  private async _setRelations(\n    aId: string,\n    bId: string,\n    normalStatus: FriendshipOneWayRelationStatus,\n    inverseStatus: FriendshipOneWayRelationStatus,\n  ): Promise {\n    const normal = new Friendship();\n    normal.aId = aId;\n    normal.bId = bId;\n    normal.status = normalStatus;\n\n    const inverse = new Friendship();\n    inverse.aId = bId;\n    inverse.bId = aId;\n    inverse.status = inverseStatus;\n\n    const [savedNormal, savedInverse] = await this.friendshipRepository.save([\n      normal,\n      inverse,\n    ]);\n    return FriendService._deriveTwoWayRelationStatus(\n      savedNormal?.status,\n      savedInverse?.status,\n    );\n  }\n\n  /**\n   * Remove all relations between a and b\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   * @private\n   */\n  private async _removeRelations(aId: string, bId: string): Promise {\n    await Promise.all([\n      this.friendshipRepository.delete({ aId: aId, bId: bId }),\n      this.friendshipRepository.delete({ aId: bId, bId: aId }),\n    ]);\n  }\n\n  /**\n   * Set both one-way relations from a to b represent a friend request\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async _sendFriendRequest(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return this._setRelations(\n      aId,\n      bId,\n      FriendshipOneWayRelationStatus.Ok,\n      FriendshipOneWayRelationStatus.NoAction,\n    );\n  }\n\n  /**\n   * Set two-way relation as friends\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async _acceptFriendRequest(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return this._setRelations(\n      aId,\n      bId,\n      FriendshipOneWayRelationStatus.Ok,\n      FriendshipOneWayRelationStatus.Ok,\n    );\n  }\n\n  /**\n   * Send friend request from a to b, or accept friend request from b to a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async add(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n      case FriendshipTwoWayRelationStatus.SentRequest:\n      case FriendshipTwoWayRelationStatus.Friends:\n        // blocked status blocks any other action, return blocked status and do nothing.\n        return currentFinalStatus;\n      case FriendshipTwoWayRelationStatus.ReceivedRequest:\n        return this._acceptFriendRequest(aId, bId);\n      case null:\n        return this._sendFriendRequest(aId, bId);\n    }\n  }\n\n  /**\n   * Remove friendship of a and b or discard friend request from b\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async remove(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n        // blocked status blocks any other action, return blocked status and do nothing.\n        return currentFinalStatus;\n      default:\n        await this._removeRelations(aId, bId);\n        return null;\n    }\n  }\n\n  /**\n   * Block b for a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async block(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      // already blocked statuses\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n        return currentFinalStatus;\n      default:\n        return this._setRelations(\n          aId,\n          bId,\n          FriendshipOneWayRelationStatus.DidBlock,\n          FriendshipOneWayRelationStatus.GotBlocked,\n        );\n    }\n  }\n\n  /**\n   * Unblock b for a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async unblock(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n        await this._removeRelations(aId, bId);\n        return null;\n      default:\n        return currentFinalStatus;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Friendship.html":{"url":"classes/Friendship.html","title":"class - Friendship","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Friendship\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/entities/friendship.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                a\n                            \n                            \n                                aId\n                            \n                            \n                                    Optional\n                                b\n                            \n                            \n                                bId\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                status\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            a\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            b\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FriendshipOneWayRelationStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: FriendshipOneWayRelationStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship.entity.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Check,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Account } from '../../account/entities/account.entity';\nimport { FriendshipOneWayRelationStatus } from '../enums/friendship-one-way-relation-status.enum';\n\n@Entity()\n@Check(`\"aId\" != \"bId\"`)\nexport class Friendship {\n  @PrimaryColumn()\n  aId: string;\n\n  @PrimaryColumn()\n  bId: string;\n\n  @Column({\n    type: 'enum',\n    enum: FriendshipOneWayRelationStatus,\n    default: FriendshipOneWayRelationStatus.NoAction,\n  })\n  status: FriendshipOneWayRelationStatus;\n\n  @CreateDateColumn()\n  createdAt?: Date;\n\n  @UpdateDateColumn()\n  updatedAt?: Date;\n\n  @ManyToOne(() => Account, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  a?: Account;\n\n  @ManyToOne(() => Account, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  b?: Account;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendshipComposite.html":{"url":"classes/FriendshipComposite.html","title":"class - FriendshipComposite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendshipComposite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/entities/friendship-composite-view.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                aId\n                            \n                            \n                                bId\n                            \n                            \n                                statusAtoB\n                            \n                            \n                                statusBtoA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            aId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship-composite-view.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            bId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship-composite-view.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusAtoB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FriendshipOneWayRelationStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship-composite-view.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            statusBtoA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FriendshipOneWayRelationStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ViewColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/entities/friendship-composite-view.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ViewColumn, ViewEntity } from 'typeorm';\nimport { FriendshipOneWayRelationStatus } from '../enums/friendship-one-way-relation-status.enum';\n\n@ViewEntity({\n  expression: `\n    select\n      \"normal\".\"aId\" as \"aId\",\n      \"normal\".\"bId\" as \"bId\",\n      \"normal\".\"status\" as \"statusAtoB\",\n      \"inverse\".\"status\" as \"statusBtoA\"\n    from \"friendship\" \"normal\"\n        join \"friendship\" \"inverse\" on \"normal\".\"aId\" = \"inverse\".\"bId\" and \"normal\".\"bId\" = \"inverse\".\"aId\";\n  `,\n})\nexport class FriendshipComposite {\n  @ViewColumn()\n  aId: string;\n\n  @ViewColumn()\n  bId: string;\n\n  @ViewColumn()\n  statusAtoB: FriendshipOneWayRelationStatus;\n\n  @ViewColumn()\n  statusBtoA: FriendshipOneWayRelationStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendshipTwoWayRelationStatusDto.html":{"url":"classes/FriendshipTwoWayRelationStatusDto.html","title":"class - FriendshipTwoWayRelationStatusDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendshipTwoWayRelationStatusDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/dto/friendship-two-way-relation-status.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         FriendshipTwoWayRelationStatus\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-status.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { FriendshipTwoWayRelationStatus } from '../enums/friendship-two-way-relation-status.enum';\n\nexport class FriendshipTwoWayRelationStatusDto {\n  status: FriendshipTwoWayRelationStatus;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FriendshipTwoWayRelationStatusesDto.html":{"url":"classes/FriendshipTwoWayRelationStatusesDto.html","title":"class - FriendshipTwoWayRelationStatusesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FriendshipTwoWayRelationStatusesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                blockedByOther\n                            \n                            \n                                blockedByYou\n                            \n                            \n                                friends\n                            \n                            \n                                receivedRequests\n                            \n                            \n                                sentRequests\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            blockedByOther\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            blockedByYou\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            friends\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            receivedRequests\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sentRequests\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/friendship-two-way-relation-statuses.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class FriendshipTwoWayRelationStatusesDto {\n  sentRequests: string[] = [];\n  receivedRequests: string[] = [];\n  friends: string[] = [];\n  blockedByYou: string[] = [];\n  blockedByOther: string[] = [];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Group.html":{"url":"classes/Group.html","title":"class - Group","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Group\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/entities/group.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                id\n                            \n                            \n                                inviteOnly\n                            \n                            \n                                    Optional\n                                members\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            inviteOnly\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            members\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GroupMember[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  OneToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { GroupMember } from './group-member.entity';\n\n@Entity()\nexport class Group {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ type: 'text', unique: true })\n  name: string;\n\n  @Column({ default: false })\n  inviteOnly: boolean;\n\n  @CreateDateColumn()\n  createdAt?: Date;\n\n  @UpdateDateColumn()\n  updatedAt?: Date;\n\n  @OneToMany(() => GroupMember, (groupMember) => groupMember.group)\n  members?: GroupMember[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/GroupController.html":{"url":"controllers/GroupController.html","title":"controller - GroupController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  GroupController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                groups\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                banFromGroup\n                            \n                            \n                                    Async\n                                createGroup\n                            \n                            \n                                    Async\n                                deleteGroup\n                            \n                            \n                                    Async\n                                findGroup\n                            \n                            \n                                    Async\n                                findGroups\n                            \n                            \n                                    Async\n                                getMemberOfGroup\n                            \n                            \n                                    Async\n                                getMembershipsOfMe\n                            \n                            \n                                    Async\n                                getMembershipsOfUser\n                            \n                            \n                                    Async\n                                getMembersOfGroup\n                            \n                            \n                                    Async\n                                inviteToGroup\n                            \n                            \n                                    Async\n                                joinGroup\n                            \n                            \n                                    Async\n                                leaveGroup\n                            \n                            \n                                    Async\n                                promote\n                            \n                            \n                                    Async\n                                removeMemberOfGroup\n                            \n                            \n                                    Async\n                                updateGroup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            banFromGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    banFromGroup(req, groupId: string, targetUserId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Ban user from group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post(':groupId/members/:userId/ban')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:345\n                \n            \n\n\n            \n                \n                    Ban user from group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createGroup(req, createGroupDto: CreateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post()\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:53\n                \n            \n\n\n            \n                \n                    Create group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createGroupDto\n                                    \n                                                CreateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteGroup(req, groupId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Delete(':groupId')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:150\n                \n            \n\n\n            \n                \n                    Delete group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findGroup(groupId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get(':groupId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:102\n                \n            \n\n\n            \n                \n                    Find single group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findGroups\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findGroups(name?: string, inviteOnly?: boolean)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find groups'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get()\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:80\n                \n            \n\n\n            \n                \n                    Find groups\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    inviteOnly\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMemberOfGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMemberOfGroup(req, groupId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get member of group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get(':groupId/members/:userId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:230\n                \n            \n\n\n            \n                \n                    Get member of group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMembershipsOfMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMembershipsOfMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get memberships of me'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get('memberships/me')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:165\n                \n            \n\n\n            \n                \n                    Get memberships of current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMembershipsOfUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMembershipsOfUser(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get memberships of user'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get('memberships/:userId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:185\n                \n            \n\n\n            \n                \n                    Get memberships of user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMembersOfGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMembersOfGroup(req, groupId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get members of group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Get(':groupId/members')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:207\n                \n            \n\n\n            \n                \n                    Get members of group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            inviteToGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    inviteToGroup(req, groupId: string, targetUserId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Invite user to group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post(':groupId/members/:userId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:275\n                \n            \n\n\n            \n                \n                    Invite user to group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            joinGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    joinGroup(req, groupId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Join group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post(':groupId/members/me')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:252\n                \n            \n\n\n            \n                \n                    Join group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            leaveGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    leaveGroup(req, groupId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Leave group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Delete(':groupId/members/me')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:303\n                \n            \n\n\n            \n                \n                    Leave group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            promote\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    promote(req, groupId: string, targetUserId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Promote user to admin'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Post(':groupId/members/:userId/promote')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:373\n                \n            \n\n\n            \n                \n                    Promote user to admin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            removeMemberOfGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeMemberOfGroup(req, groupId: string, targetUserId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Remove user from group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Delete(':groupId/members/:userId')@HttpCode(HttpStatus.NO_CONTENT)\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:324\n                \n            \n\n\n            \n                \n                    Remove user from group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    targetUserId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateGroup\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateGroup(req, groupId: string, updateGroupDto: UpdateGroupDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update group'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(GroupExceptionFilter)@Patch(':groupId')\n                \n            \n\n            \n                \n                    Defined in src/core/group/group.controller.ts:123\n                \n            \n\n\n            \n                \n                    Update group\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateGroupDto\n                                    \n                                                UpdateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Request,\n  UseFilters,\n  UseGuards,\n} from '@nestjs/common';\nimport { GroupService } from './group.service';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport { GroupDto } from './dto/group.dto';\nimport { GroupsDto } from './dto/groups.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\nimport { GroupExceptionFilter } from './filters/group-exception.filter';\nimport { MembershipsDto } from './dto/memberships.dto';\nimport { MembershipDto } from './dto/membership.dto';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiNoContentResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { BadRequestDto } from '../../common/dto/bad-request.dto';\n\n@ApiTags('groups')\n@Controller('groups')\nexport class GroupController {\n  constructor(private readonly groupService: GroupService) {}\n\n  /**\n   * Create group\n   * @param req\n   * @param createGroupDto\n   */\n  @ApiOperation({ summary: 'Create group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post()\n  async createGroup(\n    @Request() req,\n    @Body() createGroupDto: CreateGroupDto,\n  ): Promise {\n    const dto = new GroupDto();\n    dto.group = await this.groupService.create(\n      req.user.sub,\n      createGroupDto.name,\n      createGroupDto.inviteOnly,\n    );\n    if (dto.group === undefined) {\n      dto.group = null;\n    }\n    return dto;\n  }\n\n  /**\n   * Find groups\n   * @param name\n   * @param inviteOnly\n   */\n  @ApiOperation({ summary: 'Find groups' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get()\n  async findGroups(\n    @Query('name') name?: string,\n    @Query('inviteOnly') inviteOnly?: boolean,\n  ): Promise {\n    const dto = new GroupsDto();\n    [dto.groups, dto.count] = await this.groupService.findMany({\n      name: name,\n      inviteOnly: inviteOnly,\n    });\n    return dto;\n  }\n\n  /**\n   * Find single group\n   * @param groupId\n   */\n  @ApiOperation({ summary: 'Find group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get(':groupId')\n  async findGroup(@Param('groupId') groupId: string): Promise {\n    const dto = new GroupDto();\n    dto.group = await this.groupService.findOne(groupId);\n    if (dto.group === undefined) {\n      dto.group = null;\n    }\n    return dto;\n  }\n\n  /**\n   * Update group\n   * @param req\n   * @param groupId\n   * @param updateGroupDto\n   */\n  @ApiOperation({ summary: 'Update group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Patch(':groupId')\n  async updateGroup(\n    @Request() req,\n    @Param('groupId') groupId: string,\n    @Body() updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const memberId = req.user.sub;\n    const dto = new GroupDto();\n    dto.group = await this.groupService.update(\n      groupId,\n      memberId,\n      updateGroupDto,\n    );\n    return dto;\n  }\n\n  /**\n   * Delete group\n   * @param req\n   * @param groupId\n   */\n  @ApiOperation({ summary: 'Delete group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Delete(':groupId')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async deleteGroup(@Request() req, @Param('groupId') groupId: string) {\n    const memberId = req.user.sub;\n    await this.groupService.delete(groupId, memberId);\n  }\n\n  /**\n   * Get memberships of current user\n   * @param req\n   */\n  @ApiOperation({ summary: 'Get memberships of me' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get('memberships/me')\n  async getMembershipsOfMe(@Request() req): Promise {\n    const userId = req.user.sub;\n    const memberships = await this.groupService.findMembershipsOfUser(userId);\n    return {\n      count: memberships.length,\n      memberships: memberships,\n    };\n  }\n\n  /**\n   * Get memberships of user\n   * @param req\n   * @param userId\n   */\n  @ApiOperation({ summary: 'Get memberships of user' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get('memberships/:userId')\n  async getMembershipsOfUser(\n    @Request() req,\n    @Param('userId') userId: string,\n  ): Promise {\n    const memberships = await this.groupService.findMembershipsOfUser(userId);\n    return {\n      count: memberships.length,\n      memberships: memberships,\n    };\n  }\n\n  /**\n   * Get members of group\n   * @param req\n   * @param groupId\n   */\n  @ApiOperation({ summary: 'Get members of group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get(':groupId/members')\n  async getMembersOfGroup(\n    @Request() req,\n    @Param('groupId') groupId: string,\n  ): Promise {\n    const [members, count] = await this.groupService.getMembers(groupId);\n    return {\n      count: count,\n      memberships: members,\n    };\n  }\n\n  /**\n   * Get member of group\n   * @param req\n   * @param groupId\n   * @param userId\n   */\n  @ApiOperation({ summary: 'Get member of group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Get(':groupId/members/:userId')\n  async getMemberOfGroup(\n    @Request() req,\n    @Param('groupId') groupId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    const member = await this.groupService.getMember(groupId, userId);\n    return {\n      membership: member,\n    };\n  }\n\n  /**\n   * Join group\n   * @param req\n   * @param groupId\n   */\n  @ApiOperation({ summary: 'Join group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post(':groupId/members/me')\n  async joinGroup(\n    @Request() req,\n    @Param('groupId') groupId: string,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    const member = await this.groupService.join(groupId, actingUserId);\n    return {\n      membership: member,\n    };\n  }\n\n  /**\n   * Invite user to group\n   * @param req\n   * @param groupId\n   * @param targetUserId\n   */\n  @ApiOperation({ summary: 'Invite user to group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post(':groupId/members/:userId')\n  async inviteToGroup(\n    @Request() req,\n    @Param('groupId') groupId: string,\n    @Param('userId') targetUserId: string,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    const member = await this.groupService.invite(\n      groupId,\n      actingUserId,\n      targetUserId,\n    );\n    return {\n      membership: member,\n    };\n  }\n\n  /**\n   * Leave group\n   * @param req\n   * @param groupId\n   */\n  @ApiOperation({ summary: 'Leave group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Delete(':groupId/members/me')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async leaveGroup(\n    @Request() req,\n    @Param('groupId') groupId: string,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    await this.groupService.leave(groupId, actingUserId);\n  }\n\n  /**\n   * Remove user from group\n   * @param req\n   * @param groupId\n   * @param targetUserId\n   */\n  @ApiOperation({ summary: 'Remove user from group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Delete(':groupId/members/:userId')\n  @HttpCode(HttpStatus.NO_CONTENT)\n  async removeMemberOfGroup(\n    @Request() req,\n    @Param('groupId') groupId: string,\n    @Param('userId') targetUserId: string,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    await this.groupService.removeMember(groupId, actingUserId, targetUserId);\n  }\n\n  /**\n   * Ban user from group\n   * @param req\n   * @param groupId\n   * @param targetUserId\n   */\n  @ApiOperation({ summary: 'Ban user from group' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post(':groupId/members/:userId/ban')\n  async banFromGroup(\n    @Request() req,\n    @Param('groupId') groupId: string,\n    @Param('userId') targetUserId: string,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    const member = await this.groupService.ban(\n      groupId,\n      actingUserId,\n      targetUserId,\n    );\n    return {\n      membership: member,\n    };\n  }\n\n  /**\n   * Promote user to admin\n   * @param req\n   * @param groupId\n   * @param targetUserId\n   */\n  @ApiOperation({ summary: 'Promote user to admin' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(GroupExceptionFilter)\n  @Post(':groupId/members/:userId/promote')\n  async promote(\n    @Request() req,\n    @Param('groupId') groupId: string,\n    @Param('userId') targetUserId: string,\n  ): Promise {\n    const actingUserId: string = req.user.sub;\n    const member = await this.groupService.promoteToAdmin(\n      groupId,\n      actingUserId,\n      targetUserId,\n    );\n    return {\n      membership: member,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupDoesNotExistError.html":{"url":"classes/GroupDoesNotExistError.html","title":"class - GroupDoesNotExistError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupDoesNotExistError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupDto.html":{"url":"classes/GroupDto.html","title":"class - GroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/group.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                group\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Group\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/group.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Group } from '../entities/group.entity';\n\nexport class GroupDto {\n  group: Group;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupExceptionFilter.html":{"url":"classes/GroupExceptionFilter.html","title":"class - GroupExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/filters/group-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: _BaseGroupException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/group/filters/group-exception.filter.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                _BaseGroupException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { _BaseGroupException } from '../group.service';\n\n@Catch(_BaseGroupException)\nexport class GroupExceptionFilter implements ExceptionFilter {\n  catch(exception: _BaseGroupException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = HttpStatus.BAD_REQUEST;\n    const name = exception.name;\n    const message = exception.message;\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      error: {\n        name: name,\n        message: message,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupMember.html":{"url":"classes/GroupMember.html","title":"class - GroupMember","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupMember\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/entities/group-member.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                group\n                            \n                            \n                                groupId\n                            \n                            \n                                    Optional\n                                member\n                            \n                            \n                                memberId\n                            \n                            \n                                membershipStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            group\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Group\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groupId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            member\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            memberId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            membershipStatus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GroupMembershipStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: GroupMembershipStatus, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/entities/group-member.entity.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GroupMembershipStatus } from '../enums/group-membership-status.enum';\nimport { Column, Entity, ManyToOne, PrimaryColumn } from 'typeorm';\nimport { Group } from './group.entity';\nimport { Account } from '../../account/entities/account.entity';\nimport { ApiProperty } from '@nestjs/swagger';\n\n@Entity()\nexport class GroupMember {\n  @PrimaryColumn()\n  groupId: string;\n\n  @PrimaryColumn()\n  memberId: string;\n\n  @Column({\n    type: 'enum',\n    enum: GroupMembershipStatus,\n    default: GroupMembershipStatus.Member,\n  })\n  membershipStatus: GroupMembershipStatus;\n\n  @ManyToOne(() => Group, (group) => group.members, { onDelete: 'CASCADE' })\n  group?: Group;\n\n  @ManyToOne(() => Account, { onDelete: 'CASCADE' })\n  member?: Account;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/GroupModule.html":{"url":"modules/GroupModule.html","title":"module - GroupModule","body":"\n                   \n\n\n\n\n    Modules\n    GroupModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_providers\n\n\n\ncluster_GroupModule_exports\n\n\n\n\nGroupService \n\nGroupService \n\n\n\nGroupModule\n\nGroupModule\n\nGroupService  -->\n\nGroupModule->GroupService \n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/group/group.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GroupService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            GroupController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            GroupService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { GroupService } from './group.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupController } from './group.controller';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Group, GroupMember])],\n  controllers: [GroupController],\n  providers: [GroupService],\n  exports: [GroupService],\n})\nexport class GroupModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GroupsDto.html":{"url":"classes/GroupsDto.html","title":"class - GroupsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GroupsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/groups.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                groups\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            count\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/core/group/dto/groups.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            groups\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Group[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/groups.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Group } from '../entities/group.entity';\n\nexport class GroupsDto {\n  count;\n  groups: Group[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/guard/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/core/account/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/core/account/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.SECRET ?? 'secretsecretigotasecret',\n    });\n  }\n\n  // these valid results are attached to user param of the request object\n  async validate(payload: any) {\n    return { sub: payload.sub };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/LeaderboardController.html":{"url":"controllers/LeaderboardController.html","title":"controller - LeaderboardController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  LeaderboardController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                leaderboards\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEntries\n                            \n                            \n                                    Async\n                                getEntry\n                            \n                            \n                                    Async\n                                getEntryOfMe\n                            \n                            \n                                    Async\n                                updateEntry\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntries(req, leaderboardId: string, offset: string, limit: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get leaderboard entries'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(LeaderboardExceptionFilter)@Get(':leaderboardId')\n                \n            \n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.controller.ts:86\n                \n            \n\n\n            \n                \n                    Get leaderboard entries\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    offset\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                                \n                                    limit\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        undefined\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntry(req, leaderboardId: string, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get leaderboard entry for user'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(LeaderboardExceptionFilter)@Get(':leaderboardId/:userId')\n                \n            \n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.controller.ts:65\n                \n            \n\n\n            \n                \n                    Get leaderboard entry for user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntryOfMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntryOfMe(req, leaderboardId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get leaderboard entry for current user'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':leaderboardId/me')@UseFilters(LeaderboardExceptionFilter)\n                \n            \n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.controller.ts:45\n                \n            \n\n\n            \n                \n                    Get leaderboard entry for current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEntry(req, leaderboardId: string, updateEntryDto: UpdateEntryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update leaderboard entry of user'})@ApiBadRequestResponse({type: BadRequestDto})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@UseFilters(LeaderboardExceptionFilter)@Post(':leaderboardId')\n                \n            \n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.controller.ts:110\n                \n            \n\n\n            \n                \n                    Update leaderboard entry of user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntryDto\n                                    \n                                                UpdateEntryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Post,\n  UseGuards,\n  Request,\n  UseFilters,\n  Query,\n  Body,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport { LeaderboardService } from './leaderboard.service';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { BadRequestDto } from '../../common/dto/bad-request.dto';\nimport { LeaderboardExceptionFilter } from './filters/leaderboard-exception.filter';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\nimport { UpdateEntryDto } from './dto/update-entry.dto';\n\n@ApiTags('leaderboards')\n@Controller('leaderboards')\nexport class LeaderboardController {\n  constructor(private readonly leaderboardService: LeaderboardService) {}\n\n  /**\n   * Get leaderboard entry for current user\n   * @param req\n   * @param leaderboardId\n   */\n  @ApiOperation({ summary: 'Get leaderboard entry for current user' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':leaderboardId/me')\n  @UseFilters(LeaderboardExceptionFilter)\n  async getEntryOfMe(\n    @Request() req,\n    @Param('leaderboardId') leaderboardId: string,\n  ): Promise {\n    const userId = req.user.sub;\n    return this.leaderboardService.getEntry(leaderboardId, userId);\n  }\n\n  /**\n   * Get leaderboard entry for user\n   * @param req\n   * @param leaderboardId\n   * @param userId\n   */\n  @ApiOperation({ summary: 'Get leaderboard entry for user' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(LeaderboardExceptionFilter)\n  @Get(':leaderboardId/:userId')\n  async getEntry(\n    @Request() req,\n    @Param('leaderboardId') leaderboardId: string,\n    @Param('userId') userId: string,\n  ): Promise {\n    return this.leaderboardService.getEntry(leaderboardId, userId);\n  }\n\n  /**\n   * Get leaderboard entries\n   * @param req\n   * @param leaderboardId\n   * @param offset\n   * @param limit\n   */\n  @ApiOperation({ summary: 'Get leaderboard entries' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(LeaderboardExceptionFilter)\n  @Get(':leaderboardId')\n  async getEntries(\n    @Request() req,\n    @Param('leaderboardId') leaderboardId: string,\n    @Query('offset') offset: string = undefined,\n    @Query('limit') limit: string = undefined,\n  ): Promise {\n    return this.leaderboardService.getEntries(leaderboardId, {\n      offset: offset,\n      limit: limit,\n    });\n  }\n\n  /**\n   * Update leaderboard entry of user\n   * @param req\n   * @param leaderboardId\n   * @param updateEntryDto\n   */\n  @ApiOperation({ summary: 'Update leaderboard entry of user' })\n  @ApiBadRequestResponse({ type: BadRequestDto })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @UseFilters(LeaderboardExceptionFilter)\n  @Post(':leaderboardId')\n  async updateEntry(\n    @Request() req,\n    @Param('leaderboardId') leaderboardId: string,\n    @Body() updateEntryDto: UpdateEntryDto,\n  ): Promise {\n    const userId = req.user.sub;\n    return this.leaderboardService.updateEntry(\n      leaderboardId,\n      userId,\n      updateEntryDto.score,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardEntriesDto.html":{"url":"classes/LeaderboardEntriesDto.html","title":"class - LeaderboardEntriesDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardEntriesDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/dto/leaderboard-entries.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                entries\n                            \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            entries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         LeaderboardEntryDto[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entries.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            limit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entries.dto.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            offset\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entries.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { LeaderboardEntryDto } from './leaderboard-entry.dto';\n\nexport class LeaderboardEntriesDto {\n  offset?: number;\n  limit?: number;\n  entries?: LeaderboardEntryDto[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardEntryDto.html":{"url":"classes/LeaderboardEntryDto.html","title":"class - LeaderboardEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/dto/leaderboard-entry.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                rank\n                            \n                            \n                                    Optional\n                                score\n                            \n                            \n                                    Optional\n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            rank\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entry.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entry.dto.ts:3\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/leaderboard-entry.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class LeaderboardEntryDto {\n  userId?: string;\n  score?: number;\n  rank?: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardEntryNotFoundError.html":{"url":"classes/LeaderboardEntryNotFoundError.html","title":"class - LeaderboardEntryNotFoundError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardEntryNotFoundError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseLeaderboardException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\n\nexport class _BaseLeaderboardException extends Error {}\nexport class LeaderboardEntryNotFoundError extends _BaseLeaderboardException {}\nexport class CouldNotUpdateLeaderboardEntryError extends _BaseLeaderboardException {}\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(private readonly redisService: RedisService) {}\n\n  /**\n   * Get entry of user in a leaderboard\n   * @param leaderboardId\n   * @param userId\n   */\n  async getEntry(\n    leaderboardId: string,\n    userId: string,\n  ): Promise {\n    const client = this.redisService.getClient();\n    const [score, rank] = await Promise.all([\n      client.zscore(leaderboardId, userId),\n      client.zrevrank(leaderboardId, userId),\n    ]);\n    if (score == null || rank == null) {\n      throw new LeaderboardEntryNotFoundError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" was not found`,\n      );\n    }\n    return {\n      userId: userId,\n      score: Number(score),\n      rank: Number(rank),\n    };\n  }\n\n  /**\n   * Get entries in leaderboard\n   * @param leaderboardId\n   * @param options\n   */\n  async getEntries(\n    leaderboardId: string,\n    options?: {\n      offset: string;\n      limit: string;\n    },\n  ): Promise {\n    const client = this.redisService.getClient();\n\n    let start = 0;\n    let stop = -1;\n\n    let normalizedOffset = null;\n    let normalizedLimit = null;\n\n    if (options.offset && isFinite(Number(options.offset))) {\n      normalizedOffset = Number(options.offset);\n      start = normalizedOffset;\n    }\n    if (options.limit && isFinite(Number(options.limit))) {\n      normalizedLimit = Number(options.limit);\n      stop = start + Number(options.limit) - 1;\n    }\n\n    const result = await client.zrevrange(\n      leaderboardId,\n      start,\n      stop,\n      'WITHSCORES',\n    );\n\n    // construct entries array\n    const entries: LeaderboardEntryDto[] = [];\n    for (let i = 0; i  {\n    const client = this.redisService.getClient();\n\n    const updatedEntryCount = await client.zadd(\n      leaderboardId,\n      'GT',\n      score,\n      userId,\n    );\n    if (updatedEntryCount !== 1) {\n      throw new CouldNotUpdateLeaderboardEntryError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" could not be updated with score \"${score}\"`,\n      );\n    }\n\n    return this.getEntry(leaderboardId, userId);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LeaderboardExceptionFilter.html":{"url":"classes/LeaderboardExceptionFilter.html","title":"class - LeaderboardExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LeaderboardExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/filters/leaderboard-exception.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: _BaseLeaderboardException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/leaderboard/filters/leaderboard-exception.filter.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                _BaseLeaderboardException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpStatus,\n} from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { _BaseLeaderboardException } from '../leaderboard.service';\n\n@Catch(_BaseLeaderboardException)\nexport class LeaderboardExceptionFilter implements ExceptionFilter {\n  catch(exception: _BaseLeaderboardException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = HttpStatus.BAD_REQUEST;\n    const name = exception.name;\n    const message = exception.message;\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      error: {\n        name: name,\n        message: message,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LeaderboardModule.html":{"url":"modules/LeaderboardModule.html","title":"module - LeaderboardModule","body":"\n                   \n\n\n\n\n    Modules\n    LeaderboardModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LeaderboardModule\n\n\n\ncluster_LeaderboardModule_providers\n\n\n\ncluster_LeaderboardModule_exports\n\n\n\n\nLeaderboardService \n\nLeaderboardService \n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nLeaderboardService  -->\n\nLeaderboardModule->LeaderboardService \n\n\n\n\n\nLeaderboardService\n\nLeaderboardService\n\nLeaderboardModule -->\n\nLeaderboardService->LeaderboardModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            LeaderboardService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            LeaderboardController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            LeaderboardService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { LeaderboardService } from './leaderboard.service';\nimport { RedisModule } from 'nestjs-redis';\nimport { LeaderboardController } from './leaderboard.controller';\n\n@Module({\n  imports: [\n    RedisModule.register({\n      url: process.env.REDIS_URL || 'redis://127.0.0.1:6379/0',\n      keyPrefix: 'lb:',\n    }),\n  ],\n  providers: [LeaderboardService],\n  controllers: [LeaderboardController],\n  exports: [LeaderboardService],\n})\nexport class LeaderboardModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LeaderboardService.html":{"url":"injectables/LeaderboardService.html","title":"injectable - LeaderboardService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LeaderboardService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getEntries\n                            \n                            \n                                    Async\n                                getEntry\n                            \n                            \n                                    Async\n                                updateEntry\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(redisService: RedisService)\n                    \n                \n                        \n                            \n                                Defined in src/core/leaderboard/leaderboard.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        redisService\n                                                  \n                                                        \n                                                                    RedisService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntries(leaderboardId: string, options?: literal type)\n                \n            \n\n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.service.ts:45\n                \n            \n\n\n            \n                \n                    Get entries in leaderboard\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    options\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntry(leaderboardId: string, userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.service.ts:19\n                \n            \n\n\n            \n                \n                    Get entry of user in a leaderboard\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEntry(leaderboardId: string, userId: string, score: number)\n                \n            \n\n\n            \n                \n                    Defined in src/core/leaderboard/leaderboard.service.ts:99\n                \n            \n\n\n            \n                \n                    Update users score in leaderboard\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    leaderboardId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    score\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\n\nexport class _BaseLeaderboardException extends Error {}\nexport class LeaderboardEntryNotFoundError extends _BaseLeaderboardException {}\nexport class CouldNotUpdateLeaderboardEntryError extends _BaseLeaderboardException {}\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(private readonly redisService: RedisService) {}\n\n  /**\n   * Get entry of user in a leaderboard\n   * @param leaderboardId\n   * @param userId\n   */\n  async getEntry(\n    leaderboardId: string,\n    userId: string,\n  ): Promise {\n    const client = this.redisService.getClient();\n    const [score, rank] = await Promise.all([\n      client.zscore(leaderboardId, userId),\n      client.zrevrank(leaderboardId, userId),\n    ]);\n    if (score == null || rank == null) {\n      throw new LeaderboardEntryNotFoundError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" was not found`,\n      );\n    }\n    return {\n      userId: userId,\n      score: Number(score),\n      rank: Number(rank),\n    };\n  }\n\n  /**\n   * Get entries in leaderboard\n   * @param leaderboardId\n   * @param options\n   */\n  async getEntries(\n    leaderboardId: string,\n    options?: {\n      offset: string;\n      limit: string;\n    },\n  ): Promise {\n    const client = this.redisService.getClient();\n\n    let start = 0;\n    let stop = -1;\n\n    let normalizedOffset = null;\n    let normalizedLimit = null;\n\n    if (options.offset && isFinite(Number(options.offset))) {\n      normalizedOffset = Number(options.offset);\n      start = normalizedOffset;\n    }\n    if (options.limit && isFinite(Number(options.limit))) {\n      normalizedLimit = Number(options.limit);\n      stop = start + Number(options.limit) - 1;\n    }\n\n    const result = await client.zrevrange(\n      leaderboardId,\n      start,\n      stop,\n      'WITHSCORES',\n    );\n\n    // construct entries array\n    const entries: LeaderboardEntryDto[] = [];\n    for (let i = 0; i  {\n    const client = this.redisService.getClient();\n\n    const updatedEntryCount = await client.zadd(\n      leaderboardId,\n      'GT',\n      score,\n      userId,\n    );\n    if (updatedEntryCount !== 1) {\n      throw new CouldNotUpdateLeaderboardEntryError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" could not be updated with score \"${score}\"`,\n      );\n    }\n\n    return this.getEntry(leaderboardId, userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MembershipDto.html":{"url":"classes/MembershipDto.html","title":"class - MembershipDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MembershipDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/membership.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                membership\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            membership\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         GroupMember\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/membership.dto.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GroupMember } from '../entities/group-member.entity';\n\nexport class MembershipDto {\n  membership: GroupMember;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MembershipsDto.html":{"url":"classes/MembershipsDto.html","title":"class - MembershipsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MembershipsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/memberships.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                count\n                            \n                            \n                                memberships\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            count\n                            \n                        \n                    \n                \n                        \n                            \n                                    Defined in src/core/group/dto/memberships.dto.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            memberships\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GroupMember[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/group/dto/memberships.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { GroupMember } from '../entities/group-member.entity';\n\nexport class MembershipsDto {\n  count;\n  memberships: GroupMember[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotGroupAdminError.html":{"url":"classes/NotGroupAdminError.html","title":"class - NotGroupAdminError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotGroupAdminError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotGroupMemberError.html":{"url":"classes/NotGroupMemberError.html","title":"class - NotGroupMemberError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotGroupMemberError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotInvitedToGroupError.html":{"url":"classes/NotInvitedToGroupError.html","title":"class - NotInvitedToGroupError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotInvitedToGroupError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                        _BaseGroupException\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Profile.html":{"url":"classes/Profile.html","title":"class - Profile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Profile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/entities/profile.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                avatarUrl\n                            \n                            \n                                    Optional\n                                createdAt\n                            \n                            \n                                displayName\n                            \n                            \n                                    Optional\n                                language\n                            \n                            \n                                    Optional\n                                level\n                            \n                            \n                                    Optional\n                                location\n                            \n                            \n                                    Optional\n                                updatedAt\n                            \n                            \n                                    Optional\n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            avatarUrl\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            displayName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'text'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            language\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            level\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'integer', default: 1})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            location\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'text', nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/entities/profile.entity.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  Index,\n  JoinColumn,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Account } from '../../../core/account/entities/account.entity';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n@Entity()\nexport class Profile {\n  @ApiProperty()\n  @PrimaryColumn()\n  userId: string;\n\n  @ApiProperty()\n  @Column({ type: 'text' })\n  displayName: string;\n\n  @ApiPropertyOptional()\n  @Column({ type: 'text', nullable: true })\n  avatarUrl?: string | null;\n\n  @ApiProperty()\n  @Column({ type: 'integer', default: 1 })\n  level?: number | null;\n\n  @Column({ type: 'text', nullable: true })\n  location?: string | null;\n\n  @Column({ type: 'text', nullable: true })\n  language?: string | null;\n\n  @ApiPropertyOptional()\n  @OneToOne(() => Account)\n  @JoinColumn()\n  user?: string;\n\n  @ApiProperty()\n  @CreateDateColumn()\n  createdAt?: Date;\n\n  @ApiProperty()\n  @UpdateDateColumn()\n  updatedAt?: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileAlreadyExistsError.html":{"url":"classes/ProfileAlreadyExistsError.html","title":"class - ProfileAlreadyExistsError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileAlreadyExistsError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/profile.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Profile } from './entities/profile.entity';\n\nexport class ProfileAlreadyExistsError extends Error {}\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n  ) {}\n\n  async create(\n    userId: string,\n    createProfileDto: CreateProfileDto,\n  ): Promise {\n    let profile = await this.profileRepository.findOne(userId);\n    if (profile != null) {\n      throw new ProfileAlreadyExistsError();\n    }\n\n    profile = new Profile();\n    profile.userId = userId;\n    profile.displayName = createProfileDto.displayName;\n    profile.avatarUrl = createProfileDto?.avatarUrl;\n    profile.language = createProfileDto?.language;\n    profile.location = createProfileDto?.location;\n    return this.profileRepository.save(profile);\n  }\n\n  async findOne(userId: string): Promise {\n    return this.profileRepository.findOne(userId);\n  }\n\n  async update(\n    userId: string,\n    updateProfileDto: UpdateProfileDto,\n  ): Promise {\n    const profile = await this.profileRepository.findOne(userId);\n    if (profile == null) {\n      return;\n    }\n    profile.displayName = updateProfileDto?.displayName ?? profile.displayName;\n    profile.avatarUrl = updateProfileDto?.avatarUrl ?? profile.avatarUrl;\n    profile.language = updateProfileDto?.language ?? profile.language;\n    profile.location = updateProfileDto?.location ?? profile.location;\n    return this.profileRepository.save(profile);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProfileController.html":{"url":"controllers/ProfileController.html","title":"controller - ProfileController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProfileController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/profile.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                profiles\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findMe\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createProfileDto: CreateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create new profile'})@ApiCreatedResponse({type: ProfileDto})@ApiBadRequestResponse()@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/extensions/profile/profile.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createProfileDto\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find profile of current user'})@UseGuards(JwtAuthGuard)@ApiBearerAuth()@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/extensions/profile/profile.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find profile of any user'})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':userId')\n                \n            \n\n            \n                \n                    Defined in src/extensions/profile/profile.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, updateProfileDto: UpdateProfileDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update profile of current user'})@UseGuards(JwtAuthGuard)@ApiBearerAuth()@Patch('me')\n                \n            \n\n            \n                \n                    Defined in src/extensions/profile/profile.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProfileDto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Put,\n  Param,\n  Request,\n  Delete,\n  Patch,\n  UseGuards,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { ProfileAlreadyExistsError, ProfileService } from './profile.service';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport { Profile } from './entities/profile.entity';\nimport { ProfileDto } from './dto/profile.dto';\nimport {\n  ApiBadRequestResponse,\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n} from '@nestjs/swagger';\n\n@ApiTags('profiles')\n@Controller('profiles')\nexport class ProfileController {\n  constructor(private readonly profileService: ProfileService) {}\n\n  @ApiOperation({ summary: 'Create new profile' })\n  @ApiCreatedResponse({ type: ProfileDto })\n  @ApiBadRequestResponse()\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(\n    @Request() req,\n    @Body() createProfileDto: CreateProfileDto,\n  ): Promise {\n    try {\n      const userId = req.user.sub;\n      return {\n        profile: await this.profileService.create(userId, createProfileDto),\n      };\n    } catch (e) {\n      if (e instanceof ProfileAlreadyExistsError) {\n        throw new HttpException(\n          'Profile already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  @ApiOperation({ summary: 'Find profile of current user' })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Get('me')\n  async findMe(@Request() req): Promise {\n    const userId = req.user.sub;\n    return {\n      profile: await this.profileService.findOne(userId),\n    };\n  }\n\n  @ApiOperation({ summary: 'Find profile of any user' })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':userId')\n  async findOne(@Param('userId') userId: string): Promise {\n    return {\n      profile: await this.profileService.findOne(userId),\n    };\n  }\n\n  @ApiOperation({ summary: 'Update profile of current user' })\n  @UseGuards(JwtAuthGuard)\n  @ApiBearerAuth()\n  @Patch('me')\n  async update(\n    @Request() req,\n    @Body() updateProfileDto: UpdateProfileDto,\n  ): Promise {\n    const userId = req.user.sub;\n    return {\n      profile: await this.profileService.update(userId, updateProfileDto),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ProfileDto.html":{"url":"classes/ProfileDto.html","title":"class - ProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/dto/profile.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                profile\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            profile\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Profile\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/profile/dto/profile.dto.ts:6\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Profile } from '../entities/profile.entity';\n\nexport class ProfileDto {\n  @ApiPropertyOptional()\n  profile?: Profile;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfileModule.html":{"url":"modules/ProfileModule.html","title":"module - ProfileModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfileModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\n\nProfileService \n\nProfileService \n\n\n\nProfileModule\n\nProfileModule\n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/extensions/profile/profile.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProfileController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ProfileService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { ProfileController } from './profile.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Profile } from './entities/profile.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Profile])],\n  controllers: [ProfileController],\n  providers: [ProfileService],\n  exports: [ProfileService],\n})\nexport class ProfileModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProfileService.html":{"url":"injectables/ProfileService.html","title":"injectable - ProfileService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ProfileService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/profile.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(profileRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/extensions/profile/profile.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        profileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createProfileDto: CreateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/profile/profile.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createProfileDto\n                                    \n                                                CreateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/profile/profile.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(userId: string, updateProfileDto: UpdateProfileDto)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/profile/profile.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateProfileDto\n                                    \n                                                UpdateProfileDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateProfileDto } from './dto/create-profile.dto';\nimport { UpdateProfileDto } from './dto/update-profile.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Profile } from './entities/profile.entity';\n\nexport class ProfileAlreadyExistsError extends Error {}\n\n@Injectable()\nexport class ProfileService {\n  constructor(\n    @InjectRepository(Profile)\n    private readonly profileRepository: Repository,\n  ) {}\n\n  async create(\n    userId: string,\n    createProfileDto: CreateProfileDto,\n  ): Promise {\n    let profile = await this.profileRepository.findOne(userId);\n    if (profile != null) {\n      throw new ProfileAlreadyExistsError();\n    }\n\n    profile = new Profile();\n    profile.userId = userId;\n    profile.displayName = createProfileDto.displayName;\n    profile.avatarUrl = createProfileDto?.avatarUrl;\n    profile.language = createProfileDto?.language;\n    profile.location = createProfileDto?.location;\n    return this.profileRepository.save(profile);\n  }\n\n  async findOne(userId: string): Promise {\n    return this.profileRepository.findOne(userId);\n  }\n\n  async update(\n    userId: string,\n    updateProfileDto: UpdateProfileDto,\n  ): Promise {\n    const profile = await this.profileRepository.findOne(userId);\n    if (profile == null) {\n      return;\n    }\n    profile.displayName = updateProfileDto?.displayName ?? profile.displayName;\n    profile.avatarUrl = updateProfileDto?.avatarUrl ?? profile.avatarUrl;\n    profile.language = updateProfileDto?.language ?? profile.language;\n    profile.location = updateProfileDto?.location ?? profile.location;\n    return this.profileRepository.save(profile);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ReferenceFriendDto.html":{"url":"classes/ReferenceFriendDto.html","title":"class - ReferenceFriendDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ReferenceFriendDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/dto/reference-friend.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/friend/dto/reference-friend.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ReferenceFriendDto {\n  id: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfReferenceError.html":{"url":"classes/SelfReferenceError.html","title":"class - SelfReferenceError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfReferenceError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/friend.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Friendship } from './entities/friendship.entity';\nimport { Repository } from 'typeorm';\nimport { FriendshipComposite } from './entities/friendship-composite-view.entity';\nimport { FriendshipOneWayRelationStatus } from './enums/friendship-one-way-relation-status.enum';\nimport { FriendshipTwoWayRelationStatus } from './enums/friendship-two-way-relation-status.enum';\nimport { FriendshipTwoWayRelationStatusesDto } from './dto/friendship-two-way-relation-statuses.dto';\n\nexport class SelfReferenceError extends Error {}\n\n@Injectable()\nexport class FriendService {\n  constructor(\n    @InjectRepository(Friendship)\n    private friendshipRepository: Repository,\n    @InjectRepository(FriendshipComposite)\n    private friendshipCompositeRepository: Repository,\n  ) {}\n\n  /**\n   * Derive the two-way relation status given the normal and inverse one-way relation statuses\n   * @param normalRelationStatus One-way relation status from a to b\n   * @param inverseRelationStatus One-way relation status from b to a\n   */\n  private static _deriveTwoWayRelationStatus(\n    normalRelationStatus: FriendshipOneWayRelationStatus,\n    inverseRelationStatus: FriendshipOneWayRelationStatus,\n  ): FriendshipTwoWayRelationStatus | null {\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.Ok &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.Ok\n    ) {\n      return FriendshipTwoWayRelationStatus.Friends;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.Ok &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.NoAction\n    ) {\n      return FriendshipTwoWayRelationStatus.SentRequest;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.NoAction &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.Ok\n    ) {\n      return FriendshipTwoWayRelationStatus.ReceivedRequest;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.DidBlock &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.GotBlocked\n    ) {\n      return FriendshipTwoWayRelationStatus.BlockedByYou;\n    }\n    if (\n      normalRelationStatus === FriendshipOneWayRelationStatus.GotBlocked &&\n      inverseRelationStatus === FriendshipOneWayRelationStatus.DidBlock\n    ) {\n      return FriendshipTwoWayRelationStatus.BlockedByOther;\n    }\n    // no complete relation\n    return null;\n  }\n\n  /**\n   * Get both one-way relation statuses from a to b and from b to a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  private async _getNormalAndInverse(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return Promise.all([\n      this.friendshipRepository.findOne({ aId: aId, bId: bId }),\n      this.friendshipRepository.findOne({ aId: bId, bId: aId }),\n    ]);\n  }\n\n  /**\n   * Get the one-way relation status of a to b\n   * @param aId Account UUID for the acting user\n   * @param bId Account UUID for the referred user\n   */\n  async get(aId: string, bId: string): Promise {\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    return FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n  }\n\n  /**\n   * Get all two-way relation statuses of a user\n   * @param aId\n   */\n  async getAll(aId: string): Promise {\n    const dto = new FriendshipTwoWayRelationStatusesDto();\n    const friendshipComposites = await this.friendshipCompositeRepository.find({\n      where: { aId: aId },\n    });\n    for (const friendshipComposite of friendshipComposites) {\n      const finalStatus = FriendService._deriveTwoWayRelationStatus(\n        friendshipComposite?.statusAtoB,\n        friendshipComposite?.statusBtoA,\n      );\n      const id = friendshipComposite.bId;\n      switch (finalStatus) {\n        case FriendshipTwoWayRelationStatus.SentRequest:\n          dto.sentRequests.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.ReceivedRequest:\n          dto.receivedRequests.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.Friends:\n          dto.friends.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.BlockedByYou:\n          dto.blockedByYou.push(id);\n          break;\n        case FriendshipTwoWayRelationStatus.BlockedByOther:\n          dto.blockedByOther.push(id);\n          break;\n      }\n    }\n    return dto;\n  }\n\n  /**\n   * Individually set relations between two users\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   * @param normalStatus One way friendship relation from a to b\n   * @param inverseStatus One way friendship relation from b to a\n   * @private\n   */\n  private async _setRelations(\n    aId: string,\n    bId: string,\n    normalStatus: FriendshipOneWayRelationStatus,\n    inverseStatus: FriendshipOneWayRelationStatus,\n  ): Promise {\n    const normal = new Friendship();\n    normal.aId = aId;\n    normal.bId = bId;\n    normal.status = normalStatus;\n\n    const inverse = new Friendship();\n    inverse.aId = bId;\n    inverse.bId = aId;\n    inverse.status = inverseStatus;\n\n    const [savedNormal, savedInverse] = await this.friendshipRepository.save([\n      normal,\n      inverse,\n    ]);\n    return FriendService._deriveTwoWayRelationStatus(\n      savedNormal?.status,\n      savedInverse?.status,\n    );\n  }\n\n  /**\n   * Remove all relations between a and b\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   * @private\n   */\n  private async _removeRelations(aId: string, bId: string): Promise {\n    await Promise.all([\n      this.friendshipRepository.delete({ aId: aId, bId: bId }),\n      this.friendshipRepository.delete({ aId: bId, bId: aId }),\n    ]);\n  }\n\n  /**\n   * Set both one-way relations from a to b represent a friend request\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async _sendFriendRequest(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return this._setRelations(\n      aId,\n      bId,\n      FriendshipOneWayRelationStatus.Ok,\n      FriendshipOneWayRelationStatus.NoAction,\n    );\n  }\n\n  /**\n   * Set two-way relation as friends\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async _acceptFriendRequest(\n    aId: string,\n    bId: string,\n  ): Promise {\n    return this._setRelations(\n      aId,\n      bId,\n      FriendshipOneWayRelationStatus.Ok,\n      FriendshipOneWayRelationStatus.Ok,\n    );\n  }\n\n  /**\n   * Send friend request from a to b, or accept friend request from b to a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async add(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n      case FriendshipTwoWayRelationStatus.SentRequest:\n      case FriendshipTwoWayRelationStatus.Friends:\n        // blocked status blocks any other action, return blocked status and do nothing.\n        return currentFinalStatus;\n      case FriendshipTwoWayRelationStatus.ReceivedRequest:\n        return this._acceptFriendRequest(aId, bId);\n      case null:\n        return this._sendFriendRequest(aId, bId);\n    }\n  }\n\n  /**\n   * Remove friendship of a and b or discard friend request from b\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async remove(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n        // blocked status blocks any other action, return blocked status and do nothing.\n        return currentFinalStatus;\n      default:\n        await this._removeRelations(aId, bId);\n        return null;\n    }\n  }\n\n  /**\n   * Block b for a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async block(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      // already blocked statuses\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n      case FriendshipTwoWayRelationStatus.BlockedByOther:\n        return currentFinalStatus;\n      default:\n        return this._setRelations(\n          aId,\n          bId,\n          FriendshipOneWayRelationStatus.DidBlock,\n          FriendshipOneWayRelationStatus.GotBlocked,\n        );\n    }\n  }\n\n  /**\n   * Unblock b for a\n   * @param aId Account UUID for acting user\n   * @param bId Account UUID for referred user\n   */\n  async unblock(\n    aId: string,\n    bId: string,\n  ): Promise {\n    if (aId === bId) {\n      throw new SelfReferenceError(\n        `${aId} cannot reference itself for friendship operations`,\n      );\n    }\n    const [normal, inverse] = await this._getNormalAndInverse(aId, bId);\n    const currentFinalStatus = FriendService._deriveTwoWayRelationStatus(\n      normal?.status,\n      inverse?.status,\n    );\n    switch (currentFinalStatus) {\n      case FriendshipTwoWayRelationStatus.BlockedByYou:\n        await this._removeRelations(aId, bId);\n        return null;\n      default:\n        return currentFinalStatus;\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelfReferenceErrorFilter.html":{"url":"classes/SelfReferenceErrorFilter.html","title":"class - SelfReferenceErrorFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelfReferenceErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/friend/self-reference-error.filter.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: SelfReferenceError, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/friend/self-reference-error.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                SelfReferenceError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, ExceptionFilter, HttpStatus } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { SelfReferenceError } from './friend.service';\n\nexport class SelfReferenceErrorFilter implements ExceptionFilter {\n  catch(exception: SelfReferenceError, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse();\n    const request = ctx.getRequest();\n    const status = HttpStatus.BAD_REQUEST;\n    const name = exception;\n    const message = exception.message;\n\n    response.status(status).json({\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      error: {\n        name: name,\n        message: message,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAccountDto.html":{"url":"classes/UpdateAccountDto.html","title":"class - UpdateAccountDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/account/dto/update-account.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateAccountDto } from './create-account.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateAccountDto extends PartialType(CreateAccountDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEntryDto.html":{"url":"classes/UpdateEntryDto.html","title":"class - UpdateEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/dto/update-entry.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                score\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            score\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/core/leaderboard/dto/update-entry.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class UpdateEntryDto {\n  score: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateGroupDto.html":{"url":"classes/UpdateGroupDto.html","title":"class - UpdateGroupDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateGroupDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/dto/update-group.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateGroupDto } from './create-group.dto';\n\nexport class UpdateGroupDto extends PartialType(CreateGroupDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/profile/dto/update-profile.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateProfileDto } from './create-profile.dto';\nimport { PartialType } from '@nestjs/swagger';\n\nexport class UpdateProfileDto extends PartialType(CreateProfileDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Wallet.html":{"url":"classes/Wallet.html","title":"class - Wallet","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Wallet\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/wallet/entities/wallet.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdAt\n                            \n                            \n                                normalCurrency\n                            \n                            \n                                premiumCurrency\n                            \n                            \n                                updatedAt\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            normalCurrency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'integer', nullable: false, default: 1000})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            premiumCurrency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@Column({type: 'integer', nullable: false, default: 50})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updatedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional()@OneToOne(undefined, {onDelete: 'CASCADE'})@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/extensions/wallet/entities/wallet.entity.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryColumn,\n  UpdateDateColumn,\n} from 'typeorm';\nimport { Account } from '../../../core/account/entities/account.entity';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\n@Entity()\nexport class Wallet {\n  @ApiProperty()\n  @PrimaryColumn()\n  userId: string;\n\n  @ApiProperty()\n  @Column({ type: 'integer', nullable: false, default: 1000 })\n  normalCurrency: number;\n\n  @ApiProperty()\n  @Column({ type: 'integer', nullable: false, default: 50 })\n  premiumCurrency: number;\n\n  @ApiPropertyOptional()\n  @OneToOne(() => Account, { onDelete: 'CASCADE' })\n  @JoinColumn()\n  user: Account;\n\n  @ApiProperty()\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @ApiProperty()\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WalletController.html":{"url":"controllers/WalletController.html","title":"controller - WalletController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WalletController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/wallet/wallet.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                wallets\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findMe\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findMe\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findMe(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get current users wallet info '})@ApiOkResponse({type: Wallet})@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get('me')\n                \n            \n\n            \n                \n                    Defined in src/extensions/wallet/wallet.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(req, userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get friends wallet info '})@ApiOkResponse({type: Wallet})@ApiForbiddenResponse()@ApiBearerAuth()@UseGuards(JwtAuthGuard)@Get(':userId')\n                \n            \n\n            \n                \n                    Defined in src/extensions/wallet/wallet.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  HttpException,\n  HttpStatus,\n  Param,\n  ParseUUIDPipe,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { WalletService } from './wallet.service';\nimport { JwtAuthGuard } from '../../common/guard/jwt-auth.guard';\nimport {\n  ApiBearerAuth,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Wallet } from './entities/wallet.entity';\nimport { FriendService } from '../../core/friend/friend.service';\nimport { FriendshipTwoWayRelationStatus } from '../../core/friend/enums/friendship-two-way-relation-status.enum';\n\n@ApiTags('wallets')\n@Controller('wallets')\nexport class WalletController {\n  constructor(\n    private readonly walletService: WalletService,\n    private readonly friendService: FriendService,\n  ) {}\n\n  @ApiOperation({ summary: 'Get current users wallet info ' })\n  @ApiOkResponse({ type: Wallet })\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('me')\n  async findMe(@Request() req): Promise {\n    const userId = req.user.sub;\n    return this.walletService.findOrCreate(userId);\n  }\n\n  @ApiOperation({ summary: 'Get friends wallet info ' })\n  @ApiOkResponse({ type: Wallet })\n  @ApiForbiddenResponse()\n  @ApiBearerAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':userId')\n  async findOne(\n    @Request() req,\n    @Param('userId', ParseUUIDPipe) userId: string,\n  ): Promise {\n    const requestingUserId = req.user.sub;\n    // check\n    const friendshipStatus = await this.friendService.get(\n      requestingUserId,\n      userId,\n    );\n    if (friendshipStatus !== FriendshipTwoWayRelationStatus.Friends) {\n      throw new HttpException(\n        `Not friends, cannot see wallet`,\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    return this.walletService.findOrCreate(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WalletModule.html":{"url":"modules/WalletModule.html","title":"module - WalletModule","body":"\n                   \n\n\n\n\n    Modules\n    WalletModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_WalletModule\n\n\n\ncluster_WalletModule_imports\n\n\n\ncluster_WalletModule_exports\n\n\n\ncluster_WalletModule_providers\n\n\n\n\nCoreModule\n\nCoreModule\n\n\n\nWalletModule\n\nWalletModule\n\nWalletModule -->\n\nCoreModule->WalletModule\n\n\n\n\n\nWalletService \n\nWalletService \n\nWalletService  -->\n\nWalletModule->WalletService \n\n\n\n\n\nWalletService\n\nWalletService\n\nWalletModule -->\n\nWalletService->WalletModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/extensions/wallet/wallet.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WalletService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WalletController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CoreModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            WalletService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { WalletService } from './wallet.service';\nimport { WalletController } from './wallet.controller';\nimport { CoreModule } from '../../core/core.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Wallet } from './entities/wallet.entity';\nimport { FriendService } from '../../core/friend/friend.service';\n\n@Module({\n  imports: [CoreModule, TypeOrmModule.forFeature([Wallet])],\n  controllers: [WalletController],\n  providers: [WalletService],\n  exports: [WalletService],\n})\nexport class WalletModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WalletService.html":{"url":"injectables/WalletService.html","title":"injectable - WalletService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  WalletService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/extensions/wallet/wallet.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                findOrCreate\n                            \n                            \n                                    Async\n                                updateNormalCurrency\n                            \n                            \n                                    Async\n                                updatePremiumCurrency\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(walletRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/extensions/wallet/wallet.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        walletRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOrCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOrCreate(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/wallet/wallet.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateNormalCurrency\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateNormalCurrency(userId: string, newAmount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/wallet/wallet.service.ts:28\n                \n            \n\n\n            \n                \n                    Set new amount for the normal currency\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newAmount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePremiumCurrency\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePremiumCurrency(userId: string, newAmount: number)\n                \n            \n\n\n            \n                \n                    Defined in src/extensions/wallet/wallet.service.ts:42\n                \n            \n\n\n            \n                \n                    Set new amount for the premium currency\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    newAmount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Wallet } from './entities/wallet.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class WalletService {\n  constructor(\n    @InjectRepository(Wallet) private walletRepository: Repository,\n  ) {}\n\n  async findOrCreate(userId: string): Promise {\n    const wallet = await this.walletRepository.findOne(userId);\n    if (wallet != null) {\n      return wallet;\n    }\n\n    const newWallet = new Wallet();\n    newWallet.userId = userId;\n    return this.walletRepository.save(newWallet);\n  }\n\n  /**\n   * Set new amount for the normal currency\n   * @param userId\n   * @param newAmount\n   */\n  async updateNormalCurrency(\n    userId: string,\n    newAmount: number,\n  ): Promise {\n    const wallet = await this.findOrCreate(userId);\n    wallet.normalCurrency = newAmount;\n    return this.walletRepository.save(wallet);\n  }\n\n  /**\n   * Set new amount for the premium currency\n   * @param userId\n   * @param newAmount\n   */\n  async updatePremiumCurrency(\n    userId: string,\n    newAmount: number,\n  ): Promise {\n    const wallet = await this.findOrCreate(userId);\n    wallet.premiumCurrency = newAmount;\n    return this.walletRepository.save(wallet);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/_BaseGroupException.html":{"url":"classes/_BaseGroupException.html","title":"class - _BaseGroupException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  _BaseGroupException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/group/group.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ILike, Repository } from 'typeorm';\nimport { Group } from './entities/group.entity';\nimport { GroupMember } from './entities/group-member.entity';\nimport { GroupMembershipStatus } from './enums/group-membership-status.enum';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\nexport class _BaseGroupException extends Error {}\n\nexport class GroupDoesNotExistError extends _BaseGroupException {}\nexport class NotGroupAdminError extends _BaseGroupException {}\nexport class BannedFromGroupError extends _BaseGroupException {}\nexport class NotInvitedToGroupError extends _BaseGroupException {}\nexport class NotGroupMemberError extends _BaseGroupException {}\nexport class CannotDeleteGroupError extends _BaseGroupException {}\nexport class CannotLeaveGroupError extends _BaseGroupException {}\nexport class CannotBanError extends _BaseGroupException {}\nexport class CannotKickError extends _BaseGroupException {}\n\n@Injectable()\nexport class GroupService {\n  constructor(\n    @InjectRepository(Group)\n    private readonly groupRepository: Repository,\n    @InjectRepository(GroupMember)\n    private readonly groupMemberRepository: Repository,\n  ) {}\n\n  /**\n   * Create a group\n   * @param creatorId\n   * @param groupName\n   * @param inviteOnly\n   */\n  async create(\n    creatorId: string,\n    groupName: string,\n    inviteOnly = false,\n  ): Promise {\n    const group = new Group();\n    group.name = groupName;\n    group.inviteOnly = inviteOnly;\n    const savedGroup = await this.groupRepository.save(group);\n\n    const groupMember = new GroupMember();\n    groupMember.group = savedGroup;\n    groupMember.memberId = creatorId;\n    groupMember.membershipStatus = GroupMembershipStatus.Admin;\n    await this.groupMemberRepository.save(groupMember);\n    return savedGroup;\n  }\n\n  /**\n   * Find a group and return group info if exists\n   * @param groupId\n   * @throws GroupDoesNotExistError\n   */\n  async findOne(groupId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return group;\n  }\n\n  /**\n   * Find groups, optionally filter by name and invite only properies\n   * @param options\n   */\n  async findMany(options: {\n    name?: string;\n    inviteOnly?: boolean;\n  }): Promise {\n    return this.groupRepository.findAndCount({\n      where: {\n        // falsy conditions should be discarded\n        ...(options.name && { name: ILike(`%${options.name}%`) }),\n        // falsy values will cause errors\n        ...(options.inviteOnly != null && { inviteOnly: options.inviteOnly }),\n      },\n    });\n  }\n\n  /**\n   * Update group\n   * @param groupId\n   * @param actingUserId\n   * @param updateGroupDto\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async update(\n    groupId: string,\n    actingUserId: string,\n    updateGroupDto: UpdateGroupDto,\n  ): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    group.name = updateGroupDto.name ?? group.name;\n    group.inviteOnly = updateGroupDto.inviteOnly ?? group.inviteOnly;\n    return this.groupRepository.save(group);\n  }\n\n  /**\n   * Delete group\n   * @param groupId\n   * @param actingUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   * @throws CannotDeleteGroupError\n   */\n  async delete(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot delete non existing group ${groupId}`,\n      );\n    }\n    const groupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (groupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `User \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n    const adminCount = await this.groupMemberRepository.count({\n      groupId: groupId,\n      membershipStatus: GroupMembershipStatus.Admin,\n    });\n    if (adminCount === 1) {\n      throw new CannotDeleteGroupError(\n        `Acting user \"${actingUserId}\" cannot delete group \"${groupId}\" with the presence of other admins`,\n      );\n    }\n    await this.groupRepository.delete({ id: groupId });\n  }\n\n  /**\n   * Invite user to group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupMemberError\n   * @throws NotGroupAdminError\n   */\n  async invite(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(\n        `User \"${targetUserId}\" cannot be invited to non existing group ${groupId}`,\n      );\n    }\n\n    // check if the acting member is an admin\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Invited user \"${targetUserId}\" is banned from group \"${groupId}\", unban first to invite`,\n      );\n    }\n    if (\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Member ||\n      targetGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n    ) {\n      // invited user already a member or previously invited\n      return targetGroupMember;\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = targetUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Invited;\n\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Find groups of user\n   * @param userId\n   */\n  async findMembershipsOfUser(userId: string): Promise {\n    return this.groupMemberRepository.find({\n      where: { memberId: userId },\n      relations: ['group'],\n    });\n  }\n\n  /**\n   * Join a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async join(groupId: string, actingUserId: string): Promise {\n    const group = await this.groupRepository.findOne({ id: groupId });\n    if (!group) {\n      throw new GroupDoesNotExistError(\n        `User \"${actingUserId}\" cannot join non existing group ${groupId}`,\n      );\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    // banned\n    if (actingGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `User \"${actingUserId}\" is banned from group \"${groupId}\"`,\n      );\n    }\n    // already a member\n    if (\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Admin ||\n      actingGroupMember?.membershipStatus === GroupMembershipStatus.Member\n    ) {\n      return actingGroupMember;\n    }\n    // trying to join an invite only server\n    if (group.inviteOnly) {\n      if (\n        actingGroupMember?.membershipStatus === GroupMembershipStatus.Invited\n      ) {\n        // has invite\n        actingGroupMember.membershipStatus = GroupMembershipStatus.Member;\n        // save and return;\n        return this.groupMemberRepository.save(actingGroupMember);\n      } else {\n        // no invitation\n        throw new NotInvitedToGroupError(\n          `User \"${actingUserId}\" was not invited to group \"${groupId}\"`,\n        );\n      }\n    }\n\n    const newMember = new GroupMember();\n    newMember.groupId = groupId;\n    newMember.memberId = actingUserId;\n    newMember.membershipStatus = GroupMembershipStatus.Member;\n    return this.groupMemberRepository.save(newMember);\n  }\n\n  /**\n   * Get member status\n   * @param groupId\n   * @param memberId\n   */\n  async getMember(groupId: string, memberId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: memberId,\n    });\n  }\n\n  // read group members\n  async getMembers(groupId: string): Promise {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n    return [group.members, group.members.length];\n  }\n\n  /**\n   * Leave a group\n   * @param groupId\n   * @param actingUserId\n   */\n  async leave(groupId: string, actingUserId: string) {\n    const group = await this.groupRepository.findOne(groupId, {\n      relations: ['members'],\n    });\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n\n    if (actingGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Acting user \"${actingUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    if (actingGroupMember.membershipStatus == GroupMembershipStatus.Banned) {\n      throw new BannedFromGroupError(\n        `Acting user \"${actingUserId}\" is not banned from group \"${groupId}\"`,\n      );\n    }\n\n    if (actingGroupMember.membershipStatus === GroupMembershipStatus.Admin) {\n      const currentAdminCount = await this.groupMemberRepository.count({\n        groupId: groupId,\n        membershipStatus: GroupMembershipStatus.Admin,\n      });\n      // last member as admin\n      if (currentAdminCount === 1) {\n        throw new CannotLeaveGroupError(\n          `Acting user \"${actingUserId}\" cannot leave group \"${groupId}\" as the last admin, should either assign someone else as admin and leave or delete the group`,\n        );\n      }\n    }\n\n    await this.groupMemberRepository.remove(actingGroupMember);\n  }\n\n  /**\n   * Ban user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotBanError\n   */\n  async ban(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotBanError(\n        `User to ban \"${targetUserId}\" is an admin in group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Banned) {\n      return targetGroupMember;\n    }\n    if (targetGroupMember == null) {\n      const newBan = new GroupMember();\n      newBan.groupId = groupId;\n      newBan.memberId = targetUserId;\n      newBan.membershipStatus = GroupMembershipStatus.Banned;\n      return this.groupMemberRepository.save(newBan);\n    }\n\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Banned;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n\n  /**\n   * Unban, kick or remove invitation of user from group\n   * @param groupId\n   * @param actingUserId\n   * @param targetUserId\n   * @throws GroupDoesNotExistError\n   * @throws NotGroupAdminError\n   * @throws CannotKickError\n   */\n  async removeMember(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember?.membershipStatus === GroupMembershipStatus.Admin) {\n      throw new CannotKickError(\n        `Target user \"${actingUserId}\" is an admin of group \"${groupId}\"`,\n      );\n    }\n    if (targetGroupMember == null) {\n      return;\n    }\n    await this.groupMemberRepository.remove(targetGroupMember);\n  }\n\n  async promoteToAdmin(\n    groupId: string,\n    actingUserId: string,\n    targetUserId: string,\n  ): Promise {\n    const group = await this.groupRepository.findOne(groupId);\n    if (group == null) {\n      throw new GroupDoesNotExistError(`Group \"${groupId}\" does not exist`);\n    }\n\n    const actingGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: actingUserId,\n    });\n    if (actingGroupMember?.membershipStatus !== GroupMembershipStatus.Admin) {\n      throw new NotGroupAdminError(\n        `Acting user \"${actingUserId}\" is not an admin of group \"${groupId}\"`,\n      );\n    }\n\n    const targetGroupMember = await this.groupMemberRepository.findOne({\n      groupId: groupId,\n      memberId: targetUserId,\n    });\n    if (targetGroupMember == null) {\n      throw new NotGroupMemberError(\n        `Target user \"${targetUserId}\" is not a member of group \"${groupId}\"`,\n      );\n    }\n    targetGroupMember.membershipStatus = GroupMembershipStatus.Admin;\n    return this.groupMemberRepository.save(targetGroupMember);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/_BaseLeaderboardException.html":{"url":"classes/_BaseLeaderboardException.html","title":"class - _BaseLeaderboardException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  _BaseLeaderboardException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/leaderboard/leaderboard.service.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { RedisService } from 'nestjs-redis';\nimport { LeaderboardEntryDto } from './dto/leaderboard-entry.dto';\nimport { LeaderboardEntriesDto } from './dto/leaderboard-entries.dto';\n\nexport class _BaseLeaderboardException extends Error {}\nexport class LeaderboardEntryNotFoundError extends _BaseLeaderboardException {}\nexport class CouldNotUpdateLeaderboardEntryError extends _BaseLeaderboardException {}\n\n@Injectable()\nexport class LeaderboardService {\n  constructor(private readonly redisService: RedisService) {}\n\n  /**\n   * Get entry of user in a leaderboard\n   * @param leaderboardId\n   * @param userId\n   */\n  async getEntry(\n    leaderboardId: string,\n    userId: string,\n  ): Promise {\n    const client = this.redisService.getClient();\n    const [score, rank] = await Promise.all([\n      client.zscore(leaderboardId, userId),\n      client.zrevrank(leaderboardId, userId),\n    ]);\n    if (score == null || rank == null) {\n      throw new LeaderboardEntryNotFoundError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" was not found`,\n      );\n    }\n    return {\n      userId: userId,\n      score: Number(score),\n      rank: Number(rank),\n    };\n  }\n\n  /**\n   * Get entries in leaderboard\n   * @param leaderboardId\n   * @param options\n   */\n  async getEntries(\n    leaderboardId: string,\n    options?: {\n      offset: string;\n      limit: string;\n    },\n  ): Promise {\n    const client = this.redisService.getClient();\n\n    let start = 0;\n    let stop = -1;\n\n    let normalizedOffset = null;\n    let normalizedLimit = null;\n\n    if (options.offset && isFinite(Number(options.offset))) {\n      normalizedOffset = Number(options.offset);\n      start = normalizedOffset;\n    }\n    if (options.limit && isFinite(Number(options.limit))) {\n      normalizedLimit = Number(options.limit);\n      stop = start + Number(options.limit) - 1;\n    }\n\n    const result = await client.zrevrange(\n      leaderboardId,\n      start,\n      stop,\n      'WITHSCORES',\n    );\n\n    // construct entries array\n    const entries: LeaderboardEntryDto[] = [];\n    for (let i = 0; i  {\n    const client = this.redisService.getClient();\n\n    const updatedEntryCount = await client.zadd(\n      leaderboardId,\n      'GT',\n      score,\n      userId,\n    );\n    if (updatedEntryCount !== 1) {\n      throw new CouldNotUpdateLeaderboardEntryError(\n        `Leaderboard entry of user \"${userId}\" in leaderboard \"${leaderboardId}\" could not be updated with score \"${score}\"`,\n      );\n    }\n\n    return this.getEntry(leaderboardId, userId);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.5.1\n        \n            @nestjs/core : ^7.5.1\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.5.1\n        \n            @nestjs/swagger : ^4.7.12\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            nestjs-redis : ^1.2.8\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.3\n        \n            swagger-ui-express : ^4.1.6\n        \n            typeorm : ^0.2.30\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            FriendshipOneWayRelationStatus   (src/.../friendship-one-way-relation-status.enum.ts)\n                        \n                        \n                            FriendshipTwoWayRelationStatus   (src/.../friendship-two-way-relation-status.enum.ts)\n                        \n                        \n                            GroupMembershipStatus   (src/.../group-membership-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/friend/enums/friendship-one-way-relation-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FriendshipOneWayRelationStatus\n                    \n                \n                        \n                            \n                                 Ok\n                            \n                        \n                        \n                            \n                                Value : ok\n                            \n                        \n                        \n                            \n                                 NoAction\n                            \n                        \n                        \n                            \n                                Value : noaction\n                            \n                        \n                        \n                            \n                                 DidBlock\n                            \n                        \n                        \n                            \n                                Value : didblock\n                            \n                        \n                        \n                            \n                                 GotBlocked\n                            \n                        \n                        \n                            \n                                Value : gotblocked\n                            \n                        \n            \n        \n\n    src/core/friend/enums/friendship-two-way-relation-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        FriendshipTwoWayRelationStatus\n                    \n                \n                        \n                            \n                                 Friends\n                            \n                        \n                        \n                            \n                                Value : friends\n                            \n                        \n                        \n                            \n                                 SentRequest\n                            \n                        \n                        \n                            \n                                Value : sentrequest\n                            \n                        \n                        \n                            \n                                 ReceivedRequest\n                            \n                        \n                        \n                            \n                                Value : receivedrequest\n                            \n                        \n                        \n                            \n                                 BlockedByOther\n                            \n                        \n                        \n                            \n                                Value : blockedbyother\n                            \n                        \n                        \n                            \n                                 BlockedByYou\n                            \n                        \n                        \n                            \n                                Value : blockedbyyou\n                            \n                        \n            \n        \n\n    src/core/group/enums/group-membership-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        GroupMembershipStatus\n                    \n                \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : groupadmin\n                            \n                        \n                        \n                            \n                                 Member\n                            \n                        \n                        \n                            \n                                Value : groupmember\n                            \n                        \n                        \n                            \n                                 Invited\n                            \n                        \n                        \n                            \n                                Value : groupinvited\n                            \n                        \n                        \n                            \n                                 Banned\n                            \n                        \n                        \n                            \n                                Value : groupbanned\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            _generateJwt   (src/.../auth.controller.ts)\n                        \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/account/auth.controller.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            _generateJwt\n                        \n                        \n                    \n                \n            \n            \n                \n_generateJwt(jwtService, account)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    jwtService\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    account\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCaterva\nGetting Started\nRequirements\n\nPostgres\nRedis\n\nAlternatively for quick local development run $ docker-compose up -d in project folder\nSet Environment Variables\nConnections will default to localhost otherwise\n\nDATABASE_URL for Postgres DSN\nREDIS_URL for Redis\nSECRET for JWT Secret\n\nRun\n$ git clone https://github.com/catervajs/caterva.git\n$ npm install\n$ npm run startOpenAPI Specifications\nAfter launching the project, Swagger UI can be accessed through /api.\nAlternatively, OpenAPI specification can be downloaded as a JSON file from /api-json, and used for generating client libraries.\nModules Documentation\nCompodoc documentation is available in the documentation directory.\nDocumentation can be generated and viewed with $npm run document.\nPlugin Development\nIt is recommended to read through the NestJS documentation for modules and DI concepts.\nAfter cloning the project, you can create custom modules under the extensions directory, import core services into the modules and register modules to the ExtensionsModule module for them to take effect.\nTwo example modules, wallet and profile modules are provided under the extensions diretory. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ExtensionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FriendModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        GroupModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LeaderboardModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfileModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WalletModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_exports\n\n\n\ncluster_AccountModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_CoreModule_exports\n\n\n\ncluster_ExtensionsModule\n\n\n\ncluster_ExtensionsModule_imports\n\n\n\ncluster_FriendModule\n\n\n\ncluster_FriendModule_exports\n\n\n\ncluster_FriendModule_providers\n\n\n\ncluster_GroupModule\n\n\n\ncluster_GroupModule_exports\n\n\n\ncluster_GroupModule_providers\n\n\n\ncluster_LeaderboardModule\n\n\n\ncluster_LeaderboardModule_exports\n\n\n\ncluster_LeaderboardModule_providers\n\n\n\ncluster_ProfileModule\n\n\n\ncluster_ProfileModule_exports\n\n\n\ncluster_ProfileModule_providers\n\n\n\ncluster_WalletModule\n\n\n\ncluster_WalletModule_exports\n\n\n\ncluster_WalletModule_providers\n\n\n\n\nAccountService \n\nAccountService \n\n\n\nAccountModule\n\nAccountModule\n\nAccountService  -->\n\nAccountModule->AccountService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nAccountModule->CoreModule\n\n\n\n\n\nAccountService\n\nAccountService\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAccountModule -->\n\nJwtStrategy->AccountModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nAccountModule \n\nAccountModule \n\nAccountModule  -->\n\nCoreModule->AccountModule \n\n\n\n\n\nFriendModule \n\nFriendModule \n\nFriendModule  -->\n\nCoreModule->FriendModule \n\n\n\n\n\nGroupModule \n\nGroupModule \n\nGroupModule  -->\n\nCoreModule->GroupModule \n\n\n\n\n\nLeaderboardModule \n\nLeaderboardModule \n\nLeaderboardModule  -->\n\nCoreModule->LeaderboardModule \n\n\n\n\n\nWalletModule\n\nWalletModule\n\nWalletModule -->\n\nCoreModule->WalletModule\n\n\n\n\n\nExtensionsModule\n\nExtensionsModule\n\nAppModule -->\n\nExtensionsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nFriendModule\n\nFriendModule\n\nCoreModule -->\n\nFriendModule->CoreModule\n\n\n\n\n\nFriendService \n\nFriendService \n\nFriendService  -->\n\nFriendModule->FriendService \n\n\n\n\n\nGroupModule\n\nGroupModule\n\nCoreModule -->\n\nGroupModule->CoreModule\n\n\n\n\n\nGroupService \n\nGroupService \n\nGroupService  -->\n\nGroupModule->GroupService \n\n\n\n\n\nLeaderboardModule\n\nLeaderboardModule\n\nCoreModule -->\n\nLeaderboardModule->CoreModule\n\n\n\n\n\nLeaderboardService \n\nLeaderboardService \n\nLeaderboardService  -->\n\nLeaderboardModule->LeaderboardService \n\n\n\n\n\nProfileModule\n\nProfileModule\n\nExtensionsModule -->\n\nProfileModule->ExtensionsModule\n\n\n\n\n\nProfileService \n\nProfileService \n\nProfileService  -->\n\nProfileModule->ProfileService \n\n\n\nExtensionsModule -->\n\nWalletModule->ExtensionsModule\n\n\n\n\n\nWalletService \n\nWalletService \n\nWalletService  -->\n\nWalletModule->WalletService \n\n\n\n\n\nFriendService\n\nFriendService\n\nFriendModule -->\n\nFriendService->FriendModule\n\n\n\n\n\nGroupService\n\nGroupService\n\nGroupModule -->\n\nGroupService->GroupModule\n\n\n\n\n\nLeaderboardService\n\nLeaderboardService\n\nLeaderboardModule -->\n\nLeaderboardService->LeaderboardModule\n\n\n\n\n\nProfileService\n\nProfileService\n\nProfileModule -->\n\nProfileService->ProfileModule\n\n\n\n\n\nWalletService\n\nWalletService\n\nWalletModule -->\n\nWalletService->WalletModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    9 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    46 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
